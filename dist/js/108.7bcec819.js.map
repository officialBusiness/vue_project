{"version":3,"file":"js/108.7bcec819.js","mappings":"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GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,GAAG,IAAI,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,IAAI,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,KAAK,GAAG,EAAE,KAAK,IAAI,KAAK,IAAI,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,GAAG,IAAI,GAAG,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,KAAK,EAAE,KAAK,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,IAAI,KAAK,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,KAAK,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,KAAK,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,KAAK,MAAM,GAAG,KAAK,EAAE,IAAI,EAAE,KAAK,GAAG,KAAK,KAAK,IAAI,KAAK,KAAK,EAAE,MAEt9CC,GAAwB,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,GAAG,GAAG,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,GAAG,EAAE,GAAG,GAAG,EAAE,EAAE,GAAG,GAAG,EAAE,EAAE,IAAI,GAAG,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,GAAG,MAAM,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,MAAM,EAAE,KAAK,GAAG,EAAE,GAAG,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,GAAG,IAAI,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,GAAG,KAAK,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,GAAG,IAAI,GAAG,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,KAAK,EAAE,OAAO,KAK7vB,SAASC,GAAc3vB,EAAcoI,GACnC,IAAI4S,EAAM,MACV,IAAK,IAAIhO,EAAI,EAAGnL,EAASuG,EAAIvG,OAAQmL,EAAInL,EAAQmL,GAAK,EAAG,CAEvD,GADAgO,GAAO5S,EAAI4E,GACPgO,EAAMhb,EAAM,OAAO,EAGvB,GADAgb,GAAO5S,EAAI4E,EAAI,GACXgO,GAAOhb,EAAM,OAAO,CACzB,CACD,OAAO,CACR,CAIM,SAAS4vB,GAAkB5vB,GAChC,OAAIA,EAAO,GAAsB,KAAOA,EACpCA,GAAQ,KACRA,EAAO,GAAsB,KAAOA,EACpCA,GAAQ,MACRA,GAAQ,MAERA,GAAQ,KAAQuvB,GAAwBM,KAAKzgB,OAAO0gB,aAAa9vB,IAG9D2vB,GAAc3vB,EAAMyvB,KAC5B,CAIM,SAASM,GAAiB/vB,GAC/B,OAAIA,EAAO,GAAkB,KAAOA,EAChCA,EAAO,MACPA,EAAO,MACPA,GAAQ,KACRA,EAAO,GAAsB,KAAOA,EACpCA,GAAQ,MACRA,GAAQ,MACHA,GAAQ,KAAQwvB,GAAmBK,KAAKzgB,OAAO0gB,aAAa9vB,IAGnE2vB,GAAc3vB,EAAMyvB,KACpBE,GAAc3vB,EAAM0vB,MAEvB,CChFD,MAAMM,GAAgB,CACpB1Y,QAAS,CACP,QACA,OACA,QACA,WACA,WACA,UACA,KACA,OACA,UACA,MACA,WACA,KACA,SACA,SACA,QACA,MACA,MACA,QACA,QACA,OACA,MACA,OACA,QACA,QACA,UACA,SACA,SACA,OACA,OACA,QACA,KACA,aACA,SACA,OACA,UAEF2Y,OAAQ,CACN,aACA,YACA,MACA,UACA,UACA,YACA,SACA,SACA,SAEFC,WAAY,CAAC,OAAQ,cAEjBtL,GAAW,IAAIjL,IAAIqW,GAAc1Y,SACjC6Y,GAAyB,IAAIxW,IAAIqW,GAAcC,QAC/CG,GAA6B,IAAIzW,IAAIqW,GAAcE,YAKlD,SAASG,GAAeC,EAAcC,GAC3C,OAAQA,GAAqB,UAATD,GAA8B,SAATA,CAC1C,CAOM,SAASE,GAAqBF,EAAcC,GACjD,OAAOF,GAAeC,EAAMC,IAAaJ,GAAuBM,IAAIH,EACrE,CAMM,SAASI,GAA6BJ,GAC3C,OAAOF,GAA2BK,IAAIH,EACvC,CAOM,SAASK,GACdL,EACAC,GAEA,OACEC,GAAqBF,EAAMC,IAAaG,GAA6BJ,EAExE,CAEM,SAASM,GAAUN,GACxB,OAAO1L,GAAS6L,IAAIH,EACrB,CC5EM,SAASO,GACdC,EACAC,EACAC,GAEA,OACc,KAAZF,GACS,KAATC,GACAnB,GAAkBoB,EAErB,CAOD,MAAMC,GAAsB,IAAItX,IAAI,CAClC,QACA,OACA,QACA,WACA,WACA,UACA,KACA,OACA,UACA,MACA,WACA,KACA,SACA,SACA,QACA,MACA,MACA,QACA,QACA,OACA,MACA,OACA,QACA,QACA,UACA,SACA,SACA,OACA,OACA,QACA,KACA,aACA,SACA,OACA,SAEA,aACA,YACA,MACA,UACA,UACA,YACA,SACA,SACA,QAEA,OACA,YAEA,OACA,UAGK,SAASuX,GAAkBZ,GAChC,OAAOW,GAAoBR,IAAIH,EAChC,CC1FM,MAAMa,GAAqB,EACrBC,GAAqB,EACrBC,GAAqB,EACrBC,GAAqB,EACrBC,GAAqB,EACrBC,GAAqB,GACrBC,GAAqB,GACrBC,GAAqB,GACrBC,GAAqB,IACrBC,GAAqB,IACrBC,GAAYT,GAAgBC,GAAiBO,GAgB7CE,GAA6B,EAC7BC,GAA6B,EAE7BC,GAA6B,EAC7BC,GAA6B,EAC7BC,GAA6B,GAI7BC,GAA6B,GAC7BC,GAA6B,IAC7BC,GAA6B,IAC7BC,GAA6B,IAC7BC,GAA6B,KAC7BC,GAA6B,KAC7BC,GAA6B,KAK7BC,GAAqBZ,GAAkBC,GAAiBE,GAAsBG,GAC9EO,GAAuC,EAAlBb,GAAmCG,GAAsB,EAC9EW,GAAuC,EAAlBd,GAAmCE,GAAsB,EAC9Ea,GAAuC,EAAlBf,GAAmCI,GAAsB,EAC9EY,GAAqB,EAAkBf,GAAuCK,GAC9EW,GAAqB,EAAkBhB,GACvCiB,GAAqBlB,GAAkBC,GAAiBE,GAAsBI,GAC9EY,GAAqB,EAAkDV,GAGvEW,GAAqB,EAAyDf,GAC9EgB,GAAuC,EAAlBrB,GAAyDK,GAE9EiB,GAAqBJ,GAAkBV,GACvCe,GAAqB,EAAyDd,GAC9Ee,GAAqB,EAAkBvB,GAAuCU,GAE9Ec,GAAuBf,GAgBvBgB,GAA4B,EAC5BC,GAA4B,EAC5BC,GAA4B,EAC5BC,GAA8BF,GAA4BC,GAG1DE,GAAgCH,GAA4BD,GAC5DK,GAAgCH,GAA4BF,GAC5DM,GAAgCL,GAChCM,GAAgCL,GAChCM,GAAgC,ECpEtC,MAAMC,GASXroB,YAAY4Q,GAAmB,KAN/B0X,IAAmB,IAAIva,IAMQ,KAJ/Bwa,QAAuB,IAAIxa,IAII,KAF/Bya,UAAyB,IAAIza,IAG3Bnd,KAAKggB,MAAQA,CACd,EAKY,MAAM6X,GAMnBzoB,YAAY0oB,EAAmB/D,GAAmB,KALlD+D,YAKkD,OAJlDC,WAA4B,GAIsB,KAHlDhE,cAGkD,OAFlDiE,iBAA0C,IAAI3P,IAG5CroB,KAAK83B,OAASA,EACd93B,KAAK+zB,SAAWA,CACjB,CAEGkE,iBACF,OAAQj4B,KAAKk4B,uBAAyBrD,IAAkB,CACzD,CACGsD,iBACF,OAAQn4B,KAAKo4B,wBAA0BpD,IAAe,CACvD,CACGxR,uBACF,OAAQxjB,KAAKo4B,wBAA0BnD,IAAsB,CAC9D,CACGoD,cACF,OAAQr4B,KAAKo4B,wBAA0BlD,IAAe,CACvD,CACGoD,sCACF,MAAMtY,EAAQhgB,KAAKo4B,wBACnB,OAAQpY,EAAQkV,IAAe,GAAkC,KAA5BlV,EAAQ6U,GAC9C,CACG0D,oBACF,IAAK,IAAI/nB,EAAIxQ,KAAK+3B,WAAW1yB,OAAS,GAAKmL,IAAK,CAC9C,MAAM,MAAEwP,GAAUhgB,KAAK+3B,WAAWvnB,GAClC,GAAIwP,EAAQmV,GACV,OAAO,EAET,GAAInV,GAASqV,GAAYH,IAEvB,OAAO,CAEV,CACF,CACGsD,yBACF,OAAQx4B,KAAKo4B,wBAA0BvD,IAAkB,CAC1D,CACG4D,0BACF,OAAOz4B,KAAK04B,2BAA2B14B,KAAK24B,eAC7C,CAEDC,YAAY5Y,GACV,OAAO,IAAIyX,GAAMzX,EAClB,CAED6Y,MAAM7Y,GAGJhgB,KAAK+3B,WAAWtyB,KAAKzF,KAAK44B,YAAY5Y,GACvC,CAED8Y,OACE,MAAMC,EAAQ/4B,KAAK+3B,WAAWxyB,MAC9B,OAAOwzB,EAAM/Y,KACd,CAKD0Y,2BAA2BK,GACzB,SACEA,EAAM/Y,OAAS6U,GAAiBM,MAC9Bn1B,KAAK83B,OAAO/D,UAAYgF,EAAM/Y,MAAQ4U,GAE3C,CAEDoE,YAAYxwB,EAAcywB,EAA2B7a,GACnD,IAAI2a,EAAQ/4B,KAAK24B,eACjB,GAAIM,EAAcxD,IAAsBwD,EAAcvD,GACpD11B,KAAKk5B,0BAA0BH,EAAOvwB,EAAMywB,EAAa7a,GAErD6a,EAAcvD,GAChBqD,EAAMnB,UAAUuB,IAAI3wB,GAEpBuwB,EAAMpB,QAAQwB,IAAI3wB,GAGhBywB,EAAcxD,IAChBz1B,KAAKo5B,mBAAmBL,EAAOvwB,QAE5B,GAAIywB,EAAczD,GACvB,IAAK,IAAIhlB,EAAIxQ,KAAK+3B,WAAW1yB,OAAS,EAAGmL,GAAK,IAAKA,EAMjD,GALAuoB,EAAQ/4B,KAAK+3B,WAAWvnB,GACxBxQ,KAAKk5B,0BAA0BH,EAAOvwB,EAAMywB,EAAa7a,GACzD2a,EAAMrB,IAAIyB,IAAI3wB,GACdxI,KAAKo5B,mBAAmBL,EAAOvwB,GAE3BuwB,EAAM/Y,MAAQqV,GAAW,MAG7Br1B,KAAK83B,OAAO/D,UAAYgF,EAAM/Y,MAAQ4U,IACxC50B,KAAKg4B,iBAAiBqB,OAAO7wB,EAEhC,CAED4wB,mBAAmBL,EAAevwB,GAC5BxI,KAAK83B,OAAO/D,UAAYgF,EAAM/Y,MAAQ4U,IACxC50B,KAAKg4B,iBAAiBqB,OAAO7wB,EAEhC,CAED0wB,0BACEH,EACAvwB,EACAywB,EACA7a,GAEIpe,KAAKs5B,oBAAoBP,EAAOvwB,EAAMywB,IACxCj5B,KAAK83B,OAAOzS,MAAMpG,EAAO5C,iBAAkB,CACzCiJ,GAAIlH,EACJxO,eAAgBpH,GAGrB,CAED8wB,oBACEP,EACAvwB,EACAywB,GAEA,SAAMA,EAAc3D,MAEhB2D,EAAcxD,GAEdsD,EAAMpB,QAAQ1D,IAAIzrB,IAClBuwB,EAAMnB,UAAU3D,IAAIzrB,IACpBuwB,EAAMrB,IAAIzD,IAAIzrB,GAIdywB,EAAcvD,GAEdqD,EAAMpB,QAAQ1D,IAAIzrB,KAChBxI,KAAK04B,2BAA2BK,IAAUA,EAAMrB,IAAIzD,IAAIzrB,GAK3DuwB,EAAMpB,QAAQ1D,IAAIzrB,MAEfuwB,EAAM/Y,MAAQ+U,IACdgE,EAAMpB,QAAQ4B,SAAShF,OAAO3wB,QAAU4E,KAE1CxI,KAAK04B,2BAA2BK,IAAUA,EAAMnB,UAAU3D,IAAIzrB,GAEnE,CAEDgxB,iBAAiBrW,GACf,MAAM,KAAE3a,GAAS2a,EACXsW,EAAgBz5B,KAAK+3B,WAAW,GAEnC0B,EAAc9B,QAAQ1D,IAAIzrB,IAC1BixB,EAAc/B,IAAIzD,IAAIzrB,IAItBixB,EAAc7B,UAAU3D,IAAIzrB,IAE7BxI,KAAKg4B,iBAAiBpsB,IAAIpD,EAAM2a,EAAG/E,IAAI3O,MAE1C,CAEDkpB,eACE,OAAO34B,KAAK+3B,WAAW/3B,KAAK+3B,WAAW1yB,OAAS,EACjD,CAED6yB,uBACE,IAAK,IAAI1nB,EAAIxQ,KAAK+3B,WAAW1yB,OAAS,GAAKmL,IAAK,CAC9C,MAAM,MAAEwP,GAAUhgB,KAAK+3B,WAAWvnB,GAClC,GAAIwP,EAAQqV,GACV,OAAOrV,CAEV,CACF,CAGDoY,wBACE,IAAK,IAAI5nB,EAAIxQ,KAAK+3B,WAAW1yB,OAAS,GAAKmL,IAAK,CAC9C,MAAM,MAAEwP,GAAUhgB,KAAK+3B,WAAWvnB,GAClC,GAAIwP,GAASqV,GAAYH,OAAkBlV,EAAQ8U,IACjD,OAAO9U,CAEV,CACF,ECzNH,MAAM0Z,WAAkBjC,GAAMroB,eAAAA,GAAA,iBAE5BuqB,iBAAgC,IAAIxc,GAFR,EAKf,MAAMyc,WAAyB/B,GAC5Ce,YAAY5Y,GACV,OAAO,IAAI0Z,GAAU1Z,EACtB,CAEDgZ,YAAYxwB,EAAcywB,EAA2B7a,GACnD,MAAM2a,EAAQ/4B,KAAK24B,eACnB,GAAIM,EAAcjD,GAIhB,OAHAh2B,KAAKk5B,0BAA0BH,EAAOvwB,EAAMywB,EAAa7a,GACzDpe,KAAKo5B,mBAAmBL,EAAOvwB,QAC/BuwB,EAAMY,iBAAiBR,IAAI3wB,GAI7BmX,MAAMqZ,YAAYxwB,EAAMywB,EAAa7a,EACtC,CAEDkb,oBACEP,EACAvwB,EACAywB,GAEA,QAAItZ,MAAM2Z,oBAAoBP,EAAOvwB,EAAMywB,OAEvCA,EAAcjD,OAEb+C,EAAMY,iBAAiB1F,IAAIzrB,KAC3BuwB,EAAMpB,QAAQ1D,IAAIzrB,IAASuwB,EAAMnB,UAAU3D,IAAIzrB,IAKrD,CAEDgxB,iBAAiBrW,GACVnjB,KAAK+3B,WAAW,GAAG4B,iBAAiB1F,IAAI9Q,EAAG3a,OAC9CmX,MAAM6Z,iBAAiBrW,EAE1B,ECxCY,MAAM0W,GAAWzqB,cAAA,KAa9B0qB,mBAA6B,EAbC,KAc9BC,6BAAuC,CAdT,CA2B9BnU,UAAUoU,GACR,GAA4B,kBAAjBA,EACT,OAAOh6B,KAAKyK,QAAQwpB,IAAI+F,GACnB,CACL,MAAOC,EAAYC,GAAiBF,EACpC,IAAKh6B,KAAK4lB,UAAUqU,GAClB,OAAO,EAET,MAAME,EAAgBn6B,KAAKyK,QAAQiB,IAAIuuB,GACvC,IAAK,MAAM54B,KAAOqC,OAAO0M,KACvB8pB,GAEA,IAAI,MAAAC,OAAA,EAAAA,EAAgB94B,MAAS64B,EAAc74B,GACzC,OAAO,EAGX,OAAO,CACR,CACF,CAED2hB,gBAGEoX,EAAoB5xB,GAAkB,MACtC,cAAQ,EAAAxI,KAAKyK,QAAQiB,IAAI0uB,SAAzB,EAAOC,EACL7xB,EAEH,EC/BH,SAAS8xB,GAAoB/2B,EAAoBg3B,QACjBrsB,IAA1B3K,EAAKi3B,iBACPj3B,EAAKi3B,iBAAmBD,EAExBh3B,EAAKi3B,iBAAiBC,WAAWF,EAEpC,CAUD,SAASG,GAAmBn3B,EAAoBg3B,QACjBrsB,IAAzB3K,EAAKo3B,gBACPp3B,EAAKo3B,gBAAkBJ,EAEvBh3B,EAAKo3B,gBAAgBF,WAAWF,EAEnC,CAUM,SAASK,GACdr3B,EACAg3B,QAE2BrsB,IAAvB3K,EAAKs3B,cACPt3B,EAAKs3B,cAAgBN,EAErBh3B,EAAKs3B,cAAcJ,WAAWF,EAEjC,CAWD,SAASO,GACPv3B,EACAw3B,EACAC,GAEA,IAAIC,EAAc,KACdzqB,EAAIuqB,EAAS11B,OACjB,MAAuB,OAAhB41B,GAAwBzqB,EAAI,EACjCyqB,EAAcF,IAAWvqB,GAEP,OAAhByqB,GAAwBA,EAAYxrB,MAAQurB,EAAUvrB,MACxDmrB,GAAiBr3B,EAAMy3B,EAAUT,UAEjCD,GAAoBW,EAAaD,EAAUT,SAE9C,CAGc,MAAMW,WAAuBrB,GAC1CsB,WAAWC,GACLp7B,KAAK2P,WAAUyrB,EAAQhd,IAAIzO,SAAW3P,KAAK2P,UAC/C3P,KAAKqmB,MAAMkU,SAAS90B,KAAK21B,EAC1B,CAUDC,eAAe93B,GACb,MAAM,aAAE+3B,GAAiBt7B,KAAKqmB,MACxBkV,EAAqBD,EAAaj2B,OACxC,GAA2B,IAAvBk2B,EAA0B,OAC9B,IAAI/qB,EAAI+qB,EAAqB,EAC7B,MAAMC,EAAgBF,EAAa9qB,GAE/BgrB,EAAc/rB,QAAUlM,EAAKmM,MAC/B8rB,EAAcC,YAAcl4B,EAC5BiN,KAGF,MAAQf,MAAOisB,GAAcn4B,EAE7B,KAAOiN,GAAK,EAAGA,IAAK,CAClB,MAAMwqB,EAAYM,EAAa9qB,GACzBmrB,EAAaX,EAAUtrB,IAC7B,KAAIisB,EAAaD,GAUV,CACDC,IAAeD,IACjBV,EAAUY,aAAer4B,GAG3B,KACD,CATCy3B,EAAUa,eAAiBt4B,EAC3BvD,KAAK87B,gBAAgBd,GACrBM,EAAaS,OAAOvrB,EAAG,EAQ1B,CACF,CAQDsrB,gBAAgBd,GACd,MAAM,SAAET,GAAaS,EACrB,GAA8B,OAA1BA,EAAUS,aAAmD,OAA3BT,EAAUY,aAChB,OAA1BZ,EAAUS,aACZnB,GAAoBU,EAAUS,YAAalB,GAEd,OAA3BS,EAAUY,cACZlB,GAAmBM,EAAUY,aAAcrB,OAExC,CAEL,MAAQsB,eAAgBt4B,EAAMkM,MAAOusB,GAAiBhB,EACtD,GAAI,KAAAh7B,KAAKi8B,MAAMC,WAAWF,EAAe,GAIvC,OAAQz4B,EAAK8C,MACX,IAAK,mBACL,IAAK,gBACL,IAAK,mBACHy0B,GAAoBv3B,EAAMA,EAAKmN,WAAYsqB,GAC3C,MACF,IAAK,iBACL,IAAK,yBACHF,GAAoBv3B,EAAMA,EAAKtB,UAAW+4B,GAC1C,MACF,IAAK,sBACL,IAAK,qBACL,IAAK,0BACL,IAAK,eACL,IAAK,cACL,IAAK,qBACHF,GAAoBv3B,EAAMA,EAAKse,OAAQmZ,GACvC,MACF,IAAK,kBACL,IAAK,eACL,IAAK,kBACHF,GAAoBv3B,EAAMA,EAAKw3B,SAAUC,GACzC,MACF,IAAK,yBACL,IAAK,oBACHF,GAAoBv3B,EAAMA,EAAK0iB,WAAY+U,GAC3C,MACF,QACEJ,GAAiBr3B,EAAMg3B,QAI3BK,GAAiBr3B,EAAMg3B,EAE1B,CACF,CAUD4B,4BACE,MAAM,aAAEb,GAAiBt7B,KAAKqmB,MAC9B,IAAK,IAAI7V,EAAI8qB,EAAaj2B,OAAS,EAAGmL,GAAK,EAAGA,IAC5CxQ,KAAK87B,gBAAgBR,EAAa9qB,IAEpCxQ,KAAKqmB,MAAMiV,aAAe,EAC3B,CAoBDc,kCAAkC74B,GAChC,MAAM,aAAE+3B,GAAiBt7B,KAAKqmB,OACxB,OAAEhhB,GAAWi2B,EACnB,GAAe,IAAXj2B,EAAc,OAClB,MAAM21B,EAAYM,EAAaj2B,EAAS,GACpC21B,EAAUS,cAAgBl4B,IAC5By3B,EAAUS,YAAc,KAE3B,CAaDY,wBAAwB94B,EAAYkM,EAAeC,GACjD,MAAM,aAAE4rB,GAAiBt7B,KAAKqmB,MACxBkV,EAAqBD,EAAaj2B,OACxC,GAA2B,IAAvBk2B,EAA0B,OAC9B,IAAI/qB,EAAI+qB,EAAqB,EAE7B,KAAO/qB,GAAK,EAAGA,IAAK,CAClB,MAAMwqB,EAAYM,EAAa9qB,GACzBmrB,EAAaX,EAAUtrB,IACvBssB,EAAehB,EAAUvrB,MAE/B,GAAIusB,IAAiBtsB,EACnBsrB,EAAUS,YAAcl4B,OACnB,GAAIo4B,IAAelsB,EACxBurB,EAAUY,aAAer4B,OACpB,GAAIo4B,EAAalsB,EACtB,KAEH,CACF,EC9RI,MAAM6sB,GAAY,yBACZC,GAAa,IAAIzvB,OAAOwvB,GAAU3W,OAAQ,KAGhD,SAAS6W,GAAUh5B,GACxB,OAAQA,GACN,KAAK,GACL,KAAK,GACL,KAAK,KACL,KAAK,KACH,OAAO,EAET,QACE,OAAO,EAEZ,CAEM,MAAMi5B,GAAiB,gCAEjBC,GACX,iDAMWC,GAA4B,IAAI7vB,OAI3C,OAGE4vB,GAAqB/W,OACrB,QAGA,2CAA2CA,OAC7C,KAIK,SAASiX,GAAap5B,GAC3B,OAAQA,GACN,KAAK,EACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,IACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,KACL,KAAK,MACL,KAAK,MACH,OAAO,EAET,QACE,OAAO,EAEZ,CChDc,MAAMq5B,GAAMztB,cAAA,KACzBqkB,YADyB,OAEzBqJ,aAFyB,OAGzBC,eAHyB,OAOzBvY,cAPyB,OAQzBuC,YARyB,OAuBzBiW,OAA4B,GAvBH,KA0BzBC,kBAA4B,EA1BH,KAgCzBC,UAAsB,GAhCG,KAwCzBC,0BAAsC,GAxCb,KA2CzBC,wBAAkC,EA3CT,KA4CzBC,QAAkB,EA5CO,KA6CzBC,oBAA8B,EA7CL,KA8CzBC,gBAA0B,EA9CD,KA+CzBC,kBAA4B,EA/CH,KAgDzBC,iBAA2B,EAhDF,KAiDzBC,mCAA6C,EAjDpB,KAoDzBC,aAAkC,CAChCC,yBAA0B,EAC1BC,cAAe,MAtDQ,KA0DzBC,WAAqB,EA1DI,KA2DzBC,4BAAsC,EA3Db,KA8DzBC,OAIK,GAlEoB,KAuEzBC,eAA4C,CAAC,IAvEpB,KA0EzB1D,SAA6B,GA1EJ,KA6EzBe,aAAyC,GA7EhB,KAgFzB9c,IAAc,EAhFW,KAoFzBnY,KApFyB,SAuFzBzC,MAAa,KAvFY,KA0FzB6L,MAAgB,EA1FS,KA2FzBC,IAAc,EA3FW,KA+FzBwX,cAA0B,KA/FD,KAiGzBgX,gBAA4B,KAjGH,KAkGzBC,aAAuB,EAlGE,KAsGzBtvB,QAA6B,CAACuvB,EAAG9W,OAtGR,KAwGzB+W,oBAA8B,EAxGL,KA6GzBC,aAAuB,EA7GE,KAiHzBC,8BAAiD,KAjHxB,KA2HzBC,aAA6D,IAAInW,IA3HxC,KA8HzBoW,aAAuB,CA9HE,CAUzBC,MAAK,WAAEp0B,EAAF,WAAcD,EAAd,UAA0Bs0B,EAA1B,YAAqCC,IACxC5+B,KAAKyzB,QACY,IAAfnpB,KAEmB,IAAfA,GAEe,WAAfD,GAENrK,KAAK88B,QAAU6B,EACf3+B,KAAK+8B,WAAa6B,EAClB5+B,KAAKwkB,SAAWxkB,KAAK+mB,OAAS,IAAI5X,EAASwvB,EAAWC,EAAa,EACpE,CA2GDC,cACE,OAAO,IAAI1vB,EAASnP,KAAK88B,QAAS98B,KAAKwe,IAAMxe,KAAK+8B,UAAW/8B,KAAKwe,IACnE,CAEDF,MAAMwgB,GACJ,MAAMzY,EAAQ,IAAIwW,GACZzsB,EAAO1M,OAAO0M,KAAKpQ,MACzB,IAAK,IAAIwQ,EAAI,EAAGnL,EAAS+K,EAAK/K,OAAQmL,EAAInL,EAAQmL,IAAK,CACrD,MAAMnP,EAAM+O,EAAKI,GACjB,IAAIuuB,EAAM/+B,KAAKqB,IAEVy9B,GAAcl0B,MAAMC,QAAQk0B,KAC/BA,EAAMA,EAAIC,SAIZ3Y,EAAMhlB,GAAO09B,CACd,CAED,OAAO1Y,CACR,E,OC9KH,SAAiB7iB,GACf,OAAOA,GAAI,IAAcA,GAAzB,EACD,EAED,MAAMy7B,GAAoC,CACxCC,UAAW,IAAI/hB,IAAY,CAAC,GAAD,yBAU3BgiB,IAAK,IAAIhiB,IAAY,CAAhB,gBAQDiiB,GAAmC,CAEvCC,IAAMC,GAAe,KAAAA,GAFkB,KAESA,EAGhDC,IAAMD,GAAeA,GAAA,IAA0BA,GALR,GAQvCE,IAAMF,GAAeA,GAAA,IAA0BA,GARR,GAWvCH,IAAMG,GACHA,GAAA,IAA0BA,GAA3B,IACCA,GAAM,IAAwBA,GAAM,IACpCA,GAAM,IAAwBA,GAAM,KAWlC,SAASG,GACdp5B,EACA41B,EACAzd,EACAue,EACAD,EACAE,GAEA,MAAM0C,EAAalhB,EACbmhB,EAAmB5C,EACnB6C,EAAiB9C,EAEvB,IAAI+C,EAAM,GACNC,EAAkB,KAClBC,EAAavhB,EACjB,MAAM,OAAEnZ,GAAW42B,EACnB,OAAS,CACP,GAAIzd,GAAOnZ,EAAQ,CACjB23B,EAAOgD,aAAaN,EAAYC,EAAkBC,GAClDC,GAAO5D,EAAM+C,MAAMe,EAAYvhB,GAC/B,KACD,CACD,MAAM8gB,EAAKrD,EAAMC,WAAW1d,GAC5B,GAAIyhB,GAAY55B,EAAMi5B,EAAIrD,EAAOzd,GAAM,CACrCqhB,GAAO5D,EAAM+C,MAAMe,EAAYvhB,GAC/B,KACD,CACD,GAAW,KAAP8gB,EAA4B,CAC9BO,GAAO5D,EAAM+C,MAAMe,EAAYvhB,GAC/B,MAAM0hB,EAAMC,GACVlE,EACAzd,EACAue,EACAD,EACS,aAATz2B,EACA22B,GAEa,OAAXkD,EAAIZ,IAAgBQ,EAGtBD,GAAOK,EAAIZ,GAFXQ,EAAkB,CAAEthB,MAAKue,YAAWD,aAInCte,MAAKue,YAAWD,WAAYoD,GAC/BH,EAAavhB,CACd,MACQ,OAAP8gB,GACO,OAAPA,KAEE9gB,IACAse,EACFC,EAAYve,GACI,KAAP8gB,GAAoC,KAAPA,EACzB,aAATj5B,GACFw5B,GAAO5D,EAAM+C,MAAMe,EAAYvhB,GAAO,OACpCA,EAEO,KAAP8gB,GACA,KAAArD,EAAMC,WAAW1d,MAEfA,IAEFse,EACFiD,EAAahD,EAAYve,GAEzBwe,EAAOgD,aAAaN,EAAYC,EAAkBC,KAGlDphB,CAEL,CACD,MAAO,CACLA,MACA4hB,IAAKP,EACLC,kBACA/C,YACAD,UAIAuD,kBAAmBP,EAEtB,CAED,SAASG,GACP55B,EACAi5B,EACArD,EACAzd,GAEA,MAAa,aAATnY,EAEO,KAAPi5B,GACC,KAAAA,GAFH,MAGIrD,EAAMC,WAAW1d,EAAM,GAI3B8gB,KAAiB,WAATj5B,EAAA,MAEX,CAOD,SAAS85B,GACPlE,EACAzd,EACAue,EACAD,EACAwD,EACAtD,GAEA,MAAMuD,GAAkBD,EACxB9hB,IAEA,MAAM0hB,EAAOZ,IAAD,CAA0B9gB,MAAK8gB,KAAIvC,YAAWD,YAEpDwC,EAAKrD,EAAMC,WAAW1d,KAC5B,OAAQ8gB,GACN,KAAK,IACH,OAAOY,EAAI,MACb,KAAK,IACH,OAAOA,EAAI,MACb,KAAK,IAAsB,CACzB,IAAI18B,EAWJ,QAVGA,OAAMgb,OAAQgiB,GACfvE,EACAzd,EACAue,EACAD,EACA,GACA,EACAyD,EACAvD,IAEKkD,EAAa,OAAT18B,EAAgB,KAAOoP,OAAO0gB,aAAa9vB,GACvD,CACD,KAAK,IAAsB,CACzB,IAAIA,EASJ,QARGA,OAAMgb,OAAQiiB,GACfxE,EACAzd,EACAue,EACAD,EACAyD,EACAvD,IAEKkD,EAAa,OAAT18B,EAAgB,KAAOoP,OAAO8tB,cAAcl9B,GACxD,CACD,KAAK,IACH,OAAO08B,EAAI,MACb,KAAK,GACH,OAAOA,EAAI,MACb,KAAK,IACH,OAAOA,EAAI,MACb,KAAK,IACH,OAAOA,EAAI,MACb,KAAK,GACC,KAAAjE,EAAMC,WAAW1d,MACjBA,EAGN,KAAK,GACHue,EAAYve,IACVse,EAEJ,KAAK,KACL,KAAK,KACH,OAAOoD,EAAI,IACb,KAAK,GACL,KAAK,GACH,GAAII,EACF,OAAOJ,EAAI,MAEXlD,EAAO2D,oBAAoBniB,EAAM,EAAGue,EAAWD,GAGnD,QACE,GAAIwC,GAAM,IAAoBA,GAAM,GAAkB,CACpD,MAAM/a,EAAW/F,EAAM,EACjBoiB,EAAQ3E,EAAM+C,MAAMza,EAAU/F,EAAM,GAAGoiB,MAAM,WAEnD,IAAIC,EAAWD,EAAM,GAEjBE,EAAQC,SAASF,EAAU,GAC3BC,EAAQ,MACVD,EAAWA,EAAS7B,MAAM,GAAI,GAC9B8B,EAAQC,SAASF,EAAU,IAE7BriB,GAAOqiB,EAASx7B,OAAS,EACzB,MAAMkvB,EAAO0H,EAAMC,WAAW1d,GAC9B,GACe,MAAbqiB,GAAA,KACAtM,GACS,KAATA,EACA,CACA,GAAI+L,EACF,OAAOJ,EAAI,MAEXlD,EAAO2D,oBAAoBpc,EAAUwY,EAAWD,EAEnD,CAED,OAAOoD,EAAIttB,OAAO0gB,aAAawN,GAChC,CAED,OAAOZ,EAAIttB,OAAO0gB,aAAagM,IAEpC,CAOD,SAASkB,GACPvE,EACAzd,EACAue,EACAD,EACAkE,EACAC,EACAV,EACAvD,GAEA,MAAM0C,EAAalhB,EACnB,IAAI0iB,EAoBJ,QAnBGA,IAAG1iB,OAAQ2iB,GACZlF,EACAzd,EACAue,EACAD,EACA,GACAkE,EACAC,GACA,EACAjE,GACmBuD,IAEX,OAANW,IACEX,EACFvD,EAAOoE,sBAAsB1B,EAAY3C,EAAWD,GAEpDte,EAAMkhB,EAAa,GAGhB,CAAEl8B,KAAM09B,EAAG1iB,MACnB,CAuBM,SAAS2iB,GACdlF,EACAzd,EACAue,EACAD,EACAvmB,EACAyqB,EACAC,EACAI,EACArE,EACAsE,GAEA,MAAM7xB,EAAQ+O,EACR+iB,EACM,KAAVhrB,EACI0oB,GAAkCE,IAClCF,GAAkCC,UAClCsC,EACM,KAAVjrB,EACI6oB,GAAiCD,IACvB,KAAV5oB,EACA6oB,GAAiCI,IACvB,IAAVjpB,EACA6oB,GAAiCG,IACjCH,GAAiCC,IAEvC,IAAIoC,GAAU,EACVC,EAAQ,EAEZ,IAAK,IAAIlxB,EAAI,EAAGxK,EAAW,MAAPg7B,EAAcW,IAAWX,EAAKxwB,EAAIxK,IAAKwK,EAAG,CAC5D,MAAMhN,EAAOy4B,EAAMC,WAAW1d,GAC9B,IAAIugB,EAEJ,GAAI,KAAAv7B,GAAuD,SAAtB69B,EAArC,CA+BA,GAREtC,EADEv7B,GAAQ,GACJA,EAAO,GAAb,GACSA,GAAQ,GACXA,EAAO,GAAb,GACSo+B,GAAkBp+B,GACrBA,EAAN,GAEMm+B,IAEJ5C,GAAOxoB,EAAO,CAGhB,GAAIwoB,GAAO,GAAKuC,EACd,MAAO,CAAEJ,EAAG,KAAM1iB,OACb,GACLugB,GAAO,GACP/B,EAAO6E,aAAarjB,EAAKue,EAAWD,EAASvmB,GAE7CwoB,EAAM,MACD,KAAIkC,EAIT,MAHAlC,EAAM,EACN0C,GAAU,CAGX,CACF,GACCjjB,EACFkjB,EAAQA,EAAQnrB,EAAQwoB,CA7BvB,KApBD,CACE,MAAM+C,EAAO7F,EAAMC,WAAW1d,EAAM,GAC9B+V,EAAO0H,EAAMC,WAAW1d,EAAM,GAEpC,GAAK6iB,GAGE,GACLU,OAAOC,MAAMzN,KACZiN,EAAiBjN,IAClBgN,EAAkBtN,IAAI6N,IACtBP,EAAkBtN,IAAIM,GACtB,CACA,GAAI+M,EAAa,MAAO,CAAEJ,EAAG,KAAM1iB,OACnCwe,EAAOiF,2BAA2BzjB,EAAKue,EAAWD,EACnD,MAXuB,CACtB,GAAIwE,EAAa,MAAO,CAAEJ,EAAG,KAAM1iB,OACnCwe,EAAOkF,iCAAiC1jB,EAAKue,EAAWD,E,GAYxDte,CAEH,CA8BF,CACD,OAAIA,IAAQ/O,GAAiB,MAAPuxB,GAAexiB,EAAM/O,IAAUuxB,GAAQS,EACpD,CAAEP,EAAG,KAAM1iB,OAGb,CAAE0iB,EAAGQ,EAAOljB,MACpB,CAMM,SAASiiB,GACdxE,EACAzd,EACAue,EACAD,EACAyD,EACAvD,GAEA,MAAMsC,EAAKrD,EAAMC,WAAW1d,GAC5B,IAAIhb,EAEJ,GAAW,MAAP87B,GAaF,KAZE9gB,IACChb,OAAMgb,OAAQgiB,GACfvE,EACAzd,EACAue,EACAD,EACAb,EAAMkG,QAAQ,IAAK3jB,GAAOA,GAC1B,EACA+hB,EACAvD,MAEAxe,EACW,OAAThb,GAAiBA,EAAO,QAAU,CACpC,IAAI+8B,EAGF,MAAO,CAAE/8B,KAAM,KAAMgb,OAFrBwe,EAAOoF,iBAAiB5jB,EAAKue,EAAWD,EAI3C,QAEEt5B,OAAMgb,OAAQgiB,GACfvE,EACAzd,EACAue,EACAD,EACA,GACA,EACAyD,EACAvD,IAGJ,MAAO,CAAEx5B,OAAMgb,MAChB,C,0BC7ZD,SAAS6jB,GAAc7jB,EAAaue,EAAmBD,GACrD,OAAO,IAAI3tB,EAAS2tB,EAASte,EAAMue,EAAWve,EAC/C,CAED,MAAM8jB,GAAoB,IAAInlB,IAAI,CAAC,IAAD,8BAgB3B,MAAMolB,GACXnzB,YAAYiX,GACVrmB,KAAKqG,KAAOggB,EAAMhgB,KAClBrG,KAAK4D,MAAQyiB,EAAMziB,MACnB5D,KAAKyP,MAAQ4W,EAAM5W,MACnBzP,KAAK0P,IAAM2W,EAAM3W,IACjB1P,KAAKoe,IAAM,IAAI5O,EAAe6W,EAAM7B,SAAU6B,EAAMU,OACrD,EAWY,MAAeyb,WAAkBtH,GAM9C9rB,YAAYwQ,EAAkBqc,GAC5Btc,QAD2C,KAL7C8iB,iBAK6C,OAF7C5iB,OAAmC,GAEU,KAo7C7C6iB,sBAA0C,CACxCb,aAAc,CAACrjB,EAAKue,EAAWD,EAASvmB,MACjCvW,KAAK4f,QAAQ+iB,gBAElB3iC,KAAKqlB,MAAMpG,EAAO3I,aAAc,CAC9BgP,GAAI+c,GAAc7jB,EAAKue,EAAWD,GAClCvmB,WAGK,GAET2rB,iCAAkCliC,KAAK4iC,aACrC3jB,EAAO/F,kCAET+oB,2BAA4BjiC,KAAK4iC,aAC/B3jB,EAAO/D,6BAn8CkC,KAu8C7C2nB,4BACKn/B,OAAAA,OAAAA,CAAAA,EAAAA,KAAKg/B,sBAx8CmC,CAy8C3CtB,sBAAuBphC,KAAK4iC,aAAa3jB,EAAOzI,uBAChD4rB,iBAAkBpiC,KAAK4iC,aAAa3jB,EAAO9I,oBA18CA,KA68C7C2sB,wCACKp/B,OAAAA,OAAAA,CAAAA,EAAAA,KAAKm/B,4BA98CmC,CA+8C3ClC,oBAAqB,CAACniB,EAAKue,EAAWD,KACpC98B,KAAK+iC,uBAAuB9jB,EAAOlC,oBAAqB,CACtDuI,GAAI+c,GAAc7jB,EAAKue,EAAWD,IADpC,EAIFkD,aAAc,CAACxhB,EAAKue,EAAWD,KAC7B,MAAM98B,KAAKqlB,MAAMpG,EAAO9C,mBAAoB,CAE1CmJ,GAAI+c,GAAc7jB,EAAM,EAAGue,EAAWD,IAFxC,IAr9CyC,KA49C7CkG,0CACKt/B,OAAAA,OAAAA,CAAAA,EAAAA,KAAKm/B,4BA79CmC,CA89C3ClC,oBAAqB3gC,KAAK4iC,aAAa3jB,EAAOlC,qBAC9CijB,aAAc,CAACxhB,EAAKue,EAAWD,KAC7B,MAAM98B,KAAKqlB,MAAMpG,EAAO7C,qBAAsB,CAC5CkJ,GAAI+c,GAAc7jB,EAAKue,EAAWD,IADpC,IA99CF98B,KAAKqmB,MAAQ,IAAIwW,GACjB78B,KAAKqmB,MAAMqY,KAAK9e,GAChB5f,KAAKi8B,MAAQA,EACbj8B,KAAKqF,OAAS42B,EAAM52B,OACpBrF,KAAKyiC,aAAc,CACpB,CAEDQ,UAAUzlB,GAGRxd,KAAK6f,OAAOxa,OAASrF,KAAKqmB,MAAMoY,aAChCz+B,KAAK6f,OAAOpa,KAAK+X,KACfxd,KAAKqmB,MAAMoY,YACd,CAIDlK,OACEv0B,KAAKkjC,sBACDljC,KAAK4f,QAAQC,QACf7f,KAAKijC,UAAU,IAAIV,GAAMviC,KAAKqmB,QAGhCrmB,KAAKqmB,MAAM8X,aAAen+B,KAAKqmB,MAAM5W,MACrCzP,KAAKqmB,MAAMa,cAAgBlnB,KAAKqmB,MAAMU,OACtC/mB,KAAKqmB,MAAM6X,gBAAkBl+B,KAAKqmB,MAAM7B,SACxCxkB,KAAKmjC,WACN,CAIDC,IAAI/8B,GACF,QAAIrG,KAAK4gC,MAAMv6B,KACbrG,KAAKu0B,QACE,EAIV,CASDqM,MAAMv6B,GACJ,OAAOrG,KAAKqmB,MAAMhgB,OAASA,CAC5B,CASDg9B,qBAAqBhd,GACnB,MAAO,CACL7H,IAAK6H,EAAM7H,IACX5a,MAAO,KACPyC,KAAMggB,EAAMhgB,KACZoJ,MAAO4W,EAAM5W,MACbC,IAAK2W,EAAM3W,IACXb,QAAS,CAAC7O,KAAKsjC,cACfjG,OAAQhX,EAAMgX,OACd7Y,SAAU6B,EAAM7B,SAChB0C,cAAeb,EAAMa,cACrB4V,QAASzW,EAAMyW,QACfC,UAAW1W,EAAM0W,UACjB8B,YAAaxY,EAAMwY,YAEtB,CAkBD0E,YACE,MAAMC,EAAMxjC,KAAKqmB,MAEjBrmB,KAAKqmB,MAAQrmB,KAAKqjC,qBAAqBG,GAEvCxjC,KAAKyiC,aAAc,EACnBziC,KAAKmjC,YACLnjC,KAAKyiC,aAAc,EAEnB,MAAMgB,EAAOzjC,KAAKqmB,MAElB,OADArmB,KAAKqmB,MAAQmd,EACNC,CACR,CAEDC,iBACE,OAAO1jC,KAAK2jC,oBAAoB3jC,KAAKqmB,MAAM7H,IAC5C,CAEDmlB,oBAAoBnlB,GAElB,OADAie,GAAemH,UAAYplB,EACpBie,GAAepJ,KAAKrzB,KAAKi8B,OAASQ,GAAemH,UAAYplB,CACrE,CAEDqlB,oBACE,OAAO7jC,KAAKi8B,MAAMC,WAAWl8B,KAAK0jC,iBACnC,CAEDI,eAAetlB,GAKb,IAAIulB,EAAK/jC,KAAKi8B,MAAMC,WAAW1d,GAC/B,GAAsB,SAAZ,MAALulB,MAA6BvlB,EAAMxe,KAAKi8B,MAAM52B,OAAQ,CACzD,MAAM2+B,EAAQhkC,KAAKi8B,MAAMC,WAAW1d,GACX,SAAZ,MAARwlB,KACHD,EAAK,QAAiB,KAALA,IAAe,KAAe,KAARC,GAE1C,CACD,OAAOD,CACR,CAKDE,UAAUxQ,GACRzzB,KAAKqmB,MAAMoN,OAASA,EAChBA,IAKFzzB,KAAKqmB,MAAMmY,aAAah5B,SAAQ,EAAE0+B,EAAc5e,KAC9CtlB,KAAKqlB,MAAM6e,EAAc,CAAE5e,SAE7BtlB,KAAKqmB,MAAMmY,aAAa2F,QAE3B,CAEDb,aACE,OAAOtjC,KAAKqmB,MAAMxX,QAAQ7O,KAAKqmB,MAAMxX,QAAQxJ,OAAS,EACvD,CAKD89B,YACEnjC,KAAKokC,YACLpkC,KAAKqmB,MAAM5W,MAAQzP,KAAKqmB,MAAM7H,IACzBxe,KAAKyiC,cAAaziC,KAAKqmB,MAAM7B,SAAWxkB,KAAKqmB,MAAMwY,eACpD7+B,KAAKqmB,MAAM7H,KAAOxe,KAAKqF,OACzBrF,KAAKqkC,YAAL,KAIFrkC,KAAKskC,iBAAiBtkC,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,KACtD,CAED+lB,mBACE,IAAI/f,EACCxkB,KAAKyiC,cAAaje,EAAWxkB,KAAKqmB,MAAMwY,eAC7C,MAAMpvB,EAAQzP,KAAKqmB,MAAM7H,IACnB9O,EAAM1P,KAAKi8B,MAAMkG,QAAQ,KAAM1yB,EAAQ,GAC7C,IAAa,IAATC,EAIF,MAAM1P,KAAKqlB,MAAMpG,EAAOhD,oBAAqB,CAC3CqJ,GAAItlB,KAAKqmB,MAAMwY,gBAInB7+B,KAAKqmB,MAAM7H,IAAM9O,EAAM,EACvB6sB,GAAWqH,UAAYn0B,EAAQ,EAC/B,MAAO8sB,GAAWlJ,KAAKrzB,KAAKi8B,QAAUM,GAAWqH,WAAal0B,IAC1D1P,KAAKqmB,MAAMyW,QACb98B,KAAKqmB,MAAM0W,UAAYR,GAAWqH,UAKpC,GAAI5jC,KAAKyiC,YAAa,OAGtB,MAAMrH,EAA0B,CAC9B/0B,KAAM,eACNzC,MAAO5D,KAAKi8B,MAAM+C,MAAMvvB,EAAQ,EAAGC,GACnCD,QACAC,IAAKA,EAAM,EACX0O,IAAK,IAAI5O,EAAegV,EAAUxkB,KAAKqmB,MAAMwY,gBAG/C,OADI7+B,KAAK4f,QAAQC,QAAQ7f,KAAKijC,UAAU7H,GACjCA,CACR,CAEDoJ,gBAAgBC,GACd,MAAMh1B,EAAQzP,KAAKqmB,MAAM7H,IACzB,IAAIgG,EACCxkB,KAAKyiC,cAAaje,EAAWxkB,KAAKqmB,MAAMwY,eAC7C,IAAIS,EAAKt/B,KAAKi8B,MAAMC,WAAYl8B,KAAKqmB,MAAM7H,KAAOimB,GAClD,GAAIzkC,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,OACxB,OAAQm3B,GAAU8C,MAASt/B,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,OAC/Ci6B,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAM1C,GAAIxe,KAAKyiC,YAAa,OAGtB,MAAM/yB,EAAM1P,KAAKqmB,MAAM7H,IACjB5a,EAAQ5D,KAAKi8B,MAAM+C,MAAMvvB,EAAQg1B,EAAW/0B,GAE5C0rB,EAAyB,CAC7B/0B,KAAM,cACNzC,QACA6L,QACAC,MACA0O,IAAK,IAAI5O,EAAegV,EAAUxkB,KAAKqmB,MAAMwY,gBAG/C,OADI7+B,KAAK4f,QAAQC,QAAQ7f,KAAKijC,UAAU7H,GACjCA,CACR,CAKDgJ,YACE,MAAMM,EAAa1kC,KAAKqmB,MAAM7H,IACxB+b,EAAW,GACjBoK,EAAM,MAAO3kC,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,OAAQ,CACzC,MAAMi6B,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAC5C,OAAQ8gB,GACN,KAAK,GACL,KAAK,IACL,KAAK,IACDt/B,KAAKqmB,MAAM7H,IACb,MACF,KAAK,GAED,KAAAxe,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,MAErCxe,KAAKqmB,MAAM7H,IAGjB,KAAK,GACL,KAAK,KACL,KAAK,OACDxe,KAAKqmB,MAAM7H,MACXxe,KAAKqmB,MAAMyW,QACb98B,KAAKqmB,MAAM0W,UAAY/8B,KAAKqmB,MAAM7H,IAClC,MAEF,KAAK,GACH,OAAQxe,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,IAC7C,KAAK,GAAoB,CACvB,MAAM4c,EAAUp7B,KAAKukC,wBACLr2B,IAAZktB,IACFp7B,KAAKm7B,WAAWC,GACZp7B,KAAK4f,QAAQglB,eAAerK,EAAS90B,KAAK21B,IAEhD,KACD,CAED,KAAK,GAAiB,CACpB,MAAMA,EAAUp7B,KAAKwkC,gBAAgB,QACrBt2B,IAAZktB,IACFp7B,KAAKm7B,WAAWC,GACZp7B,KAAK4f,QAAQglB,eAAerK,EAAS90B,KAAK21B,IAEhD,KACD,CAED,QACE,MAAMuJ,EAEV,MAEF,QACE,GAAI/H,GAAa0C,KACbt/B,KAAKqmB,MAAM7H,SACR,GAAW,KAAP8gB,GAA0Bt/B,KAAK+zB,SAgBnC,IAAW,KAAPuL,GAA8Bt/B,KAAK+zB,SAiB5C,MAAM4Q,EAjBgD,CACtD,MAAMnmB,EAAMxe,KAAKqmB,MAAM7H,IACvB,GAEE,KADAxe,KAAKi8B,MAAMC,WAAW1d,EAAM,IAC5B,KAAAxe,KAAKi8B,MAAMC,WAAW1d,EAAM,IAC5B,KAAAxe,KAAKi8B,MAAMC,WAAW1d,EAAM,GAS5B,MAAMmmB,EARN,CAEA,MAAMvJ,EAAUp7B,KAAKwkC,gBAAgB,QACrBt2B,IAAZktB,IACFp7B,KAAKm7B,WAAWC,GACZp7B,KAAK4f,QAAQglB,eAAerK,EAAS90B,KAAK21B,GAEjD,CAGF,CAEA,KAlCmD,CAClD,MAAM5c,EAAMxe,KAAKqmB,MAAM7H,IACvB,GAEE,KADAxe,KAAKi8B,MAAMC,WAAW1d,EAAM,IAA5B,KACAxe,KAAKi8B,MAAMC,WAAW1d,EAAM,MACZ,IAAfkmB,GAAoB1kC,KAAKqmB,MAAM0W,UAAY2H,GAS5C,MAAMC,EARN,CAEA,MAAMvJ,EAAUp7B,KAAKwkC,gBAAgB,QACrBt2B,IAAZktB,IACFp7B,KAAKm7B,WAAWC,GACZp7B,KAAK4f,QAAQglB,eAAerK,EAAS90B,KAAK21B,GAEjD,C,EAuBR,CAED,GAAIb,EAASl1B,OAAS,EAAG,CACvB,MAAMqK,EAAM1P,KAAKqmB,MAAM7H,IACjBqmB,EAAuC,CAC3Cp1B,MAAOi1B,EACPh1B,MACA6qB,WACAkB,YAAa,KACbG,aAAc,KACdC,eAAgB,MAElB77B,KAAKqmB,MAAMiV,aAAa71B,KAAKo/B,EAC9B,CACF,CAODR,YAAYh+B,EAAiB04B,GAC3B/+B,KAAKqmB,MAAM3W,IAAM1P,KAAKqmB,MAAM7H,IAC5Bxe,KAAKqmB,MAAMU,OAAS/mB,KAAKqmB,MAAMwY,cAC/B,MAAMiG,EAAW9kC,KAAKqmB,MAAMhgB,KAC5BrG,KAAKqmB,MAAMhgB,KAAOA,EAClBrG,KAAKqmB,MAAMziB,MAAQm7B,EAEd/+B,KAAKyiC,aACRziC,KAAKmoB,cAAc2c,EAEtB,CAEDC,aAAa1+B,GACXrG,KAAKqmB,MAAMhgB,KAAOA,EAGlBrG,KAAKmoB,eACN,CAYD6c,uBACE,GAAuB,IAAnBhlC,KAAKqmB,MAAM7H,KAAaxe,KAAKilC,wBAC/B,OAGF,MAAMC,EAAUllC,KAAKqmB,MAAM7H,IAAM,EAC3B+V,EAAOv0B,KAAK8jC,eAAeoB,GACjC,GAAI3Q,GAAQ,IAAoBA,GAAQ,GACtC,MAAMv0B,KAAKqlB,MAAMpG,EAAOtE,yBAA0B,CAChD2K,GAAItlB,KAAKqmB,MAAMwY,gBAInB,GACE,MAAAtK,GACU,KAATA,GAAwCv0B,KAAK4lB,UAAU,kBACxD,CAMA,GADA5lB,KAAKmlC,aAAa,kBAC2C,QAAzDnlC,KAAKgjB,gBAAgB,iBAAkB,cACzC,MAAMhjB,KAAKqlB,MACT,MAAAkP,EACItV,EAAOnF,6CACPmF,EAAOzE,4CACX,CAAE8K,GAAItlB,KAAKqmB,MAAMwY,gBAIrB7+B,KAAKqmB,MAAM7H,KAAO,EACL,MAAT+V,EAEFv0B,KAAKqkC,YAAL,GAGArkC,KAAKqkC,YAAL,EAEH,MAAUjR,GAAkBmB,MACzBv0B,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAA4B,IAAArkC,KAAKolC,UAAU7Q,KAC9B,KAATA,KACPv0B,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAAL,IAAiCrkC,KAAKolC,cAEtCplC,KAAKqlC,SAAL,GAAuB,EAE1B,CAEDC,gBACE,MAAM/Q,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAChD+V,GAAQ,IAAoBA,GAAQ,GACtCv0B,KAAKulC,YAAW,GAKP,KAAThR,GACA,KAAAv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,IAEvCxe,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKqkC,YAAL,QAEErkC,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAAL,IAEH,CAEDmB,kBACE,MAAMjR,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACvC,KAAT+V,EACFv0B,KAAKqlC,SAAL,GAA8B,GAE9BrlC,KAAKqlC,SAAL,GAAwB,EAE3B,CAEDJ,wBACE,GAAuB,IAAnBjlC,KAAKqmB,MAAM7H,KAAaxe,KAAKqF,OAAS,EAAG,OAAO,EAEpD,IAAIi6B,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAChD,GAAW,KAAP8gB,EAAkC,OAAO,EAE7C,MAAM7vB,EAAQzP,KAAKqmB,MAAM7H,IACzBxe,KAAKqmB,MAAM7H,KAAO,EAElB,OAAQge,GAAU8C,MAASt/B,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,OAC/Ci6B,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAGxC,MAAM5a,EAAQ5D,KAAKi8B,MAAM+C,MAAMvvB,EAAQ,EAAGzP,KAAKqmB,MAAM7H,KAIrD,OAFAxe,KAAKqkC,YAAL,GAA0CzgC,IAEnC,CACR,CAED6hC,sBAAsBjiC,GAEpB,IAAI6C,EAAgB,KAAT7C,EAAX,MACIkiC,EAAQ,EACRnR,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAGrC,KAAThb,GAAwC,KAAT+wB,IACjCmR,IACAnR,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAC9CnY,EAAA,IAIW,KAATkuB,GAAgCv0B,KAAKqmB,MAAMgX,SAC7CqI,IAIAr/B,EAAgB,KAAT7C,EAAP,OAGFxD,KAAKqlC,SAASh/B,EAAMq/B,EACrB,CAEDC,mBAAmBniC,GAEjB,MAAM+wB,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAEpD,GAAI+V,IAAS/wB,EAAb,CAYA,GAAa,MAATA,EAAgC,CAElC,GAAa,KAAT+wB,EAEF,YADAv0B,KAAKqlC,SAAL,GAA2B,GAI7B,GACErlC,KAAK4lB,UAAU,mBACN,MAAT2O,EACA,CACA,GAA6D,QAAzDv0B,KAAKgjB,gBAAgB,iBAAkB,cACzC,MAAMhjB,KAAKqlB,MAAMpG,EAAOrF,0CAA2C,CACjE0L,GAAItlB,KAAKqmB,MAAMwY,gBAKnB,OAFA7+B,KAAKqmB,MAAM7H,KAAO,OAClBxe,KAAKqkC,YAAL,EAED,CAGD,GACErkC,KAAK4lB,UAAU,mBACN,KAAT2O,EACA,CACA,GAA6D,QAAzDv0B,KAAKgjB,gBAAgB,iBAAkB,cACzC,MAAMhjB,KAAKqlB,MAAMpG,EAAO3E,yCAA0C,CAChEgL,GAAItlB,KAAKqmB,MAAMwY,gBAKnB,OAFA7+B,KAAKqmB,MAAM7H,KAAO,OAClBxe,KAAKqkC,YAAL,EAED,CACF,CAEY,KAAT9P,EAKJv0B,KAAKqlC,SACH,MAAA7hC,EAAA,MACA,GANAxD,KAAKqlC,SAAL,GAAyB,EAxC1B,MATK,KAAArlC,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACzCxe,KAAKqlC,SAAL,GAAyB,GAEzBrlC,KAAKqlC,SACH,MAAA7hC,EAAA,MACA,EAoDP,CAEDoiC,kBACE,MAAMrR,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAGpD,GAAa,KAAT+V,GAAgCv0B,KAAKqmB,MAAMgX,OAO1C,GACH,KAAA9I,GAGAv0B,KAAK4lB,UAAU,CACb,mBACA,CAAEigB,SAAU,OAAQC,WAAY,QAElC,CACA9lC,KAAKqlC,SAAL,GAA8B,GAG9B,MAAMU,EAAc/lC,KAAKi8B,MAAM+J,YAAYhmC,KAAKqmB,MAAM7H,KACtD,GAAoB,KAAhBunB,EACF,MAAM/lC,KAAKmX,YAEd,MAGCnX,KAAKqlC,SAAL,GAA6B,QAtB7BrlC,KAAKqlC,SAAL,GAA4B,EAwB/B,CAEDY,mBACE,MAAM1R,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAIzC,KAAT+V,GACAv0B,KAAK4lB,UAAU,CACb,mBACA,CAAEigB,SAAU,OAAQC,WAAY,QAGlC9lC,KAAKqlC,SAAL,GAA2B,GAI3BrlC,KAAKqlC,SAAL,GAAqB,EAExB,CAEDa,mBAAmB1iC,GAEjB,MAAM+wB,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAEhD+V,IAAS/wB,EAKA,KAAT+wB,EACFv0B,KAAKqlC,SAAL,GAAyB,GAEzBrlC,KAAKqlC,SAAL,GAA0B,GAP1BrlC,KAAKqlC,SAAL,GAAyB,EAS5B,CAEDc,eAEE,MAAM,IAAE3nB,GAAQxe,KAAKqmB,MACfkO,EAAOv0B,KAAKi8B,MAAMC,WAAW1d,EAAM,GAEzC,GAAa,KAAT+V,EACF,OAAI,KAAAv0B,KAAKi8B,MAAMC,WAAW1d,EAAM,QAC9Bxe,KAAKqlC,SAAL,GAAyB,QAG3BrlC,KAAKqlC,SAAL,GAA4B,GAIjB,KAAT9Q,EAMJv0B,KAAKqlC,SAAL,GAAqB,GAJnBrlC,KAAKqlC,SAAL,GAA6B,EAKhC,CAEDe,eAEE,MAAM,IAAE5nB,GAAQxe,KAAKqmB,MACfkO,EAAOv0B,KAAKi8B,MAAMC,WAAW1d,EAAM,GAEzC,GAAa,KAAT+V,EAAgC,CAClC,MAAM8R,EACuD,KAA3DrmC,KAAKi8B,MAAMC,WAAW1d,EAAM,GAA+B,EAAI,EACjE,OAAI,KAAAxe,KAAKi8B,MAAMC,WAAW1d,EAAM6nB,QAC9BrmC,KAAKqlC,SAAL,GAAyBgB,EAAO,QAGlCrmC,KAAKqlC,SAAL,GAA4BgB,EAE7B,CAEY,KAAT9R,EAMJv0B,KAAKqlC,SAAL,GAAqB,GAJnBrlC,KAAKqlC,SAAL,GAA6B,EAKhC,CAEDiB,kBAAkB9iC,GAEhB,MAAM+wB,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACpD,GAAa,KAAT+V,EASJ,OAAa,KAAT/wB,GAAwC,KAAT+wB,GAEjCv0B,KAAKqmB,MAAM7H,KAAO,OAClBxe,KAAKqkC,YAAL,UAGFrkC,KAAKqlC,SAAS,KAAA7hC,EAAA,MAA+C,GAd3DxD,KAAKqlC,SAEH,GACI,KADJrlC,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACnC,EACA,EAWT,CAED+nB,qBAEE,MAAMhS,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAC9CgW,EAAQx0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACxC,KAAT+V,EACY,KAAVC,EAEFx0B,KAAKqlC,SAAL,GAAyB,GAGzBrlC,KAAKqlC,SAAL,GAAoC,GAG7B,KAAT9Q,GACEC,GAAS,IAAoBA,GAA/B,MAMEx0B,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAAL,MAJArkC,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKqkC,YAAL,IAKH,CAEDC,iBAAiB9gC,GACf,OAAQA,GAIN,KAAK,GAEH,YADAxD,KAAKslC,gBAIP,KAAK,GAGH,QAFEtlC,KAAKqmB,MAAM7H,SACbxe,KAAKqkC,YAAL,IAEF,KAAK,GAGH,QAFErkC,KAAKqmB,MAAM7H,SACbxe,KAAKqkC,YAAL,IAEF,KAAK,GAGH,QAFErkC,KAAKqmB,MAAM7H,SACbxe,KAAKqkC,YAAL,IAEF,KAAK,GAGH,QAFErkC,KAAKqmB,MAAM7H,SACbxe,KAAKqkC,YAAL,IAEF,KAAK,GACH,GACErkC,KAAK4lB,UAAU,mBACf,MAAA5lB,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACvC,CACA,GAA6D,QAAzDxe,KAAKgjB,gBAAgB,iBAAkB,cACzC,MAAMhjB,KAAKqlB,MACTpG,EAAO1E,2CACP,CAAE+K,GAAItlB,KAAKqmB,MAAMwY,gBAKrB7+B,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKqkC,YAAL,EACD,OACGrkC,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAAL,GAEF,OACF,KAAK,GAGH,QAFErkC,KAAKqmB,MAAM7H,SACbxe,KAAKqkC,YAAL,GAEF,KAAK,IACH,GACErkC,KAAK4lB,UAAU,mBACf,MAAA5lB,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACvC,CACA,GAA6D,QAAzDxe,KAAKgjB,gBAAgB,iBAAkB,cACzC,MAAMhjB,KAAKqlB,MACTpG,EAAOpF,4CACP,CAAEyL,GAAItlB,KAAKqmB,MAAMwY,gBAKrB7+B,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKqkC,YAAL,EACD,OACGrkC,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAAL,GAEF,OACF,KAAK,IAGH,QAFErkC,KAAKqmB,MAAM7H,SACbxe,KAAKqkC,YAAL,GAGF,KAAK,GAUH,YARErkC,KAAK4lB,UAAU,iBACf,KAAA5lB,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAEvCxe,KAAKqlC,SAAL,GAA8B,MAE5BrlC,KAAKqmB,MAAM7H,IACbxe,KAAKqkC,YAAL,MAIJ,KAAK,GAEH,YADArkC,KAAKumC,qBAGP,KAAK,GAEH,YADAvmC,KAAKwmC,oBAGP,KAAK,GAAkB,CACrB,MAAMjS,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAEpD,GAAa,MAAT+V,GAA0C,KAATA,EAEnC,YADAv0B,KAAKymC,gBAAgB,IAIvB,GAAa,MAATlS,GAA0C,KAATA,EAEnC,YADAv0B,KAAKymC,gBAAgB,GAIvB,GAAa,KAATlS,GAA0C,KAATA,EAEnC,YADAv0B,KAAKymC,gBAAgB,EAGxB,CAGD,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GACL,KAAK,GAEH,YADAzmC,KAAKulC,YAAW,GAIlB,KAAK,GACL,KAAK,GAEH,YADAvlC,KAAK0mC,WAAWljC,GAQlB,KAAK,GAEH,YADAxD,KAAKwlC,kBAGP,KAAK,GACL,KAAK,GAEH,YADAxlC,KAAKylC,sBAAsBjiC,GAG7B,KAAK,IACL,KAAK,GAEH,YADAxD,KAAK2lC,mBAAmBniC,GAG1B,KAAK,GAEH,YADAxD,KAAK4lC,kBAGP,KAAK,GACL,KAAK,GAEH,YADA5lC,KAAKkmC,mBAAmB1iC,GAG1B,KAAK,GAEH,YADAxD,KAAKmmC,eAGP,KAAK,GAEH,YADAnmC,KAAKomC,eAGP,KAAK,GACL,KAAK,GAEH,YADApmC,KAAKsmC,kBAAkB9iC,GAGzB,KAAK,IAEH,YADAxD,KAAKqlC,SAAL,GAAwB,GAG1B,KAAK,GAEH,YADArlC,KAAKimC,mBAGP,KAAK,GAEH,YADAjmC,KAAKglC,uBAGP,KAAK,GAEH,YADAhlC,KAAK2mC,WAGP,QACE,GAAIvT,GAAkB5vB,GAEpB,YADAxD,KAAK2mC,SAASnjC,GAKpB,MAAMxD,KAAKqlB,MAAMpG,EAAO/H,yBAA0B,CAChDoO,GAAItlB,KAAKqmB,MAAMwY,cACf1nB,WAAYvE,OAAO8tB,cAAcl9B,IAEpC,CAED6hC,SAASh/B,EAAiBggC,GACxB,MAAMjG,EAAMpgC,KAAKi8B,MAAM+C,MAAMh/B,KAAKqmB,MAAM7H,IAAKxe,KAAKqmB,MAAM7H,IAAM6nB,GAC9DrmC,KAAKqmB,MAAM7H,KAAO6nB,EAClBrmC,KAAKqkC,YAAYh+B,EAAM+5B,EACxB,CAEDwG,aACE,MAAMpiB,EAAWxkB,KAAKqmB,MAAM7B,SACtB/U,EAAQzP,KAAKqmB,MAAM5W,MAAQ,EACjC,IAAIo3B,EAASxO,GACT,IAAE7Z,GAAQxe,KAAKqmB,MACnB,QAAW7H,EAAK,CACd,GAAIA,GAAOxe,KAAKqF,OAEd,MAAMrF,KAAKqlB,MAAMpG,EAAO/C,mBAAoB,CAC1CoJ,GAAIzV,EAA+B2U,EAAU,KAGjD,MAAM8a,EAAKt/B,KAAKi8B,MAAMC,WAAW1d,GACjC,GAAIge,GAAU8C,GACZ,MAAMt/B,KAAKqlB,MAAMpG,EAAO/C,mBAAoB,CAC1CoJ,GAAIzV,EAA+B2U,EAAU,KAGjD,GAAIqiB,EACFA,GAAU,MACL,CACL,GAAW,KAAPvH,EACFjH,GAAU,OACL,GAAI,KAAAiH,GAAuCjH,EAChDA,GAAU,OACL,GAAW,KAAPiH,IAA2BjH,EACpC,MAEFwO,EAAA,KAAUvH,CACX,CACF,CACD,MAAMwH,EAAU9mC,KAAKi8B,MAAM+C,MAAMvvB,EAAO+O,KACtCA,EAEF,IAAIuoB,EAAO,GAEX,MAAM7B,EAAU,IAEdr1B,EAA+B2U,EAAUhG,EAAM,EAAI/O,GAErD,MAAO+O,EAAMxe,KAAKqF,OAAQ,CACxB,MAAM0+B,EAAK/jC,KAAK8jC,eAAetlB,GAEzBwoB,EAAOp0B,OAAO0gB,aAAayQ,GAGjC,GAAIzB,GAAkBrO,IAAI8P,GACb,MAAPA,GACF/jC,KAAKmlC,aAAa,oBAAqBD,KAEnC6B,EAAKE,SAAS,MAChBjnC,KAAKqlB,MAAMpG,EAAOhJ,0BAA2B,CAAEqP,GAAI4f,OAErC,MAAPnB,GACLgD,EAAKE,SAAS,MAChBjnC,KAAKqlB,MAAMpG,EAAOhJ,0BAA2B,CAAEqP,GAAI4f,MAGnD6B,EAAKE,SAASD,IAChBhnC,KAAKqlB,MAAMpG,EAAOrK,qBAAsB,CAAE0Q,GAAI4f,UAE3C,KAAI3R,GAAiBwQ,IAAc,KAAPA,EAGjC,MAFA/jC,KAAKqlB,MAAMpG,EAAOpH,qBAAsB,CAAEyN,GAAI4f,KAG/C,GAEC1mB,EACFuoB,GAAQC,CACT,CACDhnC,KAAKqmB,MAAM7H,IAAMA,EAEjBxe,KAAKqkC,YAAuB,KAC1BtkB,QAAS+mB,EACT9mB,MAAO+mB,GAEV,CAWD5F,QACE5qB,EACAyqB,EACAC,GAAoB,EACpBI,GAAsC,GAEtC,MAAM,EAAEH,EAAF,IAAK1iB,GAAQ2iB,GACjBnhC,KAAKi8B,MACLj8B,KAAKqmB,MAAM7H,IACXxe,KAAKqmB,MAAM0W,UACX/8B,KAAKqmB,MAAMyW,QACXvmB,EACAyqB,EACAC,EACAI,EACArhC,KAAK0iC,uBACa,GAGpB,OADA1iC,KAAKqmB,MAAM7H,IAAMA,EACV0iB,CACR,CAEDuF,gBAAgBlwB,GACd,MAAMiO,EAAWxkB,KAAKqmB,MAAMwY,cAC5B,IAAIqI,GAAW,EAEflnC,KAAKqmB,MAAM7H,KAAO,EAClB,MAAMugB,EAAM/+B,KAAKmhC,QAAQ5qB,GACd,MAAPwoB,GACF/+B,KAAKqlB,MAAMpG,EAAO3I,aAAc,CAE9BgP,GAAIzV,EAA+B2U,EAAU,GAC7CjO,UAGJ,MAAMge,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAE9C,GAAa,MAAT+V,IACAv0B,KAAKqmB,MAAM7H,IACb0oB,GAAW,OACN,GAAa,MAAT3S,EACT,MAAMv0B,KAAKqlB,MAAMpG,EAAO5I,eAAgB,CAAEiP,GAAId,IAGhD,GAAI4O,GAAkBpzB,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,MACnD,MAAMxe,KAAKqlB,MAAMpG,EAAOhG,iBAAkB,CACxCqM,GAAItlB,KAAKqmB,MAAMwY,gBAInB,GAAIqI,EAAJ,CACE,MAAM9G,EAAMpgC,KAAKi8B,MACd+C,MAAMxa,EAASpjB,MAAOpB,KAAKqmB,MAAM7H,KACjC1X,QAAQ,QAAS,IACpB9G,KAAKqkC,YAAL,IAA4BjE,EAE7B,MAEDpgC,KAAKqkC,YAAL,IAAyBtF,EAC1B,CAIDwG,WAAW4B,GACT,MAAM13B,EAAQzP,KAAKqmB,MAAM7H,IACnBgG,EAAWxkB,KAAKqmB,MAAMwY,cAC5B,IAAIuI,GAAU,EACVF,GAAW,EACXG,GAAY,EACZC,GAAc,EACdC,GAAU,EAETJ,GAAsC,OAArBnnC,KAAKmhC,QAAQ,KACjCnhC,KAAKqlB,MAAMpG,EAAOjI,cAAe,CAAEsO,GAAItlB,KAAKqmB,MAAMwY,gBAEpD,MAAM2I,EACJxnC,KAAKqmB,MAAM7H,IAAM/O,GAAS,GAD5B,KAEEzP,KAAKi8B,MAAMC,WAAWzsB,GAExB,GAAI+3B,EAAgB,CAClB,MAAMC,EAAUznC,KAAKi8B,MAAM+C,MAAMvvB,EAAOzP,KAAKqmB,MAAM7H,KAEnD,GADAxe,KAAK+iC,uBAAuB9jB,EAAOjC,mBAAoB,CAAEsI,GAAId,KACxDxkB,KAAKqmB,MAAMoN,OAAQ,CAEtB,MAAMiU,EAAgBD,EAAQtF,QAAQ,KAClCuF,EAAgB,GAElB1nC,KAAKqlB,MAAMpG,EAAOzC,0BAA2B,CAC3C8I,GAAIzV,EAA+B2U,EAAUkjB,IAGlD,CACDH,EAAUC,IAAmB,OAAOnU,KAAKoU,EAC1C,CAED,IAAIlT,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KA2C5C,GA1Ca,KAAT+V,GAA2BgT,MAC3BvnC,KAAKqmB,MAAM7H,IACbxe,KAAKmhC,QAAQ,IACbiG,GAAU,EACV7S,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,MAIvC,KAAA+V,GAAD,MAAkCA,GACjCgT,IAEDhT,EAAOv0B,KAAKi8B,MAAMC,aAAal8B,KAAKqmB,MAAM7H,KAC7B,KAAT+V,GAAwC,KAATA,KAC/Bv0B,KAAKqmB,MAAM7H,IAEU,OAArBxe,KAAKmhC,QAAQ,KACfnhC,KAAKqlB,MAAMpG,EAAOhI,yBAA0B,CAAEqO,GAAId,IAEpD4iB,GAAU,EACVE,GAAc,EACd/S,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,MAG7B,MAAT+V,KAGE6S,GAAWI,IACbxnC,KAAKqlB,MAAMpG,EAAO/I,qBAAsB,CAAEoP,GAAId,MAE9CxkB,KAAKqmB,MAAM7H,IACb0oB,GAAW,GAGA,MAAT3S,IACFv0B,KAAKmlC,aAAa,UAAWnlC,KAAKqmB,MAAMwY,gBACpCyI,GAAeE,IACjBxnC,KAAKqlB,MAAMpG,EAAO5I,eAAgB,CAAEiP,GAAId,MAExCxkB,KAAKqmB,MAAM7H,IACb6oB,GAAY,GAGVjU,GAAkBpzB,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,MACnD,MAAMxe,KAAKqlB,MAAMpG,EAAOhG,iBAAkB,CACxCqM,GAAItlB,KAAKqmB,MAAMwY,gBAKnB,MAAMuB,EAAMpgC,KAAKi8B,MAAM+C,MAAMvvB,EAAOzP,KAAKqmB,MAAM7H,KAAK1X,QAAQ,SAAU,IAEtE,GAAIogC,EAEF,YADAlnC,KAAKqkC,YAAL,IAA4BjE,GAI9B,GAAIiH,EAEF,YADArnC,KAAKqkC,YAAL,IAA6BjE,GAI/B,MAAMrB,EAAMwI,EAAUxG,SAASX,EAAK,GAAKuH,WAAWvH,GACpDpgC,KAAKqkC,YAAL,IAAyBtF,EAC1B,CAID0B,cAAcF,GACZ,MAAM,KAAE/8B,EAAF,IAAQgb,GAAQiiB,GACpBzgC,KAAKi8B,MACLj8B,KAAKqmB,MAAM7H,IACXxe,KAAKqmB,MAAM0W,UACX/8B,KAAKqmB,MAAMyW,QACXyD,EACAvgC,KAAK6iC,6BAGP,OADA7iC,KAAKqmB,MAAM7H,IAAMA,EACVhb,CACR,CAEDkjC,WAAWkB,GACT,MAAM,IAAExH,EAAF,IAAO5hB,EAAP,QAAYse,EAAZ,UAAqBC,GAAc0C,GAC7B,KAAVmI,EAAoC,SAAW,SAC/C5nC,KAAKi8B,MACLj8B,KAAKqmB,MAAM7H,IAAM,EACjBxe,KAAKqmB,MAAM0W,UACX/8B,KAAKqmB,MAAMyW,QACX98B,KAAK8iC,yCAEP9iC,KAAKqmB,MAAM7H,IAAMA,EAAM,EACvBxe,KAAKqmB,MAAM0W,UAAYA,EACvB/8B,KAAKqmB,MAAMyW,QAAUA,EACrB98B,KAAKqkC,YAAL,IAA4BjE,EAC7B,CAGDyH,2BACO7nC,KAAK4gC,MAAL,IACH5gC,KAAKmX,WAAW,KAAhB,GAGFnX,KAAKqmB,MAAM7H,MACXxe,KAAKwmC,mBACN,CAGDA,oBACE,MAAMsB,EAAU9nC,KAAKi8B,MAAMj8B,KAAKqmB,MAAM7H,MAChC,IAAE4hB,EAAF,gBAAON,EAAP,IAAwBthB,EAAxB,QAA6Bse,EAA7B,UAAsCC,GAC1C0C,GACE,WACAz/B,KAAKi8B,MACLj8B,KAAKqmB,MAAM7H,IAAM,EACjBxe,KAAKqmB,MAAM0W,UACX/8B,KAAKqmB,MAAMyW,QACX98B,KAAKgjC,2CAEThjC,KAAKqmB,MAAM7H,IAAMA,EAAM,EACvBxe,KAAKqmB,MAAM0W,UAAYA,EACvB/8B,KAAKqmB,MAAMyW,QAAUA,EAEjBgD,IACF9/B,KAAKqmB,MAAMkY,8BAAgC,IAAIpvB,EAC7C2wB,EAAgBhD,QAChBgD,EAAgBthB,IAAMshB,EAAgB/C,UACtC+C,EAAgBthB,MAIhB,KAAAxe,KAAKi8B,MAAM+J,YAAYxnB,GACzBxe,KAAKqkC,YAEHvE,GAAAA,EAAkB,KAAOgI,EAAU1H,EAAM,MAG3CpgC,KAAKqmB,MAAM7H,MACXxe,KAAKqkC,YAEHvE,GAAAA,EAAkB,KAAOgI,EAAU1H,EAAM,MAG9C,CAED2C,uBACEmB,GACA,GAAE5e,IAEF,MAAMlkB,EAAQkkB,EAAGlkB,MAEbpB,KAAKqmB,MAAMoN,SAAWzzB,KAAKqmB,MAAMmY,aAAavK,IAAI7yB,GACpDpB,KAAKqlB,MAAM6e,EAAc,CAAE5e,OAE3BtlB,KAAKqmB,MAAMmY,aAAa5yB,IAAIxK,EAAO,CAAC8iC,EAAc5e,GAErD,CAWD8f,UAAU2C,GACR/nC,KAAKqmB,MAAMiY,aAAc,EACzB,IAAIxK,EAAO,GACX,MAAMrkB,EAAQzP,KAAKqmB,MAAM7H,IACzB,IAAIuhB,EAAa//B,KAAKqmB,MAAM7H,SACVtQ,IAAd65B,IACF/nC,KAAKqmB,MAAM7H,KAAOupB,GAAa,MAAS,EAAI,GAG9C,MAAO/nC,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,OAAQ,CACnC,MAAMi6B,EAAKt/B,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,KAC1C,GAAI+U,GAAiB+L,GACnBt/B,KAAKqmB,MAAM7H,KAAO8gB,GAAM,MAAS,EAAI,MAChC,IAAW,KAAPA,EA2BT,MA3BqC,CACrCt/B,KAAKqmB,MAAMiY,aAAc,EAEzBxK,GAAQ9zB,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,KAChD,MAAMwpB,EAAWhoC,KAAKqmB,MAAMwY,cACtBoJ,EACJjoC,KAAKqmB,MAAM7H,MAAQ/O,EAAQ2jB,GAAoBG,GAEjD,GAAI,MAAAvzB,KAAKi8B,MAAMC,aAAal8B,KAAKqmB,MAAM7H,KAA+B,CACpExe,KAAKqlB,MAAMpG,EAAO5G,qBAAsB,CACtCiN,GAAItlB,KAAKqmB,MAAMwY,gBAEjBkB,EAAa//B,KAAKqmB,MAAM7H,IAAM,EAC9B,QACD,GAECxe,KAAKqmB,MAAM7H,IACb,MAAM0pB,EAAMloC,KAAKygC,eAAc,GACnB,OAARyH,IACGD,EAAgBC,IACnBloC,KAAKqlB,MAAMpG,EAAOnK,2BAA4B,CAAEwQ,GAAI0iB,IAGtDlU,GAAQlhB,OAAO8tB,cAAcwH,IAE/BnI,EAAa//B,KAAKqmB,MAAM7H,GACzB,CAEA,CACF,CACD,OAAOsV,EAAO9zB,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,IACvD,CAKDmoB,SAASoB,GACP,MAAMjU,EAAO9zB,KAAKolC,UAAU2C,GACtB1hC,EAAO8hC,EAAaz8B,IAAIooB,QACjB5lB,IAAT7H,EAGFrG,KAAKqkC,YAAYh+B,EAAMksB,GAAelsB,IAEtCrG,KAAKqkC,YAAL,IAA0BvQ,EAE7B,CAEDoP,sBACE,MAAM,KAAE78B,GAASrG,KAAKqmB,MAClB4L,GAAe5rB,IAASrG,KAAKqmB,MAAMiY,aACrCt+B,KAAKqlB,MAAMpG,EAAOvI,2BAA4B,CAC5C4O,GAAItlB,KAAKqmB,MAAM7B,SACf7N,aAAc4b,GAAelsB,IAGlC,CAgBDgf,MACE6e,EACAkE,GAEA,MAAM,GAAE9iB,GAAmB8iB,EAAZ/pB,EAAf,EAA2B+pB,EAA3B,IACMhqB,EAAMkH,aAAcnW,EAAWmW,EAAKA,EAAGlH,IAAI3O,MAE3CtC,EAAQ+2B,EAAa,CAAE9lB,MAAKC,YAElC,IAAKre,KAAK4f,QAAQ+iB,cAAe,MAAMx1B,EAGvC,OAFKnN,KAAKyiC,aAAaziC,KAAKqmB,MAAM2W,OAAOv3B,KAAK0H,GAEvCA,CACR,CAaDk7B,eACEnE,EACAkE,GAEA,MAAM,GAAE9iB,GAAmB8iB,EAAZ/pB,EAAf,EAA2B+pB,EAA3B,IACMhqB,EAAMkH,aAAcnW,EAAWmW,EAAKA,EAAGlH,IAAI3O,MAC3C+O,EAAMJ,EAAIhd,MACV47B,EAASh9B,KAAKqmB,MAAM2W,OAE1B,IAAK,IAAIxsB,EAAIwsB,EAAO33B,OAAS,EAAGmL,GAAK,EAAGA,IAAK,CAC3C,MAAMrD,EAAQ6vB,EAAOxsB,GACrB,GAAIrD,EAAMiR,IAAIhd,QAAUod,EAEtB,OAAQwe,EAAOxsB,GAAK0zB,EAAa,CAAE9lB,MAAKC,YAE1C,GAAIlR,EAAMiR,IAAIhd,MAAQod,EAAK,KAC5B,CAED,OAAOxe,KAAKqlB,MAAM6e,EAAckE,EACjC,CAIDjgB,cAAc2c,GAA4B,CAG1C3tB,WAAWiH,EAAuB/X,GAChC,MAAMrG,KAAKqlB,MAAMpG,EAAO3D,gBAAiB,CACvChO,SAAUjH,EAAOksB,GAAelsB,GAAQ,KACxCif,GAAW,MAAPlH,EAAcA,EAAMpe,KAAKqmB,MAAM7B,UAEtC,CAED2gB,aAAalL,EAAoB7b,GAC/B,GAAIpe,KAAK4lB,UAAUqU,GACjB,OAAO,EAGT,MAAMj6B,KAAKqlB,MAAMpG,EAAOhH,cAAe,CACrCqN,GAAW,MAAPlH,EAAcA,EAAMpe,KAAKqmB,MAAM7B,SACnCtM,cAAe,CAAC+hB,IAEnB,CAEDqO,gBAAgBC,GACd,IAAKA,EAAYC,MAAKhgC,GAAQxI,KAAK4lB,UAAUpd,KAC3C,MAAMxI,KAAKqlB,MAAMpG,EAAO7G,oBAAqB,CAC3CkN,GAAItlB,KAAKqmB,MAAM7B,SACftM,cAAeqwB,GAGpB,CAED3F,aAAaz1B,GACX,MAAO,CAACqR,EAAaue,EAAmBD,KACtC98B,KAAKqlB,MAAMlY,EAAO,CAChBmY,GAAI+c,GAAc7jB,EAAKue,EAAWD,IADpC,CAIH,ECngDI,MAAM2L,GAAWr5B,cAAA,KAEtBs5B,aAA4B,IAAIvrB,IAFV,KAKtBwrB,cAAgD,IAAItgB,IAL9B,KAStBugB,sBAA+C,IAAIvgB,GAT7B,EAYT,MAAMwgB,GAKnBz5B,YAAY0oB,GAAmB,KAJ/BA,YAI+B,OAH/B1yB,MAA2B,GAGI,KAF/BwjC,sBAA+C,IAAIvgB,IAGjDroB,KAAK83B,OAASA,CACf,CAEDxD,UACE,OAAOt0B,KAAKoF,MAAMpF,KAAKoF,MAAMC,OAAS,EACvC,CAEDwzB,QACE74B,KAAKoF,MAAMK,KAAK,IAAIgjC,GACrB,CAED3P,OACE,MAAMgQ,EAAgB9oC,KAAKoF,MAAMG,MAK3B+uB,EAAUt0B,KAAKs0B,UAGrB,IAAK,MAAO9rB,EAAM4V,KAAQxT,MAAMm+B,KAAKD,EAAcF,uBAC7CtU,EACGA,EAAQsU,sBAAsB3U,IAAIzrB,IACrC8rB,EAAQsU,sBAAsBh9B,IAAIpD,EAAM4V,GAG1Cpe,KAAK83B,OAAOzS,MAAMpG,EAAO5H,8BAA+B,CACtDiO,GAAIlH,EACJxO,eAAgBpH,GAIvB,CAEDwgC,mBACExgC,EACAygC,EACA7qB,GAEA,MAAM,aAAEsqB,EAAF,cAAgBC,EAAhB,sBAA+BC,GACnC5oC,KAAKs0B,UACP,IAAI4U,EAAYR,EAAazU,IAAIzrB,GAEjC,GAAIygC,EAAc9R,GAA6B,CAC7C,MAAMgS,EAAWD,GAAaP,EAAcj9B,IAAIlD,GAChD,GAAI2gC,EAAU,CACZ,MAAMC,EAAYD,EAAWnS,GACvBqS,EAAYJ,EAAcjS,GAE1BsS,EAAUH,EAAWhS,GACrBoS,EAAUN,EAAc9R,GAK9B+R,EAAYI,IAAYC,GAAWH,IAAcC,EAE5CH,GAAWP,EAActP,OAAO7wB,EACtC,MAAW0gC,GACVP,EAAc/8B,IAAIpD,EAAMygC,EAE3B,CAEGC,GACFlpC,KAAK83B,OAAOzS,MAAMpG,EAAOtF,yBAA0B,CACjD2L,GAAIlH,EACJxO,eAAgBpH,IAIpBkgC,EAAavP,IAAI3wB,GACjBogC,EAAsBvP,OAAO7wB,EAC9B,CAED0c,eAAe1c,EAAc4V,GAC3B,IAAI6G,EACJ,IAAKA,KAAcjlB,KAAKoF,MACtB,GAAI6f,EAAWyjB,aAAazU,IAAIzrB,GAAO,OAGrCyc,EACFA,EAAW2jB,sBAAsBh9B,IAAIpD,EAAM4V,GAG3Cpe,KAAK83B,OAAOzS,MAAMpG,EAAO5H,8BAA+B,CACtDiO,GAAIlH,EACJxO,eAAgBpH,GAGrB,ECnEH,MAAMghC,GAAc,EAClBC,GAAkC,EAClCC,GAAuC,EACvCC,GAAwB,EAI1B,MAAMC,GAGJx6B,YAAY/I,EAA4BmjC,IAAa,KAFrDnjC,UAEqD,EACnDrG,KAAKqG,KAAOA,CACb,CAEDwjC,iCACE,OACE7pC,KAAKqG,OAASqjC,IACd1pC,KAAKqG,OAASojC,EAEjB,CAEDK,kCACE,OAAO9pC,KAAKqG,OAASsjC,EACtB,EAWH,MAAMI,WAA8BH,GAGlCx6B,YAAY/I,GACVsZ,MAAMtZ,GADiB,KAFzB2jC,kBACE,IAAI3hB,GAGL,CACD4hB,uBACEC,GACA,GACE5kB,IAKF,MAAMlkB,EAAQkkB,EAAGlkB,MAEjBpB,KAAKgqC,kBAAkBp+B,IAAIxK,EAAO,CAAC8oC,EAAmB5kB,GACvD,CACD6kB,sBAAsB/oC,GACpBpB,KAAKgqC,kBAAkB3Q,OAAOj4B,EAC/B,CACDgpC,cACEC,GAEArqC,KAAKgqC,kBAAkBxkC,QAAQ6kC,EAChC,EAGY,MAAMC,GAInBl7B,YAAY0oB,GAAmB,KAH/BA,YAG+B,OAF/B1yB,MAAgC,CAAC,IAAIwkC,IAGnC5pC,KAAK83B,OAASA,CACf,CACDe,MAAME,GACJ/4B,KAAKoF,MAAMK,KAAKszB,EACjB,CAEDD,OACE94B,KAAKoF,MAAMG,KACZ,CAYDglC,gCACErG,GAEE5e,GAAI/hB,IAKN,MAAMinC,EAAS,CAAEllB,GAAI/hB,EAAK6a,IAAI3O,QACxB,MAAErK,GAAUpF,KAClB,IAAIwQ,EAAIpL,EAAMC,OAAS,EACnB0zB,EAAyB3zB,EAAMoL,GACnC,OAAQuoB,EAAM+Q,kCAAmC,CAC/C,IAAI/Q,EAAM8Q,iCAKR,OAJA9Q,EAAMkR,uBAAuB/F,EAAcsG,GAM7CzR,EAAQ3zB,IAAQoL,EACjB,CACDxQ,KAAK83B,OAAOzS,MAAM6e,EAAcsG,EACjC,CAyBDC,iCACEt9B,GAEEmY,GAAI/hB,IAKN,MAAM,MAAE6B,GAAUpF,KACZ+4B,EAAyB3zB,EAAMA,EAAMC,OAAS,GAC9CmlC,EAAS,CAAEllB,GAAI/hB,EAAK6a,IAAI3O,OAC9B,GAAIspB,EAAM+Q,kCACR9pC,KAAK83B,OAAOzS,MAAMlY,EAAOq9B,OACpB,KAAIzR,EAAM8Q,iCAGf,OAFA9Q,EAAMkR,uBAAuB98B,EAAOq9B,EAGrC,CACF,CAWDE,iCAAgC,GAAEplB,IAChC,MAAM,MAAElgB,GAAUpF,KAClB,IAAIwQ,EAAIpL,EAAMC,OAAS,EACnB0zB,EAAyB3zB,EAAMoL,GACnC,MAAOuoB,EAAM8Q,iCACP9Q,EAAM1yB,OAASqjC,IACjB3Q,EAAMkR,uBAAuBhrB,EAAOhM,uBAAwB,CAAEqS,OAEhEyT,EAAQ3zB,IAAQoL,EAEnB,CAEDm6B,oBACE,MAAM,MAAEvlC,GAAUpF,KACZ24B,EAAevzB,EAAMA,EAAMC,OAAS,GACrCszB,EAAakR,kCAClBlR,EAAayR,eAAc,EAAElG,EAAc9lB,MACzCpe,KAAK83B,OAAOzS,MAAM6e,EAAc,CAAE5e,GAAIlH,IAEtC,IAAI5N,EAAIpL,EAAMC,OAAS,EACnB0zB,EAAQ3zB,EAAMoL,GAClB,MAAOuoB,EAAM8Q,iCACX9Q,EAAMoR,sBAAsB/rB,EAAIhd,OAChC23B,EAAQ3zB,IAAQoL,EACjB,GAEJ,EAGI,SAASo6B,KACd,OAAO,IAAIhB,GAAgBD,GAC5B,CAEM,SAASkB,KACd,OAAO,IAAId,GAAsBN,GAClC,CAEM,SAASqB,KACd,OAAO,IAAIf,GAAsBL,GAClC,CAEM,SAASqB,KACd,OAAO,IAAInB,EACZ,CChQM,MACLoB,GAAQ,EAERC,GAAc,EAEdC,GAAc,EAEdC,GAAe,EACfC,GAAW,EAkCE,MAAMC,GAA2Bj8B,cAAA,KAC9Ck8B,OAAwB,EADsB,CAE9CzS,MAAM7Y,GACJhgB,KAAKsrC,OAAO7lC,KAAKua,EAClB,CAED8Y,OACE94B,KAAKsrC,OAAO/lC,KACb,CAEDgmC,eACE,OAAOvrC,KAAKsrC,OAAOtrC,KAAKsrC,OAAOjmC,OAAS,EACzC,CAEGmmC,eACF,OAAQxrC,KAAKurC,eAAiBL,IAAe,CAC9C,CAEGO,eACF,OAAQzrC,KAAKurC,eAAiBN,IAAe,CAC9C,CAEGS,gBACF,OAAQ1rC,KAAKurC,eAAiBJ,IAAgB,CAC/C,CAEGQ,YACF,OAAQ3rC,KAAKurC,eAAiBH,IAAY,CAC3C,EAGI,SAASQ,GACdpqB,EACAkB,GAEA,OAASlB,EAAU0pB,GAAc,IAC9BxoB,EAAcuoB,GAAc,EAChC,CC1Cc,MAAeY,WAAmBrJ,GAM/CsJ,SACEvoC,EACAlC,EACAuC,EACAC,GAAsB,GAEtB,IAAKN,EAAM,OAEX,MAAM4d,EAAS5d,EAAK4d,MAAQ5d,EAAK4d,OAAS,CAAC,EACvCtd,EACFsd,EAAM9f,GAAOuC,EAEbF,OAAOC,eAAewd,EAAO9f,EAAK,CAAEwC,aAAYD,SAEnD,CAIDmoC,aAAavuB,GACX,OAAOxd,KAAKqmB,MAAMhgB,OAASmX,IAAUxd,KAAKqmB,MAAMiY,WACjD,CAED0N,qBAAqBC,EAAmBzjC,GACtC,MAAM0jC,EAAUD,EAAYzjC,EAAKnD,OACjC,GAAIrF,KAAKi8B,MAAM+C,MAAMiN,EAAWC,KAAa1jC,EAAM,CACjD,MAAM2jC,EAASnsC,KAAKi8B,MAAMC,WAAWgQ,GACrC,QACE3Y,GAAiB4Y,IAIK,SAAZ,MAATA,GAEJ,CACD,OAAO,CACR,CAEDC,sBAAsB5jC,GACpB,MAAM+rB,EAAOv0B,KAAK0jC,iBAClB,OAAO1jC,KAAKgsC,qBAAqBzX,EAAM/rB,EACxC,CAID6jC,cAAc7uB,GACZ,QAAIxd,KAAK+rC,aAAavuB,KACpBxd,KAAKu0B,QACE,EAGV,CAID+X,iBACE9uB,EACA0mB,GAEA,IAAKlkC,KAAKqsC,cAAc7uB,GAAQ,CAC9B,GAAoB,MAAhB0mB,EACF,MAAMlkC,KAAKqlB,MAAM6e,EAAc,CAAE5e,GAAItlB,KAAKqmB,MAAM7B,WAElD,MAAMxkB,KAAKmX,WAAW,KAAMqG,EAC7B,CACF,CAID+uB,qBACE,OACEvsC,KAAK4gC,MACL,MAAA5gC,KAAK4gC,MADL,IAEA5gC,KAAKwsC,uBAER,CAEDA,wBACE,OAAOlQ,GAAUjJ,KACfrzB,KAAKi8B,MAAM+C,MAAMh/B,KAAKqmB,MAAMa,cAAc9lB,MAAOpB,KAAKqmB,MAAM5W,OAE/D,CAEDg9B,wBAEE,OADA9P,GAA0BiH,UAAY5jC,KAAKqmB,MAAM3W,IAC1CitB,GAA0BtJ,KAAKrzB,KAAKi8B,MAC5C,CAIDyQ,mBACE,OAAO1sC,KAAKojC,IAAgB,KAAApjC,KAAKusC,oBAClC,CAKDI,UAAUC,GAAoB,IACxBA,EAAW5sC,KAAK0sC,mBAAqB1sC,KAAKojC,IAAL,MACzCpjC,KAAKqlB,MAAMpG,EAAOjH,iBAAkB,CAAEsN,GAAItlB,KAAKqmB,MAAMa,eACtD,CAKD2lB,OAAOxmC,EAAiB+X,GACtBpe,KAAKojC,IAAI/8B,IAASrG,KAAKmX,WAAWiH,EAAK/X,EACxC,CAIDymC,SACEC,EACAC,EAAkBhtC,KAAKqmB,MAAM/H,SAK7B,MAAM2uB,EAEF,CAAE1pC,KAAM,MACZ,IACE,MAAMA,EAAOwpC,GAAG,CAACxpC,EAAO,QAEtB,MADA0pC,EAAY1pC,KAAOA,EACb0pC,CAAN,IAEF,GAAIjtC,KAAKqmB,MAAM2W,OAAO33B,OAAS2nC,EAAShQ,OAAO33B,OAAQ,CACrD,MAAM6nC,EAAYltC,KAAKqmB,MAMvB,OALArmB,KAAKqmB,MAAQ2mB,EAIbhtC,KAAKqmB,MAAMoY,aAAeyO,EAAUzO,aAC7B,CACLl7B,OACA4J,MAAO+/B,EAAUlQ,OAAOgQ,EAAShQ,OAAO33B,QACxC8nC,QAAQ,EACRC,SAAS,EACTF,YAEH,CAED,MAAO,CACL3pC,OACA4J,MAAO,KACPggC,QAAQ,EACRC,SAAS,EACTF,UAAW,KAoBd,CAlBC,MAAO//B,GACP,MAAM+/B,EAAYltC,KAAKqmB,MAEvB,GADArmB,KAAKqmB,MAAQ2mB,EACT7/B,aAAiB8C,YAEnB,MAAO,CAAE1M,KAAM,KAAM4J,QAAOggC,QAAQ,EAAMC,SAAS,EAAOF,aAE5D,GAAI//B,IAAU8/B,EACZ,MAAO,CACL1pC,KAAM0pC,EAAY1pC,KAClB4J,MAAO,KACPggC,QAAQ,EACRC,SAAS,EACTF,aAIJ,MAAM//B,CACP,CACF,CAEDkgC,sBACE5oB,EACA6oB,GAEA,IAAK7oB,EAAqB,OAAO,EACjC,MAAM,mBACJ8oB,EADI,eAEJC,EAFI,cAGJC,EAHI,sBAIJC,GACEjpB,EAEEkpB,IACFJ,KACAC,KACAE,KACAD,EAEJ,IAAKH,EACH,OAAOK,EAGiB,MAAtBJ,GACFvtC,KAAKqlB,MAAMpG,EAAO7I,4BAA6B,CAC7CkP,GAAIioB,IAIc,MAAlBC,GACFxtC,KAAKqlB,MAAMpG,EAAOtK,eAAgB,CAAE2Q,GAAIkoB,IAGrB,MAAjBC,GACFztC,KAAKqlB,MAAMpG,EAAO9D,uBAAwB,CAAEmK,GAAImoB,IAGrB,MAAzBC,GACF1tC,KAAKmX,WAAWu2B,EAEnB,CAWDE,wBACE,OAAOjc,EAA2B3xB,KAAKqmB,MAAMhgB,KAC9C,CAMD+c,cAAc7f,GACZ,MAAqB,gBAAdA,EAAK8C,IACb,CAOD6c,iBAAiB3f,GACf,OAAOA,EAAK4f,GAAG3a,IAChB,CAODme,yBAAyBpjB,GACvB,OACiB,qBAAdA,EAAK8C,MACU,6BAAd9C,EAAK8C,OACPrG,KAAKojB,cAAc7f,EAAKsqC,SAE3B,CAEDjnB,gBAAgBrjB,GACd,MACgB,6BAAdA,EAAK8C,MACS,2BAAd9C,EAAK8C,IAER,CAEDqb,iBACEne,GAEA,MAAqB,mBAAdA,EAAK8C,IACb,CAEDwgB,eAAetjB,GACb,MAAqB,iBAAdA,EAAK8C,IACb,CAEDynC,iBAEE/Z,EAAgD,WAA5B/zB,KAAK4f,QAAQvV,YAGjC,MAAM0jC,EAAY/tC,KAAKqmB,MAAM2X,OAC7Bh+B,KAAKqmB,MAAM2X,OAAS,GAEpB,MAAMgQ,EAAyBhuC,KAAKiuC,oBACpCjuC,KAAKiuC,oBAAsB,IAAI9wB,IAG/B,MAAM+wB,EAAcluC,KAAK+zB,SACzB/zB,KAAK+zB,SAAWA,EAEhB,MAAMoa,EAAWnuC,KAAK+4B,MAChBlB,EAAe73B,KAAKouC,kBAC1BpuC,KAAK+4B,MAAQ,IAAIlB,EAAa73B,KAAM+zB,GAEpC,MAAMsa,EAAeruC,KAAKsuC,UAC1BtuC,KAAKsuC,UAAY,IAAIjD,GAErB,MAAMvC,EAAgB9oC,KAAKilB,WAC3BjlB,KAAKilB,WAAa,IAAI4jB,GAAkB7oC,MAExC,MAAMuuC,EAAqBvuC,KAAKwuC,gBAGhC,OAFAxuC,KAAKwuC,gBAAkB,IAAIlE,GAAuBtqC,MAE3C,KAELA,KAAKqmB,MAAM2X,OAAS+P,EACpB/tC,KAAKiuC,oBAAsBD,EAG3BhuC,KAAK+zB,SAAWma,EAChBluC,KAAK+4B,MAAQoV,EACbnuC,KAAKsuC,UAAYD,EACjBruC,KAAKilB,WAAa6jB,EAClB9oC,KAAKwuC,gBAAkBD,CAAvB,CAEH,CAEDE,qBACE,IAAIC,EAAa1D,GACbhrC,KAAK+zB,WACP2a,GAAcxD,IAEhBlrC,KAAK+4B,MAAMF,MAAMjE,IACjB50B,KAAKsuC,UAAUzV,MAAM6V,EACtB,CAEDC,0BAA0BlqB,GACxB,MAAM,cAAEgpB,GAAkBhpB,EACJ,OAAlBgpB,GACFztC,KAAKmlC,aAAa,uBAAwBsI,EAE7C,EAgBI,MAAMmB,GAAiBx/B,cAAA,KAC5Bm+B,mBAAkD,KADtB,KAE5BC,eAA8C,KAFlB,KAG5BC,cAA6C,KAHjB,KAI5BC,sBAAqD,IAJzB,EC1X9B,MAAM7lC,GACJuH,YAAY0oB,EAAgBtZ,EAAaJ,GAAe,KAQxD/X,KAAe,GAPbrG,KAAKyP,MAAQ+O,EACbxe,KAAK0P,IAAM,EACX1P,KAAKoe,IAAM,IAAI5O,EAAe4O,GAC9B,MAAI0Z,GAAAA,EAAQlY,QAAQivB,SAAQ7uC,KAAKkG,MAAQ,CAACsY,EAAK,IAC/C,MAAIsZ,GAAAA,EAAQnoB,WAAU3P,KAAKoe,IAAIzO,SAAWmoB,EAAOnoB,SAClD,EAcH,MAAMm/B,GAAgBjnC,GAAKmF,UAwB3B,SAAS+hC,GAAiBxrC,GACxB,OAAOyrC,GAAgBzrC,EACxB,CAEM,SAASyrC,GAAgBzrC,GAI9B,MAAM,KAAE8C,EAAF,MAAQoJ,EAAR,IAAeC,EAAf,IAAoB0O,EAApB,MAAyBlY,EAAzB,MAAgCib,EAAhC,KAAuC3Y,GAASjF,EAChD0rC,EAASvrC,OAAOwrC,OAAOJ,IAW7B,OAVAG,EAAO5oC,KAAOA,EACd4oC,EAAOx/B,MAAQA,EACfw/B,EAAOv/B,IAAMA,EACbu/B,EAAO7wB,IAAMA,EACb6wB,EAAO/oC,MAAQA,EACf+oC,EAAO9tB,MAAQA,EACf8tB,EAAOzmC,KAAOA,EACD,gBAATnC,IACF4oC,EAAOE,aAAe5rC,EAAK4rC,cAEtBF,CACR,CAEM,SAASG,GAAmB7rC,GACjC,MAAM,KAAE8C,EAAF,MAAQoJ,EAAR,IAAeC,EAAf,IAAoB0O,EAApB,MAAyBlY,EAAzB,MAAgCib,GAAU5d,EAChD,GAAa,gBAAT8C,EACF,OAAO0oC,GAAiBxrC,GAE1B,MAAM0rC,EAASvrC,OAAOwrC,OAAOJ,IAa7B,OAZAG,EAAO5oC,KAAOA,EACd4oC,EAAOx/B,MAAQA,EACfw/B,EAAOv/B,IAAMA,EACbu/B,EAAO7wB,IAAMA,EACb6wB,EAAO/oC,MAAQA,OACEgI,IAAb3K,EAAK2d,IAEP+tB,EAAO/tB,IAAM3d,EAAK2d,IAElB+tB,EAAO9tB,MAAQA,EAEjB8tB,EAAOrrC,MAAQL,EAAKK,MACbqrC,CACR,CA9DCH,GAAcO,QAAU,WACtB,MAAMC,EAAU,IAAIznC,QAAKqG,EAAWlO,KAAKyP,MAAOzP,KAAKoe,IAAI3O,OACnDW,EAAO1M,OAAO0M,KAAKpQ,MACzB,IAAK,IAAIwQ,EAAI,EAAGnL,EAAS+K,EAAK/K,OAAQmL,EAAInL,EAAQmL,IAAK,CACrD,MAAMnP,EAAM+O,EAAKI,GAGP,oBAARnP,GACQ,qBAARA,GACQ,kBAARA,IAGAiuC,EAAQjuC,GAAOrB,KAAKqB,GAEvB,CAED,OAAOiuC,C,EAkDJ,MAAeC,WAAkB1D,GACtCloB,YAEE,OAAO,IAAI9b,GAAK7H,KAAMA,KAAKqmB,MAAM5W,MAAOzP,KAAKqmB,MAAM7B,SACpD,CAEDgrB,YAAgChxB,EAAaJ,GAE3C,OAAO,IAAIvW,GAAK7H,KAAMwe,EAAKJ,EAC5B,CAGDsI,gBAAoCrgB,GAClC,OAAOrG,KAAKwvC,YAAYnpC,EAAKoJ,MAAOpJ,EAAK+X,IAAI3O,MAC9C,CAIDoU,WAA+BtgB,EAAiB8C,GAC9C,OAAOrG,KAAK8mB,aAAavjB,EAAM8C,EAAMrG,KAAKqmB,MAAMa,cACjD,CAIDJ,aACEvjB,EACA8C,EACA0gB,GAeA,OANAxjB,EAAK8C,KAAOA,EAEZ9C,EAAKmM,IAAMqX,EAAO3lB,MAClBmC,EAAK6a,IAAI1O,IAAMqX,EACX/mB,KAAK4f,QAAQivB,SAAQtrC,EAAK2C,MAAM,GAAK6gB,EAAO3lB,OAC5CpB,KAAK4f,QAAQglB,eAAe5kC,KAAKq7B,eAAe93B,GAC7CA,CACR,CAEDyjB,mBAAmBzjB,EAAgBkM,EAAe+U,GAChDjhB,EAAKkM,MAAQA,EACblM,EAAK6a,IAAI3O,MAAQ+U,EACbxkB,KAAK4f,QAAQivB,SAAQtrC,EAAK2C,MAAM,GAAKuJ,EAC1C,CAEDwX,iBACE1jB,EACAwjB,EAAmB/mB,KAAKqmB,MAAMa,eAE9B3jB,EAAKmM,IAAMqX,EAAO3lB,MAClBmC,EAAK6a,IAAI1O,IAAMqX,EACX/mB,KAAK4f,QAAQivB,SAAQtrC,EAAK2C,MAAM,GAAK6gB,EAAO3lB,MACjD,CAKDquC,2BAA2BlsC,EAAgBmsC,GACzC1vC,KAAKgnB,mBAAmBzjB,EAAMmsC,EAAajgC,MAAOigC,EAAatxB,IAAI3O,MACpE,EClIH,MAAMkgC,GAAgB,IAAIxyB,IAAI,CAC5B,IACA,MACA,OACA,UACA,QACA,UACA,QACA,YACA,QACA,OACA,SACA,SACA,SACA,OACA,SACA,SAKIyyB,GAAanxB,CAAe,OAAM,CACtCoxB,0BACE,iFACFC,2BACE,yKAGFC,mBAAoB,EAAGC,kBACaA,kCAAAA,KACpCC,oBACE,0DACFC,6BACE,sEACFC,8BACE,gDACFC,gCAAiC,EAC/BC,aACAC,cAK6DD,6DAAAA,oBAA6BA,0BAAmCC,OAC/HC,wBAAyB,EACvBF,aACAC,cAKC,uDAAsDD,8CAAuDC,OAChHE,6BAA8B,EAAGF,cACrBA,UAAAA,yKACZG,wBAAyB,EACvBC,kBACAJ,cAKC,eAAcI,6FAA2GJ,OAC5HK,uCAAwC,EACtCL,cAI4GA,4GAAAA,OAa9GM,wCAAyC,EACvCN,WACAD,aACAQ,kBAMC,UAASP,kBAAyBO,gCAA2CR,qBAA8BQ,aAC9GC,uCAAwC,EACtCR,WACAD,gBAMC,oDAAmDA,kBAA2BC,OACjFS,wCAAyC,EACvCT,WACAD,gBAMC,qCAAoCA,6EAAsFC,OAC7HU,sBAAuB,EACrBV,WACAD,aACAY,gBAMqFZ,qFAAAA,yBAAkCY,kBAA2BX,OACpJY,+BAAgC,EAC9BZ,WACAD,gBAKC,sDAAqDA,qBAA8BC,OACtFa,0CAA2C,EACzCb,cAI2GA,2GAAAA,OAC7Gc,0BAA2B,2CAC3BC,oCACE,yKACFC,mBACE,8EACFC,uBACE,2EACFC,gBAAiB,gDACjBC,oCACE,0FACFC,wBACE,0GACFC,oBACE,mEACFC,kBAAmB,0DACnBC,kBAAmB,OAAF,QACf/nC,QACE,kFAGE,CAAEgV,WAAY,2BAGpBgzB,0BAA2B,2CAC3BC,eAAgB,0CAChBC,4BACE,0DACFC,6BACE,oGACFC,0BAA2B,2CAC3BC,qBACE,6DACFC,mBAAoB,qDACpBC,sBACE,oHACFC,kBACE,uEACFC,kCACE,uEACFC,uBAAwB,EAAGxC,kBACGA,4BAAAA,KAC9ByC,6BACE,yDACFC,mCACE,wDACFC,qBACE,mEACFC,6BACE,mDACFC,kCACE,oEACFC,gDACE,oHACFC,6BAA8B,EAC5BC,wBACA/B,gBAKC,oBAAmB+B,+BAAmD/B,eACzEgC,oCACE,oEACFC,wBAAyB,+BAI3B,SAASC,GAAeC,GACtB,MACuB,gCAArBA,EAAY/sC,MACU,6BAArB+sC,EAAY/sC,QACT+sC,EAAYC,aACsB,cAAjCD,EAAYC,YAAYhtC,MACU,yBAAjC+sC,EAAYC,YAAYhtC,KAEjC,CAED,SAASitC,GAAkB/vC,GACzB,MAA2B,SAApBA,EAAKgwC,YAA6C,WAApBhwC,EAAKgwC,UAC3C,CAED,SAASC,GAAqBntC,GAC5B,OAAOqrB,EAA2BrrB,IAAlC,KAA2CA,CAC5C,CAED,MAAMotC,GAAoB,CACxBC,MAAO,qBACPC,IAAK,qBACLttC,KAAM,cACNutC,UAAW,oBAIb,SAASC,GACPC,EACAzgB,GAEA,MAAM0gB,EAAa,GACbC,EAAa,GACnB,IAAK,IAAIxjC,EAAI,EAAGA,EAAIsjC,EAAKzuC,OAAQmL,KAC9B6iB,EAAKygB,EAAKtjC,GAAIA,EAAGsjC,GAAQC,EAAQC,GAAOvuC,KAAKquC,EAAKtjC,IAErD,MAAO,CAACujC,EAAOC,EAChB,CAED,MAAMC,GAAoB,yBAoC1B,OAAgBz0B,GACd,cAA8BA,EAA6BpQ,eAAAA,GAAA,iBAIzD8kC,gBAA8ChmC,CAJW,CAMzDkgC,kBAGE,OAAOxU,EACR,CAEDua,mBACE,OAAOn0C,KAAKgjB,gBAAgB,OAAQ,QAA8B,SAApBhjB,KAAKk0C,UACpD,CAEDE,mBACE,QAASp0C,KAAKgjB,gBAAgB,OAAQ,QACvC,CAEDqhB,YAAYh+B,EAAiB04B,GAU3B,OARW,MAAT14B,GACS,KAATA,GACS,KAATA,QAEwB6H,IAApBlO,KAAKk0C,aACPl0C,KAAKk0C,WAAa,MAGfv0B,MAAM0kB,YAAYh+B,EAAM04B,EAChC,CAED5D,WAAWC,GACT,QAAwBltB,IAApBlO,KAAKk0C,WAA0B,CAEjC,MAAMG,EAAUJ,GAAkBK,KAAKlZ,EAAQx3B,OAC/C,GAAKywC,EAEE,GAAmB,SAAfA,EAAQ,GACjBr0C,KAAKk0C,WAAa,WACb,IAAmB,WAAfG,EAAQ,GAGjB,MAAM,IAAI5tC,MAAM,0BAFhBzG,KAAKk0C,WAAa,QAGnB,MACF,CACD,OAAOv0B,MAAMwb,WAAWC,EACzB,CAEDmZ,yBAAyBC,GACvB,MAAMC,EAAYz0C,KAAKqmB,MAAMgX,OAC7Br9B,KAAKqmB,MAAMgX,QAAS,EACpBr9B,KAAK6sC,OAAO2H,GAAZ,IAEA,MAAMnuC,EAAOrG,KAAK00C,gBAElB,OADA10C,KAAKqmB,MAAMgX,OAASoX,EACbpuC,CACR,CAEDsuC,qBACE,MAAMpxC,EAAOvD,KAAK2jB,YACZixB,EAAY50C,KAAKqmB,MAAM7B,SAS7B,OARAxkB,KAAKu0B,OACLv0B,KAAKssC,iBAAL,KAEItsC,KAAKqmB,MAAM8X,aAAeyW,EAAUxzC,MAAQ,GAC9CpB,KAAKqlB,MAAMuqB,GAAW8C,mCAAoC,CACxDptB,GAAIsvB,IAGJ50C,KAAKojC,IAAL,KACF7/B,EAAKK,MAAQ+b,MAAMk1B,kBACnB70C,KAAK6sC,OAAL,IACO7sC,KAAK6jB,WAAWtgB,EAAM,sBAEtBvD,KAAK6jB,WAAWtgB,EAAM,oBAEhC,CAEDuxC,uCAIE,MAAML,EAAYz0C,KAAKqmB,MAAMgX,OAC7Br9B,KAAKqmB,MAAMgX,QAAS,EACpBr9B,KAAK6sC,OAAL,IACA,IAAIxmC,EAAO,KACP0uC,EAAY,KAWhB,OAVI/0C,KAAK4gC,MAAL,KACF5gC,KAAKqmB,MAAMgX,OAASoX,EACpBM,EAAY/0C,KAAK20C,uBAEjBtuC,EAAOrG,KAAK00C,gBACZ10C,KAAKqmB,MAAMgX,OAASoX,EAChBz0C,KAAK4gC,MAAL,MACFmU,EAAY/0C,KAAK20C,uBAGd,CAACtuC,EAAM0uC,EACf,CAEDC,sBACEzxC,GAIA,OAFAvD,KAAKu0B,OACLv0B,KAAKi1C,sBAAsB1xC,GAAkB,GACtCvD,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAED2xC,yBACE3xC,GAEAvD,KAAKu0B,OAEL,MAAMpR,EAAM5f,EAAK4f,GAAKnjB,KAAKm1C,kBAErBC,EAAWp1C,KAAK2jB,YAChB0xB,EAAgBr1C,KAAK2jB,YAEvB3jB,KAAK4gC,MAAL,IACFwU,EAAStyB,eAAiB9iB,KAAKs1C,oCAE/BF,EAAStyB,eAAiB,KAG5B9iB,KAAK6sC,OAAL,IACA,MAAM0I,EAAMv1C,KAAKw1C,8BAyBjB,OAxBAJ,EAASvzB,OAAS0zB,EAAI1zB,OACtBuzB,EAASp2B,KAAOu2B,EAAIv2B,KACpBo2B,EAASp1C,KAAOu1C,EAAI1nB,MACpB7tB,KAAK6sC,OAAL,KAECuI,EAASK,WAAYlyC,EAAKwxC,WACzB/0C,KAAK80C,uCAEPO,EAAcK,eAAiB11C,KAAK6jB,WAClCuxB,EACA,0BAGFjyB,EAAGuyB,eAAiB11C,KAAK6jB,WAAWwxB,EAAe,kBAEnDr1C,KAAKinB,iBAAiB9D,GACtBnjB,KAAK2sC,YAEL3sC,KAAK+4B,MAAMC,YACTz1B,EAAK4f,GAAG3a,KACRuuB,GACAxzB,EAAK4f,GAAG/E,IAAI3O,OAGPzP,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAEDoyC,iBACEpyC,EACAqyC,GAEA,GAAI51C,KAAK4gC,MAAL,IACF,OAAO5gC,KAAKg1C,sBAAsBzxC,GAC7B,GAAIvD,KAAK4gC,MAAL,IACT,OAAO5gC,KAAKk1C,yBAAyB3xC,GAChC,GAAIvD,KAAK4gC,MAAL,IACT,OAAO5gC,KAAK61C,yBAAyBtyC,GAChC,GAAIvD,KAAKqsC,cAAL,KACT,OAAIrsC,KAAK4gC,MAAL,IACK5gC,KAAK81C,8BAA8BvyC,IAEtCqyC,GACF51C,KAAKqlB,MAAMuqB,GAAW+B,oBAAqB,CACzCrsB,GAAItlB,KAAKqmB,MAAM6X,kBAGZl+B,KAAK+1C,uBAAuBxyC,IAEhC,GAAIvD,KAAK+rC,aAAL,KACT,OAAO/rC,KAAKg2C,0BAA0BzyC,GACjC,GAAIvD,KAAK+rC,aAAL,KACT,OAAO/rC,KAAKi2C,2BAA2B1yC,GAClC,GAAIvD,KAAK+rC,aAAL,KACT,OAAO/rC,KAAKk2C,0BAA0B3yC,GACjC,GAAIvD,KAAK4gC,MAAL,IACT,OAAO5gC,KAAKm2C,kCAAkC5yC,EAAMqyC,GAEpD,MAAM51C,KAAKmX,YAEd,CAED0+B,yBACEtyC,GAQA,OANAvD,KAAKu0B,OACLhxB,EAAK4f,GAAKnjB,KAAKo2C,oCACc,GAE7Bp2C,KAAK+4B,MAAMC,YAAYz1B,EAAK4f,GAAG3a,KAAM4tB,GAAU7yB,EAAK4f,GAAG/E,IAAI3O,OAC3DzP,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAEDwyC,uBACExyC,GAEAvD,KAAK+4B,MAAMF,MAAMlE,IAEb30B,KAAK4gC,MAAL,KACFr9B,EAAK4f,GAAKxD,MAAM02B,gBAEhB9yC,EAAK4f,GAAKnjB,KAAKm1C,kBAGjB,MAAMmB,EAAY/yC,EAAKsB,KAAO7E,KAAK2jB,YAE7B9e,EAAQyxC,EAASzxC,KAAO,GAC9B7E,KAAK6sC,OAAL,GACA,OAAQ7sC,KAAK4gC,MAAL,GAAuB,CAC7B,IAAI0V,EAAWt2C,KAAK2jB,YAEhB3jB,KAAK4gC,MAAL,KACF5gC,KAAKu0B,OACAv0B,KAAK+rC,aAAL,MAAgC/rC,KAAK4gC,MAAL,KACnC5gC,KAAKqlB,MAAMuqB,GAAW6B,oCAAqC,CACzDnsB,GAAItlB,KAAKqmB,MAAM6X,kBAGnBve,MAAM42B,YAAYD,KAElBt2C,KAAKssC,iBAAL,IAEEsD,GAAWqD,qCAGbqD,EAAWt2C,KAAK21C,iBAAiBW,GAAU,IAG7CzxC,EAAKY,KAAK6wC,EACX,CAEDt2C,KAAK+4B,MAAMD,OAEX94B,KAAK6sC,OAAL,GAEA7sC,KAAK6jB,WAAWyyB,EAAU,kBAE1B,IAAIxjC,EAAiC,KACjC0jC,GAAkB,EA0BtB,OAzBA3xC,EAAKW,SAAQ4tC,IACPD,GAAeC,IACJ,aAATtgC,GACF9S,KAAKqlB,MAAMuqB,GAAWE,2BAA4B,CAChDxqB,GAAI8tB,IAGRtgC,EAAO,MACuB,yBAArBsgC,EAAY/sC,OACjBmwC,GACFx2C,KAAKqlB,MAAMuqB,GAAWO,8BAA+B,CACnD7qB,GAAI8tB,IAGK,OAATtgC,GACF9S,KAAKqlB,MAAMuqB,GAAWE,2BAA4B,CAChDxqB,GAAI8tB,IAGRtgC,EAAO,WACP0jC,GAAkB,EACnB,IAGHjzC,EAAKuP,KAAOA,GAAQ,WACb9S,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAED4yC,kCACE5yC,EACAqyC,GAIA,GAFA51C,KAAK6sC,OAAL,IAEI7sC,KAAKojC,IAAL,IAYF,OAXIpjC,KAAK4gC,MAAL,KAA4B5gC,KAAK4gC,MAAL,IAG9Br9B,EAAK8vC,YAAcrzC,KAAK21C,iBAAiB31C,KAAK2jB,cAG9CpgB,EAAK8vC,YAAcrzC,KAAK00C,gBACxB10C,KAAK2sC,aAEPppC,EAAKwH,SAAU,EAER/K,KAAK6jB,WAAWtgB,EAAM,4BAE7B,GACEvD,KAAK4gC,MAAL,KACA5gC,KAAKy2C,UACHz2C,KAAK+rC,aAAL,MAA+B/rC,KAAK+rC,aAAL,QAC9B6J,EACH,CACA,MAAM1uC,EAAQlH,KAAKqmB,MAAMziB,MAKzB,MAAM5D,KAAKqlB,MAAMuqB,GAAWmD,6BAA8B,CACxDztB,GAAItlB,KAAKqmB,MAAM7B,SACfwuB,sBAAuB9rC,EACvB+pC,WAAYwC,GAAkBvsC,IAEjC,CAED,GACElH,KAAK4gC,MACL,KAAA5gC,KAAK4gC,MADL,KAEA5gC,KAAK4gC,MAFL,KAGA5gC,KAAK+rC,aAAL,KAKA,OAHAxoC,EAAK8vC,YAAcrzC,KAAK21C,iBAAiB31C,KAAK2jB,aAC9CpgB,EAAKwH,SAAU,EAER/K,KAAK6jB,WAAWtgB,EAAM,4BACxB,GACLvD,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,IACA5gC,KAAK+rC,aAFL,MAGA/rC,KAAK+rC,aAAL,MACA/rC,KAAK+rC,aAAL,KAaA,OAXAxoC,EAAOvD,KAAK+lB,YACVxiB,GAEgB,2BAAdA,EAAK8C,OACP9C,EAAK8C,KAAO,oBACZ9C,EAAKwH,SAAU,SACRxH,EAAKmzC,YAGdnzC,EAAK8C,KAAO,UAAY9C,EAAK8C,KAEtB9C,EAIX,MAAMvD,KAAKmX,YACZ,CAED2+B,8BACEvyC,GAOA,OALAvD,KAAKu0B,OACLv0B,KAAKssC,iBAAL,KACA/oC,EAAKmyC,eAAiB11C,KAAK22C,0BAC3B32C,KAAK2sC,YAEE3sC,KAAK6jB,WAAWtgB,EAAM,uBAC9B,CAEDyyC,0BACEzyC,GAEAvD,KAAKu0B,OACL,MAAMqiB,EAAW52C,KAAK62C,mBAAmBtzC,GAGzC,OADAqzC,EAASvwC,KAAO,mBACTuwC,CACR,CAEDX,2BACE1yC,GAEAvD,KAAKu0B,OACL,MAAMqiB,EAAW52C,KAAK82C,oBAAoBvzC,GAAM,GAGhD,OADAqzC,EAASvwC,KAAO,oBACTuwC,CACR,CAEDV,0BACE3yC,GAIA,OAFAvD,KAAKu0B,OACLv0B,KAAKi1C,sBAAsB1xC,GACpBvD,KAAK6jB,WAAWtgB,EAAM,mBAC9B,CAID0xC,sBACE1xC,EACAwzC,GAAmB,GAuBnB,GArBAxzC,EAAK4f,GAAKnjB,KAAKg3C,+BACED,GACG,GAGpB/2C,KAAK+4B,MAAMC,YACTz1B,EAAK4f,GAAG3a,KACRuuC,EAAU1gB,GAAgBF,GAC1B5yB,EAAK4f,GAAG/E,IAAI3O,OAGVzP,KAAK4gC,MAAL,IACFr9B,EAAKuf,eAAiB9iB,KAAKs1C,oCAE3B/xC,EAAKuf,eAAiB,KAGxBvf,EAAK0zC,QAAU,GACf1zC,EAAK2zC,WAAa,GAClB3zC,EAAK4zC,OAAS,GAEVn3C,KAAKojC,IAAL,IACF,GACE7/B,EAAK0zC,QAAQxxC,KAAKzF,KAAKo3C,oCACfL,GAAW/2C,KAAKojC,IAF1B,KAKF,GAAIpjC,KAAK+rC,aAAL,KAA+B,CACjC/rC,KAAKu0B,OACL,GACEhxB,EAAK4zC,OAAO1xC,KAAKzF,KAAKo3C,mCACfp3C,KAAKojC,IAFd,IAGD,CAED,GAAIpjC,KAAK+rC,aAAL,KAAmC,CACrC/rC,KAAKu0B,OACL,GACEhxB,EAAK2zC,WAAWzxC,KAAKzF,KAAKo3C,mCACnBp3C,KAAKojC,IAFd,IAGD,CAED7/B,EAAKsB,KAAO7E,KAAKq3C,oBAAoB,CACnCC,YAAaP,EACbQ,YAAY,EACZC,aAAa,EACbC,WAAYV,EACZW,cAAc,GAEjB,CAEDN,4BACE,MAAM7zC,EAAOvD,KAAK2jB,YASlB,OAPApgB,EAAK4f,GAAKnjB,KAAK23C,mCACX33C,KAAK4gC,MAAL,IACFr9B,EAAKuf,eAAiB9iB,KAAK43C,sCAE3Br0C,EAAKuf,eAAiB,KAGjB9iB,KAAK6jB,WAAWtgB,EAAM,mBAC9B,CAEDs0C,mBAAmBt0C,GAEjB,OADAvD,KAAKi1C,sBAAsB1xC,GACpBvD,KAAK6jB,WAAWtgB,EAAM,uBAC9B,CAEDu0C,mBAAmBhkB,GACJ,MAATA,GACF9zB,KAAKqlB,MAAMuqB,GAAW6C,6BAA8B,CAClDntB,GAAItlB,KAAKqmB,MAAM7B,UAGpB,CAEDuzB,kBAAkBjkB,EAActP,EAAoB6uB,GAC7C1D,GAAc1b,IAAIH,IAEvB9zB,KAAKqlB,MACHguB,EACIzD,GAAWG,mBACXH,GAAW4C,uBACf,CACEltB,GAAId,EACJwrB,aAAclc,GAGnB,CAEDkjB,8BACEgB,EACA3E,GAOA,OALArzC,KAAK+3C,kBACH/3C,KAAKqmB,MAAMziB,MACX5D,KAAKqmB,MAAM7B,SACX6uB,GAEKrzC,KAAKm1C,gBAAgB6C,EAC7B,CAIDnB,mBAAmBtzC,GAgBjB,OAfAA,EAAK4f,GAAKnjB,KAAKg3C,+BACC,GACI,GAEpBh3C,KAAK+4B,MAAMC,YAAYz1B,EAAK4f,GAAG3a,KAAM2tB,GAAc5yB,EAAK4f,GAAG/E,IAAI3O,OAE3DzP,KAAK4gC,MAAL,IACFr9B,EAAKuf,eAAiB9iB,KAAKs1C,oCAE3B/xC,EAAKuf,eAAiB,KAGxBvf,EAAK00C,MAAQj4C,KAAKu0C,yBAAlB,IACAv0C,KAAK2sC,YAEE3sC,KAAK6jB,WAAWtgB,EAAM,YAC9B,CAEDuzC,oBACEvzC,EACA20C,GA2BA,OAzBAl4C,KAAKssC,iBAAL,KACA/oC,EAAK4f,GAAKnjB,KAAKg3C,+BACC,GACI,GAEpBh3C,KAAK+4B,MAAMC,YAAYz1B,EAAK4f,GAAG3a,KAAM2tB,GAAc5yB,EAAK4f,GAAG/E,IAAI3O,OAE3DzP,KAAK4gC,MAAL,IACFr9B,EAAKuf,eAAiB9iB,KAAKs1C,oCAE3B/xC,EAAKuf,eAAiB,KAIxBvf,EAAK40C,UAAY,KACbn4C,KAAK4gC,MAAL,MACFr9B,EAAK40C,UAAYn4C,KAAKu0C,yBAAtB,KAGFhxC,EAAK60C,SAAW,KACXF,IACH30C,EAAK60C,SAAWp4C,KAAKu0C,yBAArB,KAEFv0C,KAAK2sC,YAEE3sC,KAAK6jB,WAAWtgB,EAAM,aAC9B,CAID80C,uBAAuBC,GAA0B,GAC/C,MAAMC,EAAev4C,KAAKqmB,MAAM7B,SAE1BjhB,EAAOvD,KAAK2jB,YAEZ60B,EAAWx4C,KAAKy4C,oBAEhBC,EAAQ14C,KAAKo2C,qCAiBnB,OAhBA7yC,EAAKiF,KAAOkwC,EAAMlwC,KAElBjF,EAAKi1C,SAAWA,EAEhBj1C,EAAKo1C,MAAQD,EAAMhD,eAEf11C,KAAK4gC,MAAL,KACF5gC,KAAKojC,IAAL,IAEA7/B,EAAKwH,QAAU/K,KAAK00C,iBAEhB4D,GACFt4C,KAAKqlB,MAAMuqB,GAAW8B,wBAAyB,CAAEpsB,GAAIizB,IAIlDv4C,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAED+xC,oCACE,MAAMb,EAAYz0C,KAAKqmB,MAAMgX,OACvB95B,EAAOvD,KAAK2jB,YAClBpgB,EAAKse,OAAS,GAEd7hB,KAAKqmB,MAAMgX,QAAS,EAGhBr9B,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,KACvB5gC,KAAKu0B,OAELv0B,KAAKmX,aAGP,IAAIyhC,GAAkB,EAEtB,EAAG,CACD,MAAMC,EAAgB74C,KAAKq4C,uBAAuBO,GAElDr1C,EAAKse,OAAOpc,KAAKozC,GAEbA,EAAc9tC,UAChB6tC,GAAkB,GAGf54C,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,GAEH,QAAS7sC,KAAK4gC,MAZf,KAiBA,OAJA5gC,KAAK6sC,OAAL,IAEA7sC,KAAKqmB,MAAMgX,OAASoX,EAEbz0C,KAAK6jB,WAAWtgB,EAAM,2BAC9B,CAEDq0C,sCACE,MAAMr0C,EAAOvD,KAAK2jB,YACZ8wB,EAAYz0C,KAAKqmB,MAAMgX,OAC7B95B,EAAKse,OAAS,GAEd7hB,KAAKqmB,MAAMgX,QAAS,EAEpBr9B,KAAK6sC,OAAL,IACA,MAAMiM,EAAwB94C,KAAKqmB,MAAMiX,mBACzCt9B,KAAKqmB,MAAMiX,oBAAqB,EAChC,OAAQt9B,KAAK4gC,MAAL,IACNr9B,EAAKse,OAAOpc,KAAKzF,KAAK00C,iBACjB10C,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,IAQJ,OALA7sC,KAAKqmB,MAAMiX,mBAAqBwb,EAChC94C,KAAK6sC,OAAL,IAEA7sC,KAAKqmB,MAAMgX,OAASoX,EAEbz0C,KAAK6jB,WAAWtgB,EAAM,6BAC9B,CAEDw1C,+CACE,MAAMx1C,EAAOvD,KAAK2jB,YACZ8wB,EAAYz0C,KAAKqmB,MAAMgX,OAC7B95B,EAAKse,OAAS,GAEd7hB,KAAKqmB,MAAMgX,QAAS,EAEpBr9B,KAAK6sC,OAAL,IACA,OAAQ7sC,KAAK4gC,MAAL,IACNr9B,EAAKse,OAAOpc,KAAKzF,KAAKg5C,wCACjBh5C,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,IAOJ,OAJA7sC,KAAK6sC,OAAL,IAEA7sC,KAAKqmB,MAAMgX,OAASoX,EAEbz0C,KAAK6jB,WAAWtgB,EAAM,6BAC9B,CAED01C,yBACE,MAAM11C,EAAOvD,KAAK2jB,YAIlB,GAHA3jB,KAAKssC,iBAAL,KAEA/oC,EAAK0zC,QAAU,GACXj3C,KAAKojC,IAAL,IACF,GACE7/B,EAAK0zC,QAAQxxC,KAAKzF,KAAKo3C,mCAChBp3C,KAAKojC,IAFd,KAaF,OARA7/B,EAAKsB,KAAO7E,KAAKq3C,oBAAoB,CACnCC,aAAa,EACbC,YAAY,EACZC,aAAa,EACbC,YAAY,EACZC,cAAc,IAGT13C,KAAK6jB,WAAWtgB,EAAM,0BAC9B,CAED21C,6BACE,OAAOl5C,KAAK4gC,MAAiB,MAAA5gC,KAAK4gC,MAA3B,KACHjhB,MAAM02B,gBACNr2C,KAAKm1C,iBAAgB,EAC1B,CAEDgE,2BACE51C,EACA61C,EACAZ,GAgBA,OAdAj1C,EAAK81C,OAASD,EAGV,KAAAp5C,KAAKujC,YAAYl9B,MACnB9C,EAAK4f,GAAKnjB,KAAKk5C,6BACf31C,EAAKlC,IAAMrB,KAAKu0C,6BAEhBhxC,EAAK4f,GAAK,KACV5f,EAAKlC,IAAMrB,KAAK00C,iBAElB10C,KAAK6sC,OAAL,GACAtpC,EAAKK,MAAQ5D,KAAKu0C,2BAClBhxC,EAAKi1C,SAAWA,EAETx4C,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED+1C,gCACE/1C,EACA61C,GAoBA,OAlBA71C,EAAK81C,OAASD,EAEd71C,EAAK4f,GAAKnjB,KAAKk5C,6BACfl5C,KAAK6sC,OAAL,GACA7sC,KAAK6sC,OAAL,GACI7sC,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,KACvBr9B,EAAKqe,QAAS,EACdre,EAAKkiB,UAAW,EAChBliB,EAAKK,MAAQ5D,KAAKu5C,6BAChBv5C,KAAKwvC,YAAYjsC,EAAKkM,MAAOlM,EAAK6a,IAAI3O,UAGxClM,EAAKqe,QAAS,EACV5hB,KAAKojC,IAAL,MACF7/B,EAAKkiB,UAAW,GAElBliB,EAAKK,MAAQ5D,KAAKu0C,4BAEbv0C,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CAEDg2C,6BACEh2C,GAEAA,EAAKse,OAAS,GACdte,EAAKyb,KAAO,KACZzb,EAAKuf,eAAiB,KACtBvf,EAAKvD,KAAO,KAERA,KAAK4gC,MAAL,MACFr9B,EAAKuf,eAAiB9iB,KAAKs1C,qCAG7Bt1C,KAAK6sC,OAAL,IACI7sC,KAAK4gC,MAAL,MACFr9B,EAAKvD,KAAOA,KAAKw5C,4BAAuC,GAExDj2C,EAAKvD,KAAKwI,KAAO,KACZxI,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,KAGJ,OAAQ7sC,KAAK4gC,MAAL,MAA0B5gC,KAAK4gC,MAAL,IAChCr9B,EAAKse,OAAOpc,KAAKzF,KAAKw5C,4BAA2B,IAC5Cx5C,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,IAUJ,OANI7sC,KAAKojC,IAAL,MACF7/B,EAAKyb,KAAOhf,KAAKw5C,4BAA2B,IAE9Cx5C,KAAK6sC,OAAL,IACAtpC,EAAKkyC,WAAaz1C,KAAKu0C,2BAEhBv0C,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CAEDk2C,gCACEl2C,EACA61C,GAEA,MAAMM,EAAY15C,KAAK2jB,YAGvB,OAFApgB,EAAK81C,OAASD,EACd71C,EAAKK,MAAQ5D,KAAKu5C,6BAA6BG,GACxC15C,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CAED8zC,qBAAoB,YAClBC,EADkB,WAElBC,EAFkB,YAGlBC,EAHkB,WAIlBC,EAJkB,aAKlBC,IAQA,MAAMjD,EAAYz0C,KAAKqmB,MAAMgX,OAC7Br9B,KAAKqmB,MAAMgX,QAAS,EAEpB,MAAM3B,EAAY17B,KAAK2jB,YAOvB,IAAIg2B,EACAC,EANJle,EAAUme,eAAiB,GAC3Bne,EAAUhrB,WAAa,GACvBgrB,EAAUoe,SAAW,GACrBpe,EAAUqe,cAAgB,GAI1B,IAAIC,GAAU,EACVzC,GAAcv3C,KAAK4gC,MAAL,IAChB5gC,KAAK6sC,OAAL,GACA8M,EAAA,EACAC,GAAQ,IAER55C,KAAK6sC,OAAL,GACA8M,EAAA,EACAC,GAAQ,GAGVle,EAAUke,MAAQA,EAElB,OAAQ55C,KAAK4gC,MAAM+Y,GAAW,CAC5B,IAAIP,GAAW,EACXa,EAA6C,KAC7CC,EAA+C,KACnD,MAAM32C,EAAOvD,KAAK2jB,YAElB,GAAI8zB,GAAcz3C,KAAK+rC,aAAL,KAA8B,CAC9C,MAAMxI,EAAYvjC,KAAKujC,YAEnB,KAAAA,EAAUl9B,MAAqB,KAAAk9B,EAAUl9B,OAC3CrG,KAAKu0B,OACL0lB,EAAgBj6C,KAAKqmB,MAAM7B,SAC3B8yB,GAAc,EAEjB,CAED,GAAIA,GAAet3C,KAAK+rC,aAAL,KAA+B,CAChD,MAAMxI,EAAYvjC,KAAKujC,YAGnB,KAAAA,EAAUl9B,MAAqB,KAAAk9B,EAAUl9B,OAC3CrG,KAAKu0B,OACL6kB,GAAW,EAEd,CAED,MAAMZ,EAAWx4C,KAAKy4C,oBAEtB,GAAIz4C,KAAKojC,IAAL,GACmB,MAAjB6W,GACFj6C,KAAKmX,WAAW8iC,GAEdj6C,KAAKojC,IAAL,IACEoV,GACFx4C,KAAKmX,WAAWqhC,EAASp6B,IAAI3O,OAE/BisB,EAAUqe,cAAct0C,KACtBzF,KAAKs5C,gCAAgC/1C,EAAM61C,KAG7C1d,EAAUoe,SAASr0C,KACjBzF,KAAKm5C,2BAA2B51C,EAAM61C,EAAUZ,SAG/C,GAAIx4C,KAAK4gC,MAAL,KAAyB5gC,KAAK4gC,MAAL,IACb,MAAjBqZ,GACFj6C,KAAKmX,WAAW8iC,GAEdzB,GACFx4C,KAAKmX,WAAWqhC,EAASp6B,IAAI3O,OAE/BisB,EAAUme,eAAep0C,KACvBzF,KAAKy5C,gCAAgCl2C,EAAM61C,QAExC,CACL,IAAItmC,EAAO,OAEX,GAAI9S,KAAK+rC,aAAL,KAA8B/rC,KAAK+rC,aAAL,KAA4B,CAC5D,MAAMxI,EAAYvjC,KAAKujC,YACnB5R,EAA2B4R,EAAUl9B,QACvCyM,EAAO9S,KAAKqmB,MAAMziB,MAClB5D,KAAKu0B,OAER,CAED,MAAM4lB,EAAgBn6C,KAAKo6C,4BACzB72C,EACA61C,EACAa,EACAzB,EACA1lC,EACA0kC,EANoB,MAOpBE,EAAAA,GAAiBkC,GAGG,OAAlBO,GACFH,GAAU,EACVE,EAAkBl6C,KAAKqmB,MAAM6X,iBAE7BxC,EAAUhrB,WAAWjL,KAAK00C,EAE7B,CAEDn6C,KAAKq6C,2BAGHH,GACCl6C,KAAK4gC,MADN,IAEC5gC,KAAK4gC,MAAL,IAED5gC,KAAKqlB,MAAMuqB,GAAW2C,kCAAmC,CACvDjtB,GAAI40B,GAGT,CAEDl6C,KAAK6sC,OAAO8M,GAORnC,IACF9b,EAAUse,QAAUA,GAGtB,MAAMna,EAAM7/B,KAAK6jB,WAAW6X,EAAW,wBAIvC,OAFA17B,KAAKqmB,MAAMgX,OAASoX,EAEb5U,CACR,CAEDua,4BACE72C,EACA61C,EACAa,EACAzB,EACA1lC,EACA0kC,EACAE,GAEA,GAAI13C,KAAKojC,IAAL,IAAuB,CACzB,MAAMkX,EACJt6C,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MADL,KAEA5gC,KAAK4gC,MAAL,IACA5gC,KAAK4gC,MAJP,GAMA,OAAI0Z,GACG9C,EAIOE,GACV13C,KAAKqlB,MAAMuqB,GAAW0B,mBAAoB,CACxChsB,GAAItlB,KAAKqmB,MAAM6X,kBALjBl+B,KAAKqlB,MAAMuqB,GAAW2B,uBAAwB,CAC5CjsB,GAAItlB,KAAKqmB,MAAM6X,kBAOfsa,GACFx4C,KAAKqlB,MAAMuqB,GAAW4B,gBAAiB,CAAElsB,GAAIkzB,IAGxC,OAGJhB,GACHx3C,KAAKqlB,MAAMuqB,GAAW+C,qBAAsB,CAC1CrtB,GAAItlB,KAAKqmB,MAAM6X,kBAGE,MAAjB+b,GACFj6C,KAAKmX,WAAW8iC,GAEdzB,GACFx4C,KAAKqlB,MAAMuqB,GAAWmC,eAAgB,CAAEzsB,GAAIkzB,IAG9Cj1C,EAAKmb,SAAW1e,KAAK00C,gBACd10C,KAAK6jB,WAAWtgB,EAAM,4BAC9B,CAAM,CACLA,EAAKlC,IAAMrB,KAAKk5C,6BAChB31C,EAAK81C,OAASD,EACd71C,EAAKg3C,MAAyB,MAAjBN,EACb12C,EAAKuP,KAAOA,EAEZ,IAAI2S,GAAW,EA0Cf,OAzCIzlB,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,KAEvBr9B,EAAKqe,QAAS,EAEO,MAAjBq4B,GACFj6C,KAAKmX,WAAW8iC,GAEdzB,GACFx4C,KAAKmX,WAAWqhC,EAASp6B,IAAI3O,OAG/BlM,EAAKK,MAAQ5D,KAAKu5C,6BAChBv5C,KAAKwvC,YAAYjsC,EAAKkM,MAAOlM,EAAK6a,IAAI3O,QAE3B,QAATqD,GAA2B,QAATA,GACpB9S,KAAKw6C,4BAA4Bj3C,IAIhCi0C,GACiB,gBAAlBj0C,EAAKlC,IAAImH,MACTjF,EAAKK,MAAM5D,MAEXA,KAAKqlB,MAAMuqB,GAAWqC,6BAA8B,CAClD3sB,GAAI/hB,EAAKK,MAAM5D,SAIN,SAAT8S,GAAiB9S,KAAKmX,aAE1B5T,EAAKqe,QAAS,EAEV5hB,KAAKojC,IAAL,MACF3d,GAAW,GAEbliB,EAAKK,MAAQ5D,KAAKu0C,2BAClBhxC,EAAKi1C,SAAWA,GAGlBj1C,EAAKkiB,SAAWA,EAETzlB,KAAK6jB,WAAWtgB,EAAM,qBAC9B,CACF,CAIDi3C,4BACE3M,GAIA,MAAM4M,EAA+B,QAAlB5M,EAAS/6B,KAAiB,EAAI,EAC3CzN,EACJwoC,EAASjqC,MAAMie,OAAOxc,QAAUwoC,EAASjqC,MAAMob,KAAO,EAAI,GAExD6uB,EAASjqC,MAAM5D,MACjBA,KAAKqlB,MACe,QAAlBwoB,EAAS/6B,KACL88B,GAAWwB,0BACXxB,GAAWkC,0BACf,CAAExsB,GAAIuoB,EAASjqC,MAAM5D,OAIrBqF,IAAWo1C,GACbz6C,KAAKqlB,MACe,QAAlBwoB,EAAS/6B,KACLmM,EAAO3L,eACP2L,EAAO1L,eACX,CAAE+R,GAAIuoB,IAIY,QAAlBA,EAAS/6B,MAAkB+6B,EAASjqC,MAAMob,MAC5Chf,KAAKqlB,MAAMpG,EAAOzL,uBAAwB,CAAE8R,GAAIuoB,GAEnD,CAEDwM,0BAEKr6C,KAAKojC,IAAL,KACApjC,KAAKojC,IAAL,KACApjC,KAAK4gC,MAFN,IAGC5gC,KAAK4gC,MAAL,IAED5gC,KAAKmX,YAER,CAEDwgC,iCACEpzB,EACAC,EACArB,GAEAoB,EAAWA,GAAYvkB,KAAKqmB,MAAM5W,MAClC+U,EAAWA,GAAYxkB,KAAKqmB,MAAM7B,SAClC,IAAIjhB,EACF4f,GAAMnjB,KAAKg3C,+BAA8B,GAE3C,MAAOh3C,KAAKojC,IAAL,IAAkB,CACvB,MAAMsX,EAAQ16C,KAAKwvC,YACjBjrB,EACAC,GAEFk2B,EAAMC,cAAgBp3C,EACtBm3C,EAAMv3B,GAAKnjB,KAAKg3C,+BAA8B,GAC9CzzC,EAAOvD,KAAK6jB,WAAW62B,EAAO,0BAC/B,CAED,OAAOn3C,CACR,CAEDq3C,qBACEr2B,EACAC,EACArB,GAEA,MAAM5f,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GASxC,OAPAjhB,EAAKuf,eAAiB,KACtBvf,EAAK4f,GAAKnjB,KAAK23C,iCAAiCpzB,EAAUC,EAAUrB,GAEhEnjB,KAAK4gC,MAAL,MACFr9B,EAAKuf,eAAiB9iB,KAAK43C,uCAGtB53C,KAAK6jB,WAAWtgB,EAAM,wBAC9B,CAEDs3C,sBACE,MAAMt3C,EAAOvD,KAAK2jB,YAGlB,OAFA3jB,KAAK6sC,OAAL,IACAtpC,EAAKmb,SAAW1e,KAAK86C,uBACd96C,KAAK6jB,WAAWtgB,EAAM,uBAC9B,CAEDw3C,qBACE,MAAMx3C,EAAOvD,KAAK2jB,YAClBpgB,EAAK8jB,MAAQ,GACbrnB,KAAK6sC,OAAL,GAEA,MAAO7sC,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,SAAWrF,KAAK4gC,MAAL,GAAyB,CAE/D,GADAr9B,EAAK8jB,MAAM5hB,KAAKzF,KAAK00C,iBACjB10C,KAAK4gC,MAAL,GAAyB,MAC7B5gC,KAAK6sC,OAAL,GACD,CAED,OADA7sC,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAEDi2C,2BAA2BwB,GACzB,IAAIxyC,EAAO,KACPid,GAAW,EACXiwB,EAAiB,KACrB,MAAMnyC,EAAOvD,KAAK2jB,YACZs3B,EAAKj7C,KAAKujC,YACV2X,EAAN,KAAel7C,KAAKqmB,MAAMhgB,KAoB1B,OAlBI,KAAA40C,EAAG50C,MAAqB,KAAA40C,EAAG50C,MACzB60C,IAAWF,GACbh7C,KAAKqlB,MAAMuqB,GAAWuC,qBAAsB,CAAE7sB,GAAI/hB,IAEpDiF,EAAOxI,KAAKm1C,gBAAgB+F,GACxBl7C,KAAKojC,IAAL,MACF3d,GAAW,EACPy1B,GACFl7C,KAAKqlB,MAAMuqB,GAAWsC,0BAA2B,CAAE5sB,GAAI/hB,KAG3DmyC,EAAiB11C,KAAKu0C,4BAEtBmB,EAAiB11C,KAAK00C,gBAExBnxC,EAAKiF,KAAOA,EACZjF,EAAKkiB,SAAWA,EAChBliB,EAAKmyC,eAAiBA,EACf11C,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED43C,mCACE90C,GAEA,MAAM9C,EAAOvD,KAAKwvC,YAAYnpC,EAAKoJ,MAAOpJ,EAAK+X,IAAI3O,OAInD,OAHAlM,EAAKiF,KAAO,KACZjF,EAAKkiB,UAAW,EAChBliB,EAAKmyC,eAAiBrvC,EACfrG,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAEDiyC,4BAA4B3zB,EAAoC,IAK9D,IAAI7C,EAAmD,KACnD6O,EAAoD,KACpD7tB,KAAK4gC,MAAL,MACF/S,EAAQ7tB,KAAKw5C,4BAAuC,GAEpD3rB,EAAMrlB,KAAO,KACRxI,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,KAGJ,OAAQ7sC,KAAK4gC,MAAL,MAA0B5gC,KAAK4gC,MAAL,IAChC/e,EAAOpc,KAAKzF,KAAKw5C,4BAA2B,IACvCx5C,KAAK4gC,MAAL,KACH5gC,KAAK6sC,OAAL,IAMJ,OAHI7sC,KAAKojC,IAAL,MACFpkB,EAAOhf,KAAKw5C,4BAA2B,IAElC,CAAE33B,SAAQ7C,OAAM6O,QACxB,CAEDutB,0BACE72B,EACAC,EACAjhB,EACA4f,GAEA,OAAQA,EAAG3a,MACT,IAAK,MACH,OAAOxI,KAAK6jB,WAAWtgB,EAAM,qBAE/B,IAAK,OACL,IAAK,UACH,OAAOvD,KAAK6jB,WAAWtgB,EAAM,yBAE/B,IAAK,QACH,OAAOvD,KAAK6jB,WAAWtgB,EAAM,uBAE/B,IAAK,QACH,OAAOvD,KAAK6jB,WAAWtgB,EAAM,uBAE/B,IAAK,SACH,OAAOvD,KAAK6jB,WAAWtgB,EAAM,wBAE/B,IAAK,SACH,OAAOvD,KAAK6jB,WAAWtgB,EAAM,wBAE/B,IAAK,SACH,OAAOvD,KAAK6jB,WAAWtgB,EAAM,wBAE/B,QAEE,OADAvD,KAAK83C,mBAAmB30B,EAAG3a,MACpBxI,KAAK46C,qBAAqBr2B,EAAUC,EAAUrB,GAE1D,CAKD23B,uBACE,MAAMv2B,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtBjhB,EAAOvD,KAAK2jB,YAClB,IAAI4xB,EACAlvC,EACAg1C,GAAgB,EACpB,MAAMvC,EAAwB94C,KAAKqmB,MAAMiX,mBAEzC,OAAQt9B,KAAKqmB,MAAMhgB,MACjB,KAAK,EACH,OAAOrG,KAAKq3C,oBAAoB,CAC9BC,aAAa,EACbC,YAAY,EACZC,aAAa,EACbC,YAAY,EACZC,cAAc,IAGlB,KAAK,EACH,OAAO13C,KAAKq3C,oBAAoB,CAC9BC,aAAa,EACbC,YAAY,EACZC,aAAa,EACbC,YAAY,EACZC,cAAc,IAGlB,KAAK,EAIH,OAHA13C,KAAKqmB,MAAMiX,oBAAqB,EAChCj3B,EAAOrG,KAAK+6C,qBACZ/6C,KAAKqmB,MAAMiX,mBAAqBwb,EACzBzyC,EAET,KAAK,GAaH,OAZA9C,EAAKuf,eAAiB9iB,KAAKs1C,oCAC3Bt1C,KAAK6sC,OAAL,IACA0I,EAAMv1C,KAAKw1C,8BACXjyC,EAAKse,OAAS0zB,EAAI1zB,OAClBte,EAAKyb,KAAOu2B,EAAIv2B,KAChBzb,EAAKvD,KAAOu1C,EAAI1nB,MAChB7tB,KAAK6sC,OAAL,IAEA7sC,KAAK6sC,OAAL,IAEAtpC,EAAKkyC,WAAaz1C,KAAK00C,gBAEhB10C,KAAK6jB,WAAWtgB,EAAM,0BAE/B,KAAK,GAIH,GAHAvD,KAAKu0B,QAGAv0B,KAAK4gC,MAAL,MAA0B5gC,KAAK4gC,MAAL,IAC7B,GAAIpP,EAAkBxxB,KAAKqmB,MAAMhgB,OAASrG,KAAK4gC,MAAL,IAAsB,CAC9D,MAAMpjB,EAAQxd,KAAKujC,YAAYl9B,KAC/Bg1C,EAAgB,KAAA79B,GAAhB,KAAyCA,CAC1C,MACC69B,GAAgB,EAIpB,GAAIA,EAAe,CAMjB,GALAr7C,KAAKqmB,MAAMiX,oBAAqB,EAChCj3B,EAAOrG,KAAK00C,gBACZ10C,KAAKqmB,MAAMiX,mBAAqBwb,EAI9B94C,KAAKqmB,MAAMiX,sBAETt9B,KAAK4gC,MAAL,KACC5gC,KAAK4gC,MAAL,KAAyB,KAAA5gC,KAAKujC,YAAYl9B,MAI7C,OADArG,KAAK6sC,OAAL,IACOxmC,EAGPrG,KAAKojC,IAAL,GAEH,CAsBD,OAnBEmS,EADElvC,EACIrG,KAAKw1C,4BAA4B,CACrCx1C,KAAKm7C,mCAAmC90C,KAGpCrG,KAAKw1C,8BAGbjyC,EAAKse,OAAS0zB,EAAI1zB,OAClBte,EAAKyb,KAAOu2B,EAAIv2B,KAChBzb,EAAKvD,KAAOu1C,EAAI1nB,MAEhB7tB,KAAK6sC,OAAL,IAEA7sC,KAAK6sC,OAAL,IAEAtpC,EAAKkyC,WAAaz1C,KAAK00C,gBAEvBnxC,EAAKuf,eAAiB,KAEf9iB,KAAK6jB,WAAWtgB,EAAM,0BAE/B,KAAK,IACH,OAAOvD,KAAK0gB,aACV1gB,KAAKqmB,MAAMziB,MACX,+BAGJ,KAAK,GACL,KAAK,GAGH,OAFAL,EAAKK,MAAQ5D,KAAK4gC,MAAlB,IACA5gC,KAAKu0B,OACEv0B,KAAK6jB,WACVtgB,EACA,gCAGJ,KAAK,GACH,GAAyB,MAArBvD,KAAKqmB,MAAMziB,MAAe,CAE5B,GADA5D,KAAKu0B,OACDv0B,KAAK4gC,MAAL,KACF,OAAO5gC,KAAKs7C,oBACTt7C,KAAKqmB,MAAMziB,MACZ,8BACAL,GAIJ,GAAIvD,KAAK4gC,MAAL,KACF,OAAO5gC,KAAKs7C,oBACTt7C,KAAKqmB,MAAMziB,MACZ,8BACAL,GAIJ,MAAMvD,KAAKqlB,MAAMuqB,GAAWgD,6BAA8B,CACxDttB,GAAItlB,KAAKqmB,MAAM7B,UAElB,CAED,MAAMxkB,KAAKmX,aACb,KAAK,IACH,OAAOnX,KAAK0gB,aACV1gB,KAAKqmB,MAAMziB,MACX,+BAGJ,KAAK,IACH,OAAO5D,KAAK0gB,aACV1gB,KAAKqmB,MAAMziB,MACX,+BAGJ,KAAK,GAEH,OADA5D,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,sBAE/B,KAAK,GAEH,OADAvD,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,6BAE/B,KAAK,GAEH,OADAvD,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,sBAE/B,KAAK,GAEH,OADAvD,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,wBAE/B,KAAK,GACH,OAAOvD,KAAK66C,sBAEd,QACE,GAAI5oB,GAAejyB,KAAKqmB,MAAMhgB,MAAO,CACnC,MAAMa,EAAQqrB,GAAevyB,KAAKqmB,MAAMhgB,MAExC,OADArG,KAAKu0B,OACE5U,MAAM47B,iBAAiBh4C,EAA8B2D,E,CACvD,GAAIsqB,EAAkBxxB,KAAKqmB,MAAMhgB,MACtC,OAAIrG,KAAK+rC,aAAL,KACK/rC,KAAKi5C,yBAGPj5C,KAAKo7C,0BACV72B,EACAC,EACAjhB,EACAvD,KAAKm1C,mBAKb,MAAMn1C,KAAKmX,YACZ,CAEDqkC,uBACE,MAAMj3B,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,IAAIne,EAAOrG,KAAK86C,uBACZW,GAA4B,EAChC,OACGz7C,KAAK4gC,MAAL,IAA2B5gC,KAAK4gC,MAAjC,OACC5gC,KAAKusC,qBACN,CACA,MAAMhpC,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GAClCiB,EAAWzlB,KAAKojC,IAAtB,IACAqY,EAA4BA,GAA6Bh2B,EACzDzlB,KAAK6sC,OAAL,IACKpnB,GAAYzlB,KAAK4gC,MAAL,IACfr9B,EAAK0lC,YAAc5iC,EACnBrG,KAAKu0B,OACLluB,EAAOrG,KAAK6jB,WAAWtgB,EAAM,yBAE7BA,EAAKm4C,WAAar1C,EAClB9C,EAAKo4C,UAAY37C,KAAK00C,gBACtB10C,KAAK6sC,OAAL,GACI4O,GACFl4C,EAAKkiB,SAAWA,EAChBpf,EAAOrG,KAAK6jB,WAEVtgB,EACA,8BAGF8C,EAAOrG,KAAK6jB,WAEVtgB,EACA,qBAIP,CACD,OAAO8C,CACR,CAEDu1C,sBACE,MAAMr4C,EAAOvD,KAAK2jB,YAClB,OAAI3jB,KAAKojC,IAAL,KACF7/B,EAAKmyC,eAAiB11C,KAAK47C,sBACpB57C,KAAK6jB,WAAWtgB,EAAM,2BAEtBvD,KAAKw7C,sBAEf,CAEDK,qCACE,MAAMC,EAAQ97C,KAAK47C,sBACnB,IAAK57C,KAAKqmB,MAAMiX,oBAAsBt9B,KAAKojC,IAAL,IAAoB,CAExD,MAAM7/B,EAAOvD,KAAKwvC,YAAYsM,EAAMrsC,MAAOqsC,EAAM19B,IAAI3O,OAMrD,OALAlM,EAAKse,OAAS,CAAC7hB,KAAKm7C,mCAAmCW,IACvDv4C,EAAKyb,KAAO,KACZzb,EAAKvD,KAAO,KACZuD,EAAKkyC,WAAaz1C,KAAK00C,gBACvBnxC,EAAKuf,eAAiB,KACf9iB,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CACD,OAAOu4C,CACR,CAEDC,4BACE,MAAMx4C,EAAOvD,KAAK2jB,YAClB3jB,KAAKojC,IAAL,IACA,MAAM/8B,EAAOrG,KAAK67C,qCAClBt4C,EAAK8jB,MAAQ,CAAChhB,GACd,MAAOrG,KAAKojC,IAAL,IACL7/B,EAAK8jB,MAAM5hB,KAAKzF,KAAK67C,sCAEvB,OAA6B,IAAtBt4C,EAAK8jB,MAAMhiB,OACdgB,EACArG,KAAK6jB,WAAWtgB,EAAM,6BAC3B,CAEDy4C,qBACE,MAAMz4C,EAAOvD,KAAK2jB,YAClB3jB,KAAKojC,IAAL,IACA,MAAM/8B,EAAOrG,KAAK+7C,4BAClBx4C,EAAK8jB,MAAQ,CAAChhB,GACd,MAAOrG,KAAKojC,IAAL,IACL7/B,EAAK8jB,MAAM5hB,KAAKzF,KAAK+7C,6BAEvB,OAA6B,IAAtBx4C,EAAK8jB,MAAMhiB,OACdgB,EACArG,KAAK6jB,WAAWtgB,EAAM,sBAC3B,CAEDmxC,gBACE,MAAMD,EAAYz0C,KAAKqmB,MAAMgX,OAC7Br9B,KAAKqmB,MAAMgX,QAAS,EACpB,MAAMh3B,EAAOrG,KAAKg8C,qBAElB,OADAh8C,KAAKqmB,MAAMgX,OAASoX,EACbpuC,CACR,CAED2yC,uCACE,GAAI,MAAAh5C,KAAKqmB,MAAMhgB,MAAyC,MAArBrG,KAAKqmB,MAAMziB,MAAe,CAC3D,MAAM2gB,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtBjhB,EAAOvD,KAAKm1C,kBAClB,OAAOn1C,KAAK46C,qBAAqBr2B,EAAUC,EAAUjhB,EACtD,CACC,OAAOvD,KAAK00C,eAEf,CAEDiC,0BACE,MAAMpzC,EAAOvD,KAAK2jB,YAElB,OADApgB,EAAKmyC,eAAiB11C,KAAKu0C,2BACpBv0C,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAED6yC,mCACE6F,GAEA,MAAMvD,EAAQuD,EACVj8C,KAAKm1C,kBACLn1C,KAAKg3C,gCAMT,OALIh3C,KAAK4gC,MAAL,MAEF8X,EAAMhD,eAAiB11C,KAAK22C,0BAC5B32C,KAAKinB,iBAAiByxB,IAEjBA,CACR,CAEDwD,oBAAoB34C,GAKlB,OAJAA,EAAK0d,WAAWy0B,eAAiBnyC,EAAKmyC,eAEtC11C,KAAKinB,iBAAiB1jB,EAAK0d,WAAY1d,EAAKmyC,eAAet3B,IAAI1O,KAExDnM,EAAK0d,UACb,CAEDw3B,oBACE,IAAID,EAAW,KACf,OAAIx4C,KAAK4gC,MAAL,KACF4X,EAAWx4C,KAAK2jB,YACS,MAArB3jB,KAAKqmB,MAAMziB,MACb40C,EAAS1lC,KAAO,OAEhB0lC,EAAS1lC,KAAO,QAElB9S,KAAKu0B,OACEv0B,KAAK6jB,WAAW20B,EAAU,aAE5BA,CACR,CAMDn1B,kBACE9f,EACA44C,EACA54B,GAAoB,GAEpB,OAAI44B,EACKn8C,KAAKo8C,iCAAiC74C,GAAM,IACjDoc,MAAM0D,kBAAkB9f,GAAM,EAAMggB,KAIjC5D,MAAM0D,kBAAkB9f,GAAM,EAAOggB,EAC7C,CAED84B,2BAME94C,EAAiB8C,EAAiBkd,GAAoB,GACtD,GAAIvjB,KAAK4gC,MAAL,IAAsB,CACxB,MAAMwU,EAAWp1C,KAAK2jB,aAGpByxB,EAASM,eAETnyC,EAAKwxC,WACH/0C,KAAK80C,uCAETvxC,EAAKkyC,WAAaL,EAASM,eACvB11C,KAAK6jB,WAAWuxB,EAAU,kBAC1B,IACL,CAED,OAAOz1B,MAAM08B,2BAA2B94C,EAAM8C,EAAMkd,EACrD,CAGD+4B,eAAeztC,EAAyBqT,GAEtC,GAAIliB,KAAKqmB,MAAMoN,QAAUzzB,KAAK+rC,aAAL,KAAkC,CACzD,MAAMxI,EAAYvjC,KAAKujC,YACvB,GAAI7R,EAA2B6R,EAAUl9B,MAAO,CAC9C,MAAM9C,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAK63C,mBAAmBt0C,EAChC,C,MACI,GAAIvD,KAAKo0C,oBAAsBp0C,KAAK+rC,aAAL,KAA6B,CACjE,MAAMxoC,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAKu8C,yBAAyBh5C,EACtC,CACD,MAAM8d,EAAO1B,MAAM28B,eAAeztC,EAASqT,GAK3C,YAHwBhU,IAApBlO,KAAKk0C,YAA6Bl0C,KAAK8hB,iBAAiBT,KAC1DrhB,KAAKk0C,WAAa,MAEb7yB,CACR,CAGDm7B,yBACEj5C,EACAk5C,GAEA,GAAkB,eAAdA,EAAKp2C,KACP,GAAkB,YAAdo2C,EAAKj0C,MACP,GACExI,KAAK4gC,MACLpP,KAAAA,EAAkBxxB,KAAKqmB,MAAMhgB,OAC7BrG,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,IAGA,OAAO5gC,KAAK21C,iBAAiBpyC,QAE1B,GAAIiuB,EAAkBxxB,KAAKqmB,MAAMhgB,MAAO,CAC7C,GAAkB,cAAdo2C,EAAKj0C,KAEP,OAAOxI,KAAK63C,mBAAmBt0C,GAC1B,GAAkB,SAAdk5C,EAAKj0C,KAEd,OAAOxI,KAAK62C,mBAAmBtzC,GAC1B,GAAkB,WAAdk5C,EAAKj0C,KAEd,OAAOxI,KAAK82C,oBAAoBvzC,GAAM,EAEzC,CAGH,OAAOoc,MAAM68B,yBAAyBj5C,EAAMk5C,EAC7C,CAGDC,+BACE,MAAM,KAAEr2C,GAASrG,KAAKqmB,MACtB,OACE0L,GAAmC1rB,IAClCrG,KAAKo0C,oBAA+B,MAAT/tC,GAEpBrG,KAAKqmB,MAAMiY,YAEd3e,MAAM+8B,8BACd,CAEDC,2BACE,MAAM,KAAEt2C,GAASrG,KAAKqmB,MACtB,OACE0L,GAAmC1rB,IAClCrG,KAAKo0C,oBAA+B,MAAT/tC,EAErBrG,KAAKqmB,MAAMiY,YAGb3e,MAAMg9B,0BACd,CAEDC,+BACE,GAAI58C,KAAKo0C,oBAAsBp0C,KAAK+rC,aAAL,KAA6B,CAC1D,MAAMxoC,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAKu8C,yBAAyBh5C,EACtC,CACD,OAAOoc,MAAMi9B,8BACd,CAEDC,iBACEJ,EACAl4B,EACAC,EACAC,GAEA,IAAKzkB,KAAK4gC,MAAV,IAA8B,OAAO6b,EAErC,GAAIz8C,KAAKqmB,MAAM+W,uBAAwB,CACrC,MAAM+O,EAASnsC,KAAK6jC,oBAIpB,GACE,KAAAsI,GACW,KAAXA,GADA,KAEAA,GACW,KAAXA,EAIA,OADAnsC,KAAK88C,2BAA2Br4B,GACzBg4B,CAEV,CAEDz8C,KAAK6sC,OAAL,IACA,MAAMxmB,EAAQrmB,KAAKqmB,MAAM/H,QACnBy+B,EAAoB/8C,KAAKqmB,MAAM6W,UAC/B35B,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GACxC,IAAI,WAAEw4B,EAAF,OAAcC,GAAWj9C,KAAKk9C,iCAC7BC,EAAO1b,GAAWzhC,KAAKo9C,wBAAwBJ,GAEpD,GAAIC,GAAUxb,EAAQp8B,OAAS,EAAG,CAChC,MAAM63B,EAAY,IAAI6f,GAEtB,GAAItb,EAAQp8B,OAAS,EAAG,CACtBrF,KAAKqmB,MAAQA,EACbrmB,KAAKqmB,MAAM6W,UAAYA,EAEvB,IAAK,IAAI1sB,EAAI,EAAGA,EAAIixB,EAAQp8B,OAAQmL,IAClC0sB,EAAUz3B,KAAKg8B,EAAQjxB,GAAGf,SAGzButC,aAAYC,UAAWj9C,KAAKk9C,kCAC9BC,EAAO1b,GAAWzhC,KAAKo9C,wBAAwBJ,EACjD,CAEGC,GAAUE,EAAM93C,OAAS,GAM3BrF,KAAKqlB,MAAMuqB,GAAWC,0BAA2B,CAC/CvqB,GAAIe,EAAM7B,WAIVy4B,GAA2B,IAAjBE,EAAM93C,SAClBrF,KAAKqmB,MAAQA,EACb6W,EAAUz3B,KAAK03C,EAAM,GAAG1tC,OACxBzP,KAAKqmB,MAAM6W,UAAYA,IACpB8f,aAAYC,UAAWj9C,KAAKk9C,iCAElC,CAaD,OAXAl9C,KAAKo9C,wBAAwBJ,GAAY,GAEzCh9C,KAAKqmB,MAAM6W,UAAY6f,EACvB/8C,KAAK6sC,OAAL,IAEAtpC,EAAK8vB,KAAOopB,EACZl5C,EAAKy5C,WAAaA,EAClBz5C,EAAK85C,UAAYr9C,KAAKo8C,iCAAiC74C,GAAM,IAC3DvD,KAAKs9C,sBAAiBpvC,OAAWA,KAG5BlO,KAAK6jB,WAAWtgB,EAAM,wBAC9B,CAED25C,gCAIEl9C,KAAKqmB,MAAM8W,0BAA0B13B,KAAKzF,KAAKqmB,MAAM5W,OAErD,MAAMutC,EAAah9C,KAAKu9C,0BAClBN,GAAUj9C,KAAK4gC,MAArB,IAIA,OAFA5gC,KAAKqmB,MAAM8W,0BAA0B53B,MAE9B,CAAEy3C,aAAYC,SACtB,CASDG,wBACE75C,EACAi6C,GAEA,MAAMp4C,EAAQ,CAAC7B,GACTk6C,EAAsC,GAE5C,MAAwB,IAAjBr4C,EAAMC,OAAc,CACzB,MAAM9B,EAAO6B,EAAMG,MACD,4BAAdhC,EAAK8C,MACH9C,EAAKuf,iBAAmBvf,EAAKkyC,WAG/Bz1C,KAAK09C,sBAAsBn6C,GAG3Bk6C,EAAOh4C,KAAKlC,GAEd6B,EAAMK,KAAKlC,EAAKsB,OACO,0BAAdtB,EAAK8C,OACdjB,EAAMK,KAAKlC,EAAKy5C,YAChB53C,EAAMK,KAAKlC,EAAK85C,WAEnB,CAED,OAAIG,GACFC,EAAOj4C,SAAQjC,GAAQvD,KAAK09C,sBAAsBn6C,KAC3C,CAACk6C,EAAQ,KAGX5J,GAAU4J,GAAQl6C,GACvBA,EAAKse,OAAO87B,OAAM7B,GAAS97C,KAAK6kB,aAAai3B,GAAO,MAEvD,CAED4B,sBAAsBn6C,GAAiC,MACrDvD,KAAK49C,iBAGHr6C,EAAKse,OAHP,SAIEte,EAAK4d,YAJP,EAIE08B,EAAYC,kBACA,GAGd99C,KAAK+4B,MAAMF,MAAMhE,GAAiBC,IAElCnV,MAAMo+B,YAAYx6C,GAAM,GAAO,GAC/BvD,KAAK+4B,MAAMD,MACZ,CAEDsjB,iCACE74C,EACAkc,GAEA,IAAIxT,EASJ,OARkE,IAA9DjM,KAAKqmB,MAAM8W,0BAA0BgF,QAAQ5+B,EAAKkM,QACpDzP,KAAKqmB,MAAM8W,0BAA0B13B,KAAKzF,KAAKqmB,MAAM5W,OACrDxD,EAASwT,IACTzf,KAAKqmB,MAAM8W,0BAA0B53B,OAErC0G,EAASwT,IAGJxT,CACR,CAED+xC,eACEz6C,EACAghB,EACAC,GAWA,GATAjhB,EAAOoc,MAAMq+B,eAAez6C,EAAMghB,EAAUC,GACxCxkB,KAAKojC,IAAL,MACF7/B,EAAKkiB,UAAW,EAIhBzlB,KAAKinB,iBAAiB1jB,IAGpBvD,KAAK4gC,MAAL,IAAsB,CACxB,MAAMqd,EAAej+C,KAAKwvC,YAAYjrB,EAAUC,GAIhD,OAHAy5B,EAAah9B,WAAa1d,EAC1B06C,EAAavI,eAAiB11C,KAAK22C,0BAE5B32C,KAAK6jB,WAAWo6B,EAAc,qBACtC,CAED,OAAO16C,CACR,CAED26C,wBAAwB36C,GAEL,sBAAdA,EAAK8C,OACiB,SAApB9C,EAAKgwC,YAA6C,WAApBhwC,EAAKgwC,aACvB,2BAAdhwC,EAAK8C,MACgB,SAApB9C,EAAKmzC,YACQ,yBAAdnzC,EAAK8C,MAAuD,SAApB9C,EAAKmzC,YAOhD/2B,MAAMu+B,wBAAwB36C,EAC/B,CAEDwiB,YACExiB,GAEA,MAAM46C,EAAOx+B,MAAMoG,YAAYxiB,GAO/B,MALgB,2BAAd46C,EAAK93C,MACS,yBAAd83C,EAAK93C,OAEL83C,EAAKzH,WAAayH,EAAKzH,YAAc,SAEhCyH,CACR,CAEDC,uBACE76C,GAEA,GAAIvD,KAAK+rC,aAAL,KAA6B,CAC/BxoC,EAAKmzC,WAAa,OAElB,MAAM2H,EAAkBr+C,KAAK2jB,YAG7B,OAFA3jB,KAAKu0B,OAEDv0B,KAAK4gC,MAAL,IAEFr9B,EAAK0iB,WAAajmB,KAAKs+C,uBACA,GAEvB3+B,MAAM4+B,gBAAgBh7C,GACf,MAIAvD,KAAK62C,mBAAmBwH,EAElC,CAAM,GAAIr+C,KAAK+rC,aAAL,KAA+B,CACxCxoC,EAAKmzC,WAAa,OAElB,MAAM2H,EAAkBr+C,KAAK2jB,YAI7B,OAHA3jB,KAAKu0B,OAGEv0B,KAAK82C,oBAAoBuH,GAAiB,EAClD,CAAM,GAAIr+C,KAAK+rC,aAAL,KAAkC,CAC3CxoC,EAAKmzC,WAAa,OAClB,MAAM2H,EAAkBr+C,KAAK2jB,YAG7B,OAFA3jB,KAAKu0B,OAEEv0B,KAAK63C,mBAAmBwG,E,CAC1B,GAAIr+C,KAAKo0C,oBAAsBp0C,KAAK+rC,aAAL,KAA6B,CACjExoC,EAAKmzC,WAAa,QAClB,MAAM2H,EAAkBr+C,KAAK2jB,YAG7B,OAFA3jB,KAAKu0B,OAEEv0B,KAAKu8C,yBAAyB8B,EACtC,CACC,OAAO1+B,MAAMy+B,uBAAuB76C,EAEvC,CAEDi7C,cAAcj7C,GACZ,QAAIoc,MAAM6+B,cAAcj7C,OAEpBvD,KAAK+rC,aAA0B,WAAA/rC,KAAKujC,YAAYl9B,QAClD9C,EAAKmzC,WAAa,OAClB12C,KAAKu0B,OACLv0B,KAAKu0B,QACE,EAIV,CAEDkqB,mCAAmCl7C,GACjC,MAAM,SAAEihB,GAAaxkB,KAAKqmB,MACpBq4B,EAAe/+B,MAAM8+B,mCAAmCl7C,GAI9D,OAHIm7C,GAAoC,SAApBn7C,EAAKmzC,YACvB12C,KAAKmX,WAAWqN,GAEXk6B,CACR,CAEDC,aACEp7C,EACAq7C,EACAC,GAEAl/B,MAAMg/B,aAAap7C,EAAMq7C,EAAaC,GAClC7+C,KAAK4gC,MAAL,MACFr9B,EAAKuf,eAAiB9iB,KAAKs1C,oCAE9B,CAEDwJ,iBACEr8B,EACAs8B,EACA14B,GAEA,MAAM,SAAE7B,GAAaxkB,KAAKqmB,MAC1B,GAAIrmB,KAAK+rC,aAAL,KAAgC,CAClC,GAAIpsB,MAAMq/B,6BAA6Bv8B,EAAWs8B,GAEhD,OAGFA,EAAO7G,SAAU,CAClB,CAEDv4B,MAAMm/B,iBAAiBr8B,EAAWs8B,EAAQ14B,GAEtC04B,EAAO7G,UAES,kBAAhB6G,EAAO14C,MACS,yBAAhB04C,EAAO14C,MACS,uBAAhB04C,EAAO14C,KAEPrG,KAAKqlB,MAAMuqB,GAAWK,oBAAqB,CAAE3qB,GAAId,IACxCu6B,EAAOn7C,OAChB5D,KAAKqlB,MAAMuqB,GAAWM,6BAA8B,CAClD5qB,GAAIy5B,EAAOn7C,QAIlB,CAEDq7C,WAAWnrB,GACT,MAAgB,aAATA,GAAgC,kBAATA,CAC/B,CAEDorB,eACE,MAAMprB,EAAOnU,MAAMylB,YACb+Z,EAAW,KAAOrrB,EAGnB9zB,KAAKi/C,WAAWnrB,IAAU9zB,KAAKqmB,MAAMgX,QACxCr9B,KAAKqlB,MAAMpG,EAAOrI,kBAAmB,CACnC0O,GAAItlB,KAAKqmB,MAAMwY,cACfjvB,eAAgBuvC,IAIpBn/C,KAAKqkC,YAAL,IAA0B8a,EAC3B,CAGD7a,iBAAiB9gC,GACf,MAAM+wB,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACpD,OAAa,MAAThb,GAA8C,MAAT+wB,EAChCv0B,KAAKqlC,SAAuB,MAEnCrlC,KAAKqmB,MAAMgX,QACV,KAAA75B,GAA2C,KAATA,EAG1BxD,KAAKqmB,MAAMgX,QAAmB,KAAT75B,EACjB,KAAT+wB,EACKv0B,KAAKqlC,SAAyB,MAGhCrlC,KAAKqlC,SAAsB,MAElChR,GAAgB7wB,EAAM+wB,EAAMv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,KAEnExe,KAAKqmB,MAAM7H,KAAO,EACXxe,KAAKk/C,gBAELv/B,MAAM2kB,iBAAiB9gC,GAbvBxD,KAAKqlC,SAAkB,KAAT7hC,EAAd,MAA8D,EAexE,CAEDqhB,aAAathB,EAAcuhB,GACzB,MAAkB,uBAAdvhB,EAAK8C,KACArG,KAAK6kB,aAAathB,EAAK0d,WAAY6D,GAEnCnF,MAAMkF,aAAathB,EAAMuhB,EAEnC,CAEDC,aAAaxhB,EAAcyhB,GAAiB,GAEvCA,GACa,yBAAdzhB,EAAK8C,MACc,uBAAnB9C,EAAK67C,KAAK/4C,OAEV9C,EAAK67C,KAAOp/C,KAAKk8C,oBAAoB34C,EAAK67C,OAE5Cz/B,MAAMoF,aAAaxhB,EAAMyhB,EAC1B,CAGD44B,iBACEyB,EACAvB,EACA94B,GAEA,IAAK,IAAIxU,EAAI,EAAGA,EAAI6uC,EAASh6C,OAAQmL,IAAK,CACxC,MAAMisC,EAAO4C,EAAS7uC,GACH,wBAAf,MAAAisC,OAAA,EAAAA,EAAMp2C,QACRg5C,EAAS7uC,GAAKxQ,KAAKk8C,oBAAoBO,GAE1C,CACD98B,MAAMi+B,iBAAiByB,EAAUvB,EAAkB94B,EACpD,CAIDs6B,iBACED,EACAE,GAEA,IAAK,IAAI/uC,EAAI,EAAGA,EAAI6uC,EAASh6C,OAAQmL,IAAK,OACxC,MAAMisC,EAAO4C,EAAS7uC,IAEpBisC,GACc,uBAAdA,EAAKp2C,MACL,SAACo2C,EAAKt7B,QAALq+B,EAAYz9B,iBACZs9B,EAASh6C,OAAS,IAAMk6C,GAEzBv/C,KAAKqlB,MAAMuqB,GAAW0C,kBAAmB,CACvChtB,GAAIm3B,EAAK/G,gBAGd,CAED,OAAO2J,CACR,CAEDI,eACEC,EACAC,EACAC,EACAn7B,GAEA,MAAMlhB,EAAOoc,MAAM8/B,eACjBC,EACAC,EACAC,EACAn7B,GAYF,OAJIk7B,IAAiB3/C,KAAKqmB,MAAM+W,wBAC9Bp9B,KAAKs/C,iBAAiB/7C,EAAKw3B,UAGtBx3B,CACR,CAEDmhB,YAAYre,EAAcw5C,EAA0Bj7B,GAClD,MACW,uBAATve,GACAsZ,MAAM+E,YAAYre,EAAMw5C,EAAiBj7B,EAE5C,CAGDd,mBAAmBvgB,GAKjB,OAJIvD,KAAK4gC,MAAL,MAEFr9B,EAAKmyC,eAAiB11C,KAAK22C,2BAEtBh3B,MAAMmE,mBAAmBvgB,EACjC,CAEDygB,0BACEzgB,GAMA,OAJIvD,KAAK4gC,MAAL,MAEFr9B,EAAKmyC,eAAiB11C,KAAK22C,2BAEtBh3B,MAAMqE,0BAA0BzgB,EACxC,CAGDu8C,gBACE,OAAO9/C,KAAK4gC,MAAgB,KAAAjhB,MAAMmgC,eACnC,CAGDC,kBACE,OAAO//C,KAAK4gC,MAAmB,KAAAjhB,MAAMogC,iBACtC,CAEDC,uBAAuBp+B,GACrB,OAAQ5hB,KAAK4gC,MAAL,KAAwBjhB,MAAMqgC,uBAAuBp+B,EAC9D,CAGDY,gBACEC,EACAb,EACAc,EACAlB,EACAmB,EACAC,GAmBA,GAjBKhB,EAAe42B,UAClBx4C,KAAKmX,WAAYyK,EAAe42B,SAASp6B,IAAI3O,cAEvCmS,EAAe42B,SACnBx4C,KAAK4gC,MAAL,MACFhf,EAAOkB,eAAiB9iB,KAAKs1C,qCAG/B31B,MAAM6C,gBACJC,EACAb,EACAc,EACAlB,EACAmB,EACAC,GAGEhB,EAAOC,QAAUc,EAAe,CAClC,MAAMd,EAASD,EAAOC,OAClBA,EAAOxc,OAAS,GAAKrF,KAAKigD,YAAYp+B,EAAO,KAC/C7hB,KAAKqlB,MAAMuqB,GAAWqC,6BAA8B,CAAE3sB,GAAI1D,GAG7D,MAAM,GAEW,qBAAhBA,EAAOvb,MACPsc,GAEAf,EAAOhe,MAAMie,OACb,CAEA,MAAMA,EAASD,EAAOhe,MAAMie,OACxBA,EAAOxc,OAAS,GAAKrF,KAAKigD,YAAYp+B,EAAO,KAC/C7hB,KAAKqlB,MAAMuqB,GAAWqC,6BAA8B,CAAE3sB,GAAI1D,GAE7D,CACF,CAEDs+B,uBACEz9B,EACAb,EACAc,EACAlB,GAEKI,EAAe42B,UAClBx4C,KAAKmX,WAAYyK,EAAe42B,SAASp6B,IAAI3O,cAEvCmS,EAAe42B,SACnBx4C,KAAK4gC,MAAL,MACFhf,EAAOkB,eAAiB9iB,KAAKs1C,qCAG/B31B,MAAMugC,uBAAuBz9B,EAAWb,EAAQc,EAAalB,EAC9D,CAGD2+B,gBAAgB58C,GAKd,GAJAoc,MAAMwgC,gBAAgB58C,GAClBA,EAAKic,YAAcxf,KAAK4gC,MAAL,MACrBr9B,EAAK68C,oBAAsBpgD,KAAK43C,uCAE9B53C,KAAK+rC,aAAL,KAAmC,CACrC/rC,KAAKu0B,OACL,MAAM8rB,EAAwC98C,EAAK2zC,WAAa,GAChE,EAAG,CACD,MAAM3zC,EAAOvD,KAAK2jB,YAClBpgB,EAAK4f,GAAKnjB,KAAKg3C,+BAA0C,GACrDh3C,KAAK4gC,MAAL,IACFr9B,EAAKuf,eAAiB9iB,KAAK43C,sCAE3Br0C,EAAKuf,eAAiB,KAExBu9B,EAAY56C,KAAKzF,KAAK6jB,WAAWtgB,EAAM,mB,OAChCvD,KAAKojC,IATd,IAUD,CACF,CAEDkd,wBAAwB1+B,GACtBjC,MAAM2gC,wBAAwB1+B,GAC9B,MAAMC,EAAS7hB,KAAK2hB,6BAA6BC,GACjD,GAAIC,EAAOxc,OAAS,EAAG,CACrB,MAAMy2C,EAAQj6B,EAAO,GACjB7hB,KAAKigD,YAAYnE,IAA0B,QAAhBl6B,EAAO9O,KACpC9S,KAAKqlB,MAAMuqB,GAAWwB,0BAA2B,CAAE9rB,GAAIw2B,IAC9C97C,KAAKigD,YAAYnE,IAC1B97C,KAAKqlB,MAAMuqB,GAAWkC,0BAA2B,CAAExsB,GAAIw2B,GAE1D,CACF,CAEDyE,gCACEh9C,GAEAA,EAAKi1C,SAAWx4C,KAAKy4C,mBACtB,CAGD+H,kBACEt8B,EACAK,EACAC,EACA9B,EACAlB,EACA2C,EACAC,EACAK,GAOA,IAAI3B,EALCoB,EAAas0B,UAChBx4C,KAAKmX,WAAY+M,EAAas0B,SAASp6B,IAAI3O,cAErCyU,EAAas0B,SAKjBx4C,KAAK4gC,MAAgB,MAACxc,IACxBtB,EAAiB9iB,KAAKs1C,oCACjBt1C,KAAK4gC,MAAV,KAA4B5gC,KAAKmX,cAGnC,MAAMlL,EAAS0T,MAAM6gC,kBACnBt8B,EACAK,EACAC,EACA9B,EACAlB,EACA2C,EACAC,EACAK,GAOF,OAHI3B,KACD7W,EAAOrI,OAASqI,GAAQ6W,eAAiBA,GAErC7W,CACR,CAEDw0C,6BAA6B3E,GAuB3B,OAtBI97C,KAAKojC,IAAL,MACiB,eAAf0Y,EAAMz1C,MACRrG,KAAKqlB,MAAMuqB,GAAWiC,kBAAmB,CAAEvsB,GAAIw2B,IAE7C97C,KAAKigD,YAAYnE,IACnB97C,KAAKqlB,MAAMuqB,GAAWsC,0BAA2B,CAAE5sB,GAAIw2B,IAGxDA,EAA8Br2B,UAAW,GAExCzlB,KAAK4gC,MAAL,IAEFkb,EAAMpG,eAAiB11C,KAAK22C,0BACnB32C,KAAKigD,YAAYnE,IAC1B97C,KAAKqlB,MAAMuqB,GAAWoC,4BAA6B,CAAE1sB,GAAIw2B,IAGvD97C,KAAK4gC,MAAgB,KAAA5gC,KAAKigD,YAAYnE,IACxC97C,KAAKqlB,MAAMuqB,GAAWwC,mBAAoB,CAAE9sB,GAAIw2B,IAGlD97C,KAAKinB,iBAAiB60B,GACfA,CACR,CAED4E,kBACEn8B,EACAC,EACA46B,GAEA,MAAM77C,EAAOoc,MAAM+gC,kBAAkBn8B,EAAUC,EAAU46B,GAYzD,MATgB,sBAAd77C,EAAK8C,MACL9C,EAAKmyC,gBACLnyC,EAAK00C,MAAMxoC,MAAQlM,EAAKmyC,eAAejmC,OAEvCzP,KAAKqlB,MAAMuqB,GAAWyC,sBAAuB,CAC3C/sB,GAAI/hB,EAAKmyC,iBAINnyC,CACR,CAEDo9C,yBAAyBp9C,GACvB,OAAK+vC,GAAkB/vC,GAIhBiwC,GAAqBxzC,KAAKqmB,MAAMhgB,MAH9BsZ,MAAMghC,yBAAyBp9C,EAIzC,CAEDq9C,0BAKEr9C,EAA2Bs9C,EAAsBx6C,GACjDw6C,EAAUC,MAAQxN,GAAkB/vC,GAChCvD,KAAKg3C,+BACW,GACI,GAEpBh3C,KAAKm1C,kBAET5xC,EAAK0iB,WAAWxgB,KAAKzF,KAAK+gD,sBAAsBF,EAAWx6C,GAC5D,CAGD26C,iCAAiCz9C,GAC/BA,EAAKgwC,WAAa,QAElB,IAAIzgC,EAAO,KAMX,GALI9S,KAAK4gC,MAAL,IACF9tB,EAAO,SACE9S,KAAK+rC,aAAL,OACTj5B,EAAO,QAELA,EAAM,CACR,MAAMmoC,EAAKj7C,KAAKujC,aACV,KAAEl9B,GAAS40C,EAGJ,SAATnoC,GAA4B,KAATzM,GAErBrG,KAAKmX,WAAW,KAAM8jC,EAAG50C,OAIzBmtC,GAAqBntC,IAArB,IACAA,GACS,KAATA,KAEArG,KAAKu0B,OACLhxB,EAAKgwC,WAAazgC,EAErB,CAED,OAAO6M,MAAMqhC,iCAAiCz9C,EAC/C,CAGD09C,qBACEJ,EACAK,EACAC,EAEAC,EAEAnoB,GAEA,MAAMooB,EAAaR,EAAUS,SAE7B,IAAIC,EAAoB,KACA,eAApBF,EAAWh7C,OACW,SAApBg7C,EAAW74C,KACb+4C,EAAoB,OACS,WAApBF,EAAW74C,OACpB+4C,EAAoB,WAIxB,IAAIz8B,GAAY,EAChB,GAAI9kB,KAAK+rC,aAAwB,MAAC/rC,KAAKosC,sBAAsB,MAAO,CAClE,MAAMoV,EAAWxhD,KAAKm1C,iBAAgB,GAEd,OAAtBoM,GACC7vB,EAA2B1xB,KAAKqmB,MAAMhgB,OAQvCw6C,EAAUS,SAAWD,EACrBR,EAAUtN,WAAa,KACvBsN,EAAUC,MAAQ9gD,KAAKm1C,oBAPvB0L,EAAUS,SAAWE,EACrBX,EAAUtN,WAAagO,EACvBV,EAAUC,MAAQ9R,GAAgBwS,GAOrC,KAAM,CACL,GACwB,OAAtBD,GACA7vB,EAA2B1xB,KAAKqmB,MAAMhgB,MAGtCw6C,EAAUS,SAAWthD,KAAKm1C,iBAAgB,GAC1C0L,EAAUtN,WAAagO,MAClB,CACL,GAAIL,EAEF,MAAMlhD,KAAKqlB,MAAMpG,EAAOxJ,sBAAuB,CAC7C6P,GAAIu7B,EACJnrC,WAAY2rC,EAAWz9C,QAI3Bi9C,EAAUS,SAAWD,EACrBR,EAAUtN,WAAa,IACxB,CAEGvzC,KAAKqsC,cAAL,IACFwU,EAAUC,MAAQ9gD,KAAKm1C,mBAEvBrwB,GAAY,EACZ+7B,EAAUC,MAAQ9R,GAAgB6R,EAAUS,UAE/C,CAED,MAAMG,EAAwBnO,GAAkBuN,GAyBhD,OAvBIM,GAAsBM,GACxBzhD,KAAKqlB,MAAMuqB,GAAWyB,oCAAqC,CACzD/rB,GAAIu7B,KAIJM,GAAsBM,IACxBzhD,KAAK+3C,kBACH8I,EAAUC,MAAMt4C,KAChBq4C,EAAUC,MAAM1iC,IAAI3O,OACF,IAIlBqV,GAAcq8B,GAAuBM,GACvCzhD,KAAK0hD,kBACHb,EAAUC,MAAMt4C,KAChBq4C,EAAUziC,IAAI3O,OACd,GACA,GAIGzP,KAAK+gD,sBAAsBF,EAAW,kBAC9C,CAEDc,mBACE,OAAQ3hD,KAAKqmB,MAAMhgB,MACjB,KAAK,GAEH,OAAOrG,KAAKm1C,iBAA8B,GAC5C,QACE,OAAOx1B,MAAMgiC,mBAElB,CAGDC,oBACEr+C,EACAs+C,GAGA,MAAM/uC,EAAOvP,EAAKuP,KACL,QAATA,GAA2B,QAATA,GAAkB9S,KAAK4gC,MAAL,MACtCr9B,EAAKuf,eAAiB9iB,KAAKs1C,qCAE7B31B,MAAMiiC,oBAAoBr+C,EAAMs+C,EACjC,CAGDC,WACE3D,EACArrC,GAEA6M,MAAMmiC,WAAW3D,EAAMrrC,GACnB9S,KAAK4gC,MAAL,MAEFud,EAAKh7B,GAAGuyB,eAAiB11C,KAAK22C,0BAC9B32C,KAAKinB,iBAAiBk3B,EAAKh7B,IAE9B,CAGD4+B,kCACEx+C,EACAoK,GAEA,GAAI3N,KAAK4gC,MAAL,IAAsB,CACxB,MAAMkY,EAAwB94C,KAAKqmB,MAAMiX,mBACzCt9B,KAAKqmB,MAAMiX,oBAAqB,EAEhC/5B,EAAKkyC,WAAaz1C,KAAK22C,0BACvB32C,KAAKqmB,MAAMiX,mBAAqBwb,CACjC,CAED,OAAOn5B,MAAMoiC,kCAAkCx+C,EAAMoK,EACtD,CAGDq0C,wBACE,OAAOhiD,KAAK4gC,MAAmB,KAAAjhB,MAAMqiC,uBACtC,CAYD1E,iBACE74B,EACAw9B,GACc,MACd,IAEIC,EAFA77B,EAAQ,KAIZ,GACErmB,KAAK4lB,UAAU,SACd5lB,KAAK4gC,MAAL,MAA8B5gC,KAAK4gC,MADpC,KAEA,CAUA,GATAva,EAAQrmB,KAAKqmB,MAAM/H,QAEnB4jC,EAAMliD,KAAK8sC,UACT,IAAMntB,MAAM29B,iBAAiB74B,EAAqBw9B,IAClD57B,IAKG67B,EAAI/0C,MAAO,OAAO+0C,EAAI3+C,KAK3B,MAAM,QAAEsL,GAAY7O,KAAKqmB,MACnB87B,EAAiBtzC,EAAQA,EAAQxJ,OAAS,GAC5C88C,IAAmBvvB,EAAGrL,QAAU46B,IAAmBvvB,EAAGnL,QACxD5Y,EAAQtJ,KAEX,CAED,GAAI,SAAA28C,IAAA,EAAK/0C,OAASnN,KAAK4gC,MAAL,IAAmB,SAGnC,IAAI9d,EAFJuD,EAAQA,GAASrmB,KAAKqmB,MAAM/H,QAI5B,MAAM+L,EAAQrqB,KAAK8sC,UAASsV,IAAS,MACnCt/B,EAAiB9iB,KAAKs1C,oCAEtB,MAAM+M,EAAkBriD,KAAKo8C,iCAC3Bt5B,GACA,KACE,MAAM7W,EAAS0T,MAAM29B,iBACnB74B,EACAw9B,GAKF,OAFAjiD,KAAKyvC,2BAA2BxjC,EAAQ6W,GAEjC7W,CAAP,IAMJ,SAAIo2C,EAAgBlhC,QAAhBmhC,EAAuBvgC,eAAeqgC,IAK1C,MAAM3F,EAAOz8C,KAAKuiD,8BAA8BF,GAOhD,MALkB,4BAAd5F,EAAKp2C,MAAoC+7C,IAE7C3F,EAAK35B,eAAiBA,EACtB9iB,KAAKyvC,2BAA2BgN,EAAM35B,GAE/Bu/B,CAAP,GACCh8B,GAEH,IAAIg8B,EAIO,KAEX,GACEh4B,EAAM9mB,MAGJ,4BADFvD,KAAKuiD,8BAA8Bl4B,EAAM9mB,MAAM8C,KAE/C,CACA,IAAKgkB,EAAMld,QAAUkd,EAAM+iB,QAWzB,OARI/iB,EAAM9mB,KAAKi/C,OAEbxiD,KAAKqlB,MACHuqB,GAAWkD,gDACX,CAAExtB,GAAIxC,IAIHuH,EAAM9mB,KAIf8+C,EAAkBh4B,EAAM9mB,IACzB,CAQD,YAAI2+C,IAAAO,EAAKl/C,KAGP,OADAvD,KAAKqmB,MAAQ67B,EAAIhV,UACVgV,EAAI3+C,KAGb,GAAI8+C,EAGF,OADAriD,KAAKqmB,MAAQgE,EAAM6iB,UACZmV,EAGT,UAAIH,EAAAA,IAAAQ,EAAKvV,OAAQ,MAAM+U,EAAI/0C,MAC3B,GAAIkd,EAAM8iB,OAAQ,MAAM9iB,EAAMld,MAG9B,MAAMnN,KAAKqlB,MAAMuqB,GAAWiD,kCAAmC,CAC7DvtB,GAAIxC,GAEP,CAED,OAAOnD,MAAM29B,iBAAiB74B,EAAqBw9B,EACpD,CAGDU,WACEp/C,GAEA,GAAIvD,KAAK4gC,MAAL,IAAsB,CAExB,MAAM30B,EAASjM,KAAK8sC,UAAS,KAC3B,MAAMgM,EAAwB94C,KAAKqmB,MAAMiX,mBACzCt9B,KAAKqmB,MAAMiX,oBAAqB,EAEhC,MAAM8X,EAAWp1C,KAAK2jB,YAatB,OAVEyxB,EAASM,eAETnyC,EAAKwxC,WACH/0C,KAAK80C,uCAET90C,KAAKqmB,MAAMiX,mBAAqBwb,EAE5B94C,KAAKusC,sBAAsBvsC,KAAKmX,aAC/BnX,KAAK4gC,MAAV,KAA2B5gC,KAAKmX,aAEzBi+B,CAAP,IAGF,GAAInpC,EAAOkhC,OAAQ,OAAO,KAGtBlhC,EAAOkB,QAAOnN,KAAKqmB,MAAQpa,EAAOihC,WAItC3pC,EAAKkyC,WAAaxpC,EAAO1I,KAAKmyC,eAC1B11C,KAAK6jB,WAAW5X,EAAO1I,KAAM,kBAC7B,IACL,CAED,OAAOoc,MAAMgjC,WAAWp/C,EACzB,CAEDq/C,iBAAiB/gC,GACf,OAAO7hB,KAAK4gC,MAAL,KAAwBjhB,MAAMijC,iBAAiB/gC,EACvD,CAEDghC,2BACEt/C,EACAse,IAEkE,IAA9D7hB,KAAKqmB,MAAM8W,0BAA0BgF,QAAQ5+B,EAAKkM,OACpDlM,EAAKse,OAASA,EAEdlC,MAAMkjC,2BAA2Bt/C,EAAMse,EAE1C,CAEDk8B,YACEx6C,EACAu/C,EACAC,EACAC,GAA6B,GAE7B,IACED,IAC8D,IAA9D/iD,KAAKqmB,MAAM8W,0BAA0BgF,QAAQ5+B,EAAKkM,OAFpD,CAQA,IAAK,IAAIe,EAAI,EAAGA,EAAIjN,EAAKse,OAAOxc,OAAQmL,IAClCxQ,KAAKigD,YAAY18C,EAAKse,OAAOrR,KAAOA,EAAI,GAC1CxQ,KAAKqlB,MAAMuqB,GAAWuC,qBAAsB,CAAE7sB,GAAI/hB,EAAKse,OAAOrR,KAIlE,OAAOmP,MAAMo+B,YACXx6C,EACAu/C,EACAC,EACAC,EAbD,CAeF,CAEDC,mCAAmCC,GACjC,OAAOvjC,MAAMsjC,mCACXC,IAAkE,IAApDljD,KAAKqmB,MAAM6W,UAAUiF,QAAQniC,KAAKqmB,MAAM5W,OAEzD,CAED0zC,gBACEh9B,EACA5B,EACAC,EACA4B,GAEA,GACgB,eAAdD,EAAK9f,MACS,UAAd8f,EAAK3d,OACuC,IAA5CxI,KAAKqmB,MAAM6W,UAAUiF,QAAQ5d,GAC7B,CACAvkB,KAAKu0B,OAEL,MAAMhxB,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GACxCjhB,EAAKmiB,OAASS,EACd5iB,EAAKtB,UAAY0d,MAAMyjC,6BAAN,IAA8C,GAC/Dj9B,EAAOnmB,KAAK6jB,WAAWtgB,EAAM,iBAC9B,MAAM,GACS,eAAd4iB,EAAK9f,MACS,UAAd8f,EAAK3d,MACLxI,KAAK4gC,MAAL,IACA,CACA,MAAMva,EAAQrmB,KAAKqmB,MAAM/H,QACnB+L,EAAQrqB,KAAK8sC,UACjBsV,GACEpiD,KAAKqjD,kCAAkC9+B,EAAUC,IACjD49B,KACF/7B,GAKF,IAAKgE,EAAMld,QAAUkd,EAAM+iB,QAAS,OAAO/iB,EAAM9mB,KAEjD,MAAM0I,EAASjM,KAAK8sC,UAClB,IAAMntB,MAAMwjC,gBAAgBh9B,EAAM5B,EAAUC,EAAU4B,IACtDC,GAGF,GAAIpa,EAAO1I,OAAS0I,EAAOkB,MAAO,OAAOlB,EAAO1I,KAEhD,GAAI8mB,EAAM9mB,KAGR,OAFAvD,KAAKqmB,MAAQgE,EAAM6iB,UAEZ7iB,EAAM9mB,KAGf,GAAI0I,EAAO1I,KAET,OADAvD,KAAKqmB,MAAQpa,EAAOihC,UACbjhC,EAAO1I,KAGhB,MAAM8mB,EAAMld,OAASlB,EAAOkB,KAC7B,CAED,OAAOwS,MAAMwjC,gBAAgBh9B,EAAM5B,EAAUC,EAAU4B,EACxD,CAEDF,eACEC,EACA5B,EACAC,EACA4B,EACAk9B,GAEA,GAAItjD,KAAK4gC,MAAL,KAA8B5gC,KAAKujD,sBAAuB,CAE5D,GADAD,EAAeh9B,qBAAsB,EACjCF,EAEF,OADAk9B,EAAe98B,MAAO,EACfL,EAETnmB,KAAKu0B,OACL,MAAMhxB,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAOF,OALAjhB,EAAKmiB,OAASS,EACd5iB,EAAKigD,cAAgBxjD,KAAK43C,sCAC1B53C,KAAK6sC,OAAL,IACAtpC,EAAKtB,UAAYjC,KAAKojD,6BAAL,IAA6C,GAC9D7/C,EAAKkiB,UAAW,EACTzlB,KAAKulB,qBAAqBhiB,GAAqB,EACvD,CAAM,IAAK6iB,GAAWpmB,KAAKm0C,oBAAsBn0C,KAAK4gC,MAAL,IAAmB,CACnE,MAAMr9B,EAAOvD,KAAKwvC,YAEhBjrB,EAAUC,GACZjhB,EAAKmiB,OAASS,EAEd,MAAMla,EAASjM,KAAK8sC,UAAS,KAC3BvpC,EAAKigD,cACHxjD,KAAK+4C,+CACP/4C,KAAK6sC,OAAL,IACAtpC,EAAKtB,UAAY0d,MAAMyjC,6BAAN,IAA8C,GAC3DE,EAAeh9B,sBAChB/iB,EAA0CkiB,UAAW,GAEjDzlB,KAAKulB,qBACVhiB,EACA+/C,EAAeh9B,wBAInB,GAAIra,EAAO1I,KAET,OADI0I,EAAOkB,QAAOnN,KAAKqmB,MAAQpa,EAAOihC,WAC/BjhC,EAAO1I,IAEjB,CAED,OAAOoc,MAAMuG,eACXC,EACA5B,EACAC,EACA4B,EACAk9B,EAEH,CAEDG,eAAelgD,GACboc,MAAM8jC,eAAelgD,GAErB,IAAImgD,EAAQ,KACR1jD,KAAKm0C,oBAAsBn0C,KAAK4gC,MAAL,MAC7B8iB,EAAQ1jD,KAAK8sC,UAAS,IACpB9sC,KAAK+4C,iDACLx1C,MAEJA,EAAKigD,cAAgBE,CACtB,CAEDL,kCACE9+B,EACAC,GAEA,MAAMjhB,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAGF,GADAxkB,KAAK4hD,oBAAoBr+C,GACpBvD,KAAK2iD,WAAWp/C,GACrB,OAAOoc,MAAMgkC,qBACXpgD,OACa2K,GACC,EAEjB,CAEDu3B,sBAAsBjiC,GACpB,MAAM+wB,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GACpD,GACE,KAAAhb,GACS,KAAT+wB,GACAv0B,KAAKqmB,MAAMkX,eAKX,OAHAv9B,KAAKqmB,MAAMkX,gBAAiB,EAC5Bv9B,KAAKqmB,MAAM7H,KAAO,OAClBxe,KAAKmjC,YAIPxjB,MAAM8lB,sBAAsBjiC,EAC7B,CAEDmiC,mBAAmBniC,GACjB,MAAM+wB,EAAOv0B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAEzC,MAAThb,GACS,MAAT+wB,EAOF5U,MAAMgmB,mBAAmBniC,GAJvBxD,KAAKqlC,SAAL,EAA4B,EAK/B,CAEDue,cAAclkC,EAAcmkC,GAC1B,MAAMC,EAAWnkC,MAAMikC,cAAclkC,EAAMmkC,GAM3C,OALI7jD,KAAKqmB,MAAMkX,gBACbv9B,KAAKqlB,MAAMuqB,GAAWsD,wBAAyB,CAC7C5tB,GAAItlB,KAAKqmB,MAAMwY,gBAGZilB,CACR,CAEDvf,mBACE,GAAIvkC,KAAK4lB,UAAU,iBAAmB5lB,KAAK+jD,kBAA3C,CACE,GAAI/jD,KAAKqmB,MAAMkX,eACb,MAAMv9B,KAAKqlB,MAAMuqB,GAAWgC,kBAAmB,CAC7CtsB,GAAItlB,KAAKqmB,MAAM7B,WAGnBxkB,KAAKgkD,2BACL,MAAMC,EAAcjkD,KAAK+jD,kBACrBE,IACFjkD,KAAKqmB,MAAM7H,KAAOylC,EAClBjkD,KAAKqmB,MAAMkX,gBAAiB,EAG/B,KAbD,CAeA,IAAIv9B,KAAKqmB,MAAMkX,eAWf,OAAO5d,MAAM4kB,mBAXb,CACE,MAAM70B,EAAM1P,KAAKi8B,MAAMkG,QAAQ,MAAOniC,KAAKqmB,MAAM7H,IAAM,GACvD,IAAa,IAAT9O,EACF,MAAM1P,KAAKqlB,MAAMpG,EAAOhD,oBAAqB,CAC3CqJ,GAAItlB,KAAKqmB,MAAMwY,gBAGnB7+B,KAAKqmB,MAAM7H,IAAM9O,EAAM,EAAI,CAE5B,CAXA,CAcF,CAEDq0C,kBACE,MAAM,IAAEvlC,GAAQxe,KAAKqmB,MACrB,IAAI69B,EAA4B,EAChC,MACE,CAAiCjd,GAAAA,GAAAA,SAE/BjnC,KAAKi8B,MAAMC,WAAW1d,EAAM0lC,IAG9BA,IAGF,MAAMC,EAAMnkD,KAAKi8B,MAAMC,WAAWgoB,EAA4B1lC,GACxD4lC,EAAMpkD,KAAKi8B,MAAMC,WAAWgoB,EAA4B1lC,EAAM,GAEpE,OAAY,KAAR2lC,GAAmC,KAARC,EACtBF,EAA4B,EAM7B,iBAHNlkD,KAAKi8B,MAAM+C,MACTklB,EAA4B1lC,EAC5B0lC,EAA4B1lC,EAAM,IAG7B0lC,EAA4B,GAEzB,KAARC,GAAmC,KAARC,GACtBF,CAGV,CAEDF,2BACE,MAAMt0C,EAAM1P,KAAKi8B,MAAMkG,QAAQ,KAAMniC,KAAKqmB,MAAM7H,KAChD,IAAa,IAAT9O,EACF,MAAM1P,KAAKqlB,MAAMpG,EAAOhD,oBAAqB,CAC3CqJ,GAAItlB,KAAKqmB,MAAMwY,eAGpB,CAIDwlB,yCACEjmC,GACA,SACEkyB,EADF,WAEED,IAMFrwC,KAAKqlB,MAAMuqB,GAAWQ,gCAAiC,CACrD9qB,GAAIlH,EACJiyB,aACAC,YAEH,CAEDgU,sCACElmC,EACAmmC,GAEA,OAAOvkD,KAAKqlB,MACTk/B,EAAY1T,aAEoB,WAA7B0T,EAAY1T,aACZjB,GAAWkB,uCACXlB,GAAWgB,wCAHXhB,GAAWmB,wCAFV,eAOHzrB,GAAIlH,GACDmmC,GAGR,CAEDC,wCACEpmC,GACA,SACEkyB,EADF,WAEED,IAMFrwC,KAAKqlB,MAAMuqB,GAAWsB,+BAAgC,CACpD5rB,GAAIlH,EACJkyB,WACAD,cAEH,CAEDoU,mDACElhD,GACA,SACE+sC,IAKFtwC,KAAKqlB,MAAMuqB,GAAWuB,0CAA2C,CAC/D7rB,GAAI/hB,EACJ+sC,YAEH,CAEDoU,qBACE,MAAMlgC,EAAWxkB,KAAKqmB,MAAM7B,SACtBmgC,EAAY,IAAM3kD,KAAK4gC,MAAmB,KAAA5gC,KAAK4gC,MAArD,GACA,OAAQ5gC,KAAKqmB,MAAMhgB,MACjB,KAAK,IAAQ,CACX,MAAMu+C,EAAU5kD,KAAK4gB,oBAAoB5gB,KAAKqmB,MAAMziB,OACpD,OAAI+gD,IACK,CAAEt+C,KAAM,SAAU+X,IAAKwmC,EAAQxmC,IAAI3O,MAAO7L,MAAOghD,GAEnD,CAAEv+C,KAAM,UAAW+X,IAAKoG,EAChC,CACD,KAAK,IAAW,CACd,MAAMogC,EAAU5kD,KAAK2gB,mBAAmB3gB,KAAKqmB,MAAMziB,OACnD,OAAI+gD,IACK,CAAEt+C,KAAM,SAAU+X,IAAKwmC,EAAQxmC,IAAI3O,MAAO7L,MAAOghD,GAEnD,CAAEv+C,KAAM,UAAW+X,IAAKoG,EAChC,CACD,KAAK,GACL,KAAK,GAAW,CACd,MAAMogC,EAAU5kD,KAAK8gB,oBAAoB9gB,KAAK4gC,MAAL,KACzC,OAAI+jB,IACK,CACLt+C,KAAM,UACN+X,IAAKwmC,EAAQxmC,IAAI3O,MACjB7L,MAAOghD,GAGJ,CAAEv+C,KAAM,UAAW+X,IAAKoG,EAChC,CACD,QACE,MAAO,CAAEne,KAAM,UAAW+X,IAAKoG,GAEpC,CAEDqgC,oBAIE,MAAMzmC,EAAMpe,KAAKqmB,MAAM7B,SACjBrB,EAAKnjB,KAAKm1C,iBAAgB,GAC1BzW,EAAO1+B,KAAKojC,IAAL,IACTpjC,KAAK0kD,qBACL,CAAEr+C,KAAM,OAAiB+X,OAC7B,MAAO,CAAE+E,KAAIub,OACd,CAEDomB,kCACE1mC,EACAvP,EACAk2C,GAEA,MAAM,aAAElU,GAAiBhiC,EACJ,OAAjBgiC,GAGAA,IAAiBkU,GACnB/kD,KAAKskD,sCAAsClmC,EAAKvP,EAEnD,CAEDm2C,iBAAgB,SACd1U,EADc,aAEdO,IAaA,MAAMoU,EAAY,IAAI9nC,IAChB+nC,EAAU,CAEdC,eAAgB,GAEhBC,cAAe,GAEfC,cAAe,GAEfC,iBAAkB,IAEpB,IAAIC,GAAoB,EACxB,OAAQvlD,KAAK4gC,MAAL,GAAuB,CAC7B,GAAI5gC,KAAKojC,IAAL,IAAuB,CACzBmiB,GAAoB,EACpB,KACD,CACD,MAAMC,EAAaxlD,KAAK2jB,aAClB,GAAER,EAAF,KAAMub,GAAS1+B,KAAK6kD,oBACpBxU,EAAaltB,EAAG3a,KACtB,GAAmB,KAAf6nC,EACF,SAEE,SAAShd,KAAKgd,IAChBrwC,KAAKqlB,MAAMuqB,GAAWoB,sBAAuB,CAC3C1rB,GAAInC,EACJktB,aACAY,WAAYZ,EAAW,GAAGoV,cAAgBpV,EAAWrR,MAAM,GAC3DsR,aAGA2U,EAAUhxB,IAAIoc,IAChBrwC,KAAKqlB,MAAMuqB,GAAWW,wBAAyB,CAC7CjrB,GAAInC,EACJktB,aACAC,aAGJ2U,EAAU9rB,IAAIkX,GACd,MAAMxhC,EAAU,CAAEyhC,WAAUO,eAAcR,cAE1C,OADAmV,EAAWriC,GAAKA,EACRub,EAAKr4B,MACX,IAAK,UACHrG,KAAK8kD,kCACHpmB,EAAKtgB,IACLvP,EACA,WAEF22C,EAAW9mB,KAAOA,EAAK96B,MACvBshD,EAAQC,eAAe1/C,KACrBzF,KAAK6jB,WAAW2hC,EAAY,sBAE9B,MAEF,IAAK,SACHxlD,KAAK8kD,kCAAkCpmB,EAAKtgB,IAAKvP,EAAS,UAC1D22C,EAAW9mB,KAAOA,EAAK96B,MACvBshD,EAAQE,cAAc3/C,KACpBzF,KAAK6jB,WAAW2hC,EAAY,qBAE9B,MAEF,IAAK,SACHxlD,KAAK8kD,kCAAkCpmB,EAAKtgB,IAAKvP,EAAS,UAC1D22C,EAAW9mB,KAAOA,EAAK96B,MACvBshD,EAAQG,cAAc5/C,KACpBzF,KAAK6jB,WAAW2hC,EAAY,qBAE9B,MAEF,IAAK,UACH,MAAMxlD,KAAKskD,sCAAsC5lB,EAAKtgB,IAAKvP,GAE7D,IAAK,OACH,OAAQgiC,GACN,IAAK,UACH7wC,KAAKqkD,yCACH3lB,EAAKtgB,IACLvP,GAEF,MACF,IAAK,SACH7O,KAAKwkD,wCAAwC9lB,EAAKtgB,IAAKvP,GACvD,MACF,QACEq2C,EAAQI,iBAAiB7/C,KACvBzF,KAAK6jB,WAAW2hC,EAAY,yBAMjCxlD,KAAK4gC,MAAL,IACH5gC,KAAK6sC,OAAL,GAEH,CACD,MAAO,CAAEqY,UAASK,oBACnB,CAEDG,sBACEC,EACAL,GACA,SACEhV,IAKF,GAAkC,IAA9BqV,EAAmBtgD,OACrB,OAAOigD,EACF,GAAgC,IAA5BA,EAAiBjgD,OAC1B,OAAOsgD,EACF,GAAIL,EAAiBjgD,OAASsgD,EAAmBtgD,OAAQ,CAC9D,IAAK,MAAM05C,KAAU4G,EACnB3lD,KAAKykD,mDAAmD1F,EAAQ,CAC9DzO,aAGJ,OAAOgV,CACR,CACC,IAAK,MAAMvG,KAAUuG,EACnBtlD,KAAKykD,mDAAmD1F,EAAQ,CAC9DzO,aAGJ,OAAOqV,CAEV,CAEDC,2BAA0B,SACxBtV,IAIA,IAAKtwC,KAAKqsC,cAAV,KAAiC,OAAO,KAExC,IAAK7a,EAAkBxxB,KAAKqmB,MAAMhgB,MAChC,MAAMrG,KAAKqlB,MAAMuqB,GAAWe,uCAAwC,CAClErrB,GAAItlB,KAAKqmB,MAAM7B,SACf8rB,aAIJ,MAAM,MAAE1sC,GAAU5D,KAAKqmB,MAgBvB,OAfArmB,KAAKu0B,OAGO,YAAV3wB,GACU,WAAVA,GACU,WAAVA,GACU,WAAVA,GAEA5D,KAAKqlB,MAAMuqB,GAAWa,wBAAyB,CAC7CnrB,GAAItlB,KAAKqmB,MAAM7B,SACf8rB,WACAI,gBAAiB9sC,IAIdA,CACR,CAEDiiD,aAAatiD,EAAsB4f,GACjC,MAAMmtB,EAAWntB,EAAG3a,KACds9C,EAAU3iC,EAAG/E,IAAI3O,MACjBohC,EAAe7wC,KAAK4lD,0BAA0B,CAAEtV,aACtDtwC,KAAK6sC,OAAL,GACA,MAAM,QAAEqY,EAAF,kBAAWK,GAAsBvlD,KAAKglD,gBAAgB,CAC1D1U,WACAO,iBAIF,OAFAttC,EAAKgiD,kBAAoBA,EAEjB1U,GACN,IAAK,UAIH,OAHAttC,EAAKstC,cAAe,EACpBttC,EAAK2hD,QAAUA,EAAQC,eACvBnlD,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,mBAC/B,IAAK,SAIH,OAHAA,EAAKstC,cAAe,EACpBttC,EAAK2hD,QAAUA,EAAQE,cACvBplD,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,kBAC/B,IAAK,SAQH,OAPAA,EAAKstC,cAAe,EACpBttC,EAAK2hD,QAAUllD,KAAK0lD,sBAClBR,EAAQG,cACRH,EAAQI,iBACR,CAAEhV,aAEJtwC,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,kBAC/B,IAAK,SAGH,OAFAA,EAAK2hD,QAAUA,EAAQI,iBACvBtlD,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,kBAC/B,QAAS,CAEP,MAAMwiD,EAAQ,KACZxiD,EAAK2hD,QAAU,GACfllD,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,mBAE/BA,EAAKstC,cAAe,EAEpB,MAAMmV,EAAWd,EAAQC,eAAe9/C,OAClC4gD,EAAUf,EAAQE,cAAc//C,OAChC6gD,EAAUhB,EAAQG,cAAchgD,OAChC8gD,EAAejB,EAAQI,iBAAiBjgD,OAE9C,GAAK2gD,GAAaC,GAAYC,GAAYC,EAEnC,IAAKH,GAAaC,EAQlB,KAAKA,IAAYC,GAAWF,GAAYG,EAAc,CAC3D,IAAK,MAAMpH,KAAUmG,EAAQI,iBAC3BtlD,KAAKqkD,yCAAyCtF,EAAO3gC,IAAI3O,MAAO,CAC9D6gC,WACAD,WAAY0O,EAAO57B,GAAG3a,OAK1B,OAFAjF,EAAK2hD,QAAUA,EAAQC,eACvBnlD,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,kB,CACxB,IAAKyiD,IAAaE,GAAWD,GAAWE,EAAc,CAC3D,IAAK,MAAMpH,KAAUmG,EAAQI,iBAC3BtlD,KAAKwkD,wCAAwCzF,EAAO3gC,IAAI3O,MAAO,CAC7D6gC,WACAD,WAAY0O,EAAO57B,GAAG3a,OAK1B,OAFAjF,EAAK2hD,QAAUA,EAAQE,cACvBplD,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAKC,OAJAvD,KAAKqlB,MAAMuqB,GAAWY,6BAA8B,CAClDlrB,GAAIwgC,EACJxV,aAEKyV,GACR,CA3BC,OANAxiD,EAAK2hD,QAAUllD,KAAK0lD,sBAClBR,EAAQG,cACRH,EAAQI,iBACR,CAAEhV,aAEJtwC,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,iBA2B9B,CAnCC,OAAOwiD,GAoCV,EAEJ,CAEDxJ,yBAAyBh5C,GACvB,MAAM4f,EAAKnjB,KAAKm1C,kBAGhB,OAFA5xC,EAAK4f,GAAKA,EACV5f,EAAKsB,KAAO7E,KAAK6lD,aAAa7lD,KAAK2jB,YAAaR,GACzCnjB,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAGDggD,sBACE,MAAMhvB,EAAOv0B,KAAK0jC,iBAClB,GAAI,KAAA1jC,KAAKi8B,MAAMC,WAAW3H,GAA8B,CACtD,MAAM6xB,EAAYpmD,KAAKi8B,MAAMC,WAAW3H,EAAO,GAC/C,OACgB,KAAd6xB,GADF,KACsCA,CAEvC,CACD,OAAO,CACR,CAED7D,8BAA8Bh/C,GAC5B,MAAqB,uBAAdA,EAAK8C,KAAgC9C,EAAK0d,WAAa1d,CAC/D,GC7vHL,MAAM8iD,GAGF,CACFC,UAAW,KACXC,KAAM,IACNC,IAAK,IACLC,KAAM,IACN36B,GAAI,IACJC,GAAI,IACJ26B,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,OAAQ,IACRC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,KAAM,IACN7hC,MAAO,IACP8hC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,QAAS,IACTC,GAAI,IACJC,IAAK,IACLC,MAAO,IACPC,IAAK,IACLC,QAAS,IACTC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,QAAS,IACTC,GAAI,IACJC,IAAK,IACLC,OAAQ,IACRC,MAAO,IACPC,IAAK,IACLC,QAAS,IACTC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,SAAU,IACVC,MAAO,IACPC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,MAAO,IACPC,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPC,QAAS,IACTC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,OAAQ,IACRC,KAAM,IACNC,MAAO,IACPnN,MAAO,IACPoN,MAAO,IACPC,KAAM,IACNC,MAAO,IACPC,GAAI,IACJC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,OAAQ,IACRC,MAAO,IACPzvC,KAAM,IACN0vC,MAAO,IACPC,IAAK,IACLC,IAAK,IACLC,GAAI,IACJC,IAAK,IACLC,IAAK,IACLC,IAAK,IACLC,OAAQ,IACRC,IAAK,IACLC,KAAM,IACNC,MAAO,IACPC,GAAI,IACJC,MAAO,IACPC,GAAI,IACJC,GAAI,IACJC,IAAK,IACLC,IAAK,IACLC,KAAM,IACNC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,MAAO,IACPC,MAAO,IACPC,OAAQ,IACRC,OAAQ,IACRC,KAAM,IACNC,KAAM,IACNC,IAAK,IACLC,OAAQ,IACRC,MAAO,IACPC,OAAQ,IACRC,MAAO,KC3OHC,GAAYt3C,CAAe,MAAK,CACpCu3C,iBACE,+DACFC,yBAA0B,EAAGC,oBACoBA,+CAAAA,MACjDC,0BAA2B,iDAC3BC,6BACE,2GAEF96C,gBAAiB,EACfnE,aACAk/C,gBAKsBl/C,sBAAAA,uBAAgCk/C,cAAuBl/C,SAC/Em/C,oBACE,iEACFC,uBAAwB,6BACxBC,6BACE,qGAKJ,SAASC,GAAWnmD,GAClB,QAAOA,IACa,uBAAhBA,EAAOjK,MACW,uBAAhBiK,EAAOjK,KAEd,CAID,SAASqwD,GACPpmD,GAEA,GAAoB,kBAAhBA,EAAOjK,KACT,OAAOiK,EAAO9H,KAGhB,GAAoB,sBAAhB8H,EAAOjK,KACT,OAAOiK,EAAOqmD,UAAUnuD,KAAO,IAAM8H,EAAO9H,KAAKA,KAGnD,GAAoB,wBAAhB8H,EAAOjK,KACT,OACEqwD,GAAoBpmD,EAAOA,QAC3B,IACAomD,GAAoBpmD,EAAOu9B,UAK/B,MAAM,IAAIpnC,MAAM,6BAA+B6J,EAAOjK,KACvD,CAQD,OAAgBmZ,GACd,cAA6BA,EAG3Bo3C,eACE,IAAI/2B,EAAM,GACNE,EAAa//B,KAAKqmB,MAAM7H,IAC5B,OAAS,CACP,GAAIxe,KAAKqmB,MAAM7H,KAAOxe,KAAKqF,OACzB,MAAMrF,KAAKqlB,MAAM0wC,GAAUQ,uBAAwB,CACjDjxC,GAAItlB,KAAKqmB,MAAM7B,WAInB,MAAM8a,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAE5C,OAAQ8gB,GACN,KAAK,GACL,KAAK,IACH,OAAIt/B,KAAKqmB,MAAM7H,MAAQxe,KAAKqmB,MAAM5W,MAC5B,KAAA6vB,GAA6Bt/B,KAAKqmB,MAAMgY,sBACxCr+B,KAAKqmB,MAAM7H,IACNxe,KAAKqkC,YAAZ,MAEK1kB,MAAM2kB,iBAAiBhF,IAEhCO,GAAO7/B,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,KACxCxe,KAAKqkC,YAAwBxE,IAAAA,IAEtC,KAAK,GACHA,GAAO7/B,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,KAC/CqhB,GAAO7/B,KAAK62D,gBACZ92B,EAAa//B,KAAKqmB,MAAM7H,IACxB,MAEF,KAAK,GACL,KAAK,IAWL,QACMge,GAAU8C,IACZO,GAAO7/B,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,KAC/CqhB,GAAO7/B,KAAK82D,gBAAe,GAC3B/2B,EAAa//B,KAAKqmB,MAAM7H,OAEtBxe,KAAKqmB,MAAM7H,IAGpB,CACF,CAEDs4C,eAAeC,GACb,MAAMz3B,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAC5C,IAAIqhB,EAcJ,QAbE7/B,KAAKqmB,MAAM7H,IAEJ,KAAP8gB,GACA,KAAAt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,QAE/Bxe,KAAKqmB,MAAM7H,IACbqhB,EAAMk3B,EAAgB,KAAO,QAE7Bl3B,EAAMjtB,OAAO0gB,aAAagM,KAE1Bt/B,KAAKqmB,MAAMyW,QACb98B,KAAKqmB,MAAM0W,UAAY/8B,KAAKqmB,MAAM7H,IAE3BqhB,CACR,CAEDm3B,cAAcpvB,GACZ,IAAI/H,EAAM,GACNE,IAAe//B,KAAKqmB,MAAM7H,IAC9B,OAAS,CACP,GAAIxe,KAAKqmB,MAAM7H,KAAOxe,KAAKqF,OACzB,MAAMrF,KAAKqlB,MAAMpG,EAAO9C,mBAAoB,CAC1CmJ,GAAItlB,KAAKqmB,MAAM7B,WAInB,MAAM8a,EAAKt/B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,KAC5C,GAAI8gB,IAAOsI,EAAO,MACP,KAAPtI,GACFO,GAAO7/B,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,KAC/CqhB,GAAO7/B,KAAK62D,gBACZ92B,EAAa//B,KAAKqmB,MAAM7H,KACfge,GAAU8C,IACnBO,GAAO7/B,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,KAC/CqhB,GAAO7/B,KAAK82D,gBAAe,GAC3B/2B,EAAa//B,KAAKqmB,MAAM7H,OAEtBxe,KAAKqmB,MAAM7H,GAEhB,CAED,OADAqhB,GAAO7/B,KAAKi8B,MAAM+C,MAAMe,EAAY//B,KAAKqmB,MAAM7H,OACxCxe,KAAKqkC,YAAuBxE,IAAAA,EACpC,CAEDg3B,gBACE,MAAMtyC,IAAavkB,KAAKqmB,MAAM7H,IAC9B,GAAI,KAAAxe,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,KAA+B,GAC9Dxe,KAAKqmB,MAAM7H,IAEb,IAAIjI,EAAQ,GACR,MAAAvW,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,OACjCjI,EAAQ,KACNvW,KAAKqmB,MAAM7H,KAGf,MAAMy4C,EAAYj3D,KAAKmhC,QACrB5qB,OACUrI,GACK,EACS,QAE1B,GACgB,OAAd+oD,GACA,KAAAj3D,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,KAG/B,QADExe,KAAKqmB,MAAM7H,IACN5L,OAAO8tB,cAAcu2B,EAE/B,KAAM,CACL,IAAIC,EAAQ,EACRntC,GAAO,EACX,MACEmtC,IAAU,IACVl3D,KAAKqmB,MAAM7H,IAAMxe,KAAKqF,UACpB0kB,EAAF,IAAS/pB,KAAK8jC,eAAe9jC,KAAKqmB,MAAM7H,QAEtCxe,KAAKqmB,MAAM7H,IAGf,GAAIuL,EAAM,CACR,MAAMotC,EAAOn3D,KAAKi8B,MAAM+C,MAAMza,EAAUvkB,KAAKqmB,MAAM7H,KAC7C44C,EAASC,GAAcF,GAG7B,KAFEn3D,KAAKqmB,MAAM7H,IAET44C,EACF,OAAOA,CAEV,CACF,CAID,OADAp3D,KAAKqmB,MAAM7H,IAAM+F,EACV,GACR,CASD+yC,cACE,IAAIh4B,EACJ,MAAM7vB,EAAQzP,KAAKqmB,MAAM7H,IACzB,GACE8gB,EAAKt/B,KAAKi8B,MAAMC,aAAal8B,KAAKqmB,MAAM7H,WACjC+U,GAAiB+L,IAF1B,KAEiCA,GACjC,OAAOt/B,KAAKqkC,YAEV,IAAArkC,KAAKi8B,MAAM+C,MAAMvvB,EAAOzP,KAAKqmB,MAAM7H,KAEtC,CAID+4C,qBACE,MAAMh0D,EAAOvD,KAAK2jB,YASlB,OARI3jB,KAAK4gC,MAAL,KACFr9B,EAAKiF,KAAOxI,KAAKqmB,MAAMziB,MACdquB,GAAejyB,KAAKqmB,MAAMhgB,MACnC9C,EAAKiF,KAAO+pB,GAAevyB,KAAKqmB,MAAMhgB,MAEtCrG,KAAKmX,aAEPnX,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAIDi0D,yBACE,MAAMjzC,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtBhc,EAAOxI,KAAKu3D,qBAClB,IAAKv3D,KAAKojC,IAAV,IAAyB,OAAO56B,EAEhC,MAAMjF,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GAGxC,OAFAjhB,EAAKozD,UAAYnuD,EACjBjF,EAAKiF,KAAOxI,KAAKu3D,qBACVv3D,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAKDk0D,sBAIE,MAAMlzC,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,IAAIjhB,EAAOvD,KAAKw3D,yBAChB,GAAkB,sBAAdj0D,EAAK8C,KACP,OAAO9C,EAET,MAAOvD,KAAKojC,IAAL,IAAkB,CACvB,MAAMkM,EAAUtvC,KAAKwvC,YAAYjrB,EAAUC,GAC3C8qB,EAAQh/B,OAAS/M,EACjB+rC,EAAQzB,SAAW7tC,KAAKu3D,qBACxBh0D,EAAOvD,KAAK6jB,WAAWyrB,EAAS,sBACjC,CACD,OAAO/rC,CACR,CAIDm0D,yBACE,IAAIn0D,EACJ,OAAQvD,KAAKqmB,MAAMhgB,MACjB,KAAK,EAQH,OAPA9C,EAAOvD,KAAK2jB,YACZ3jB,KAAK23D,WAAW/kC,EAAGtL,OACnBtnB,KAAKu0B,OACLhxB,EAAOvD,KAAK43D,4BAA4Br0D,EAAMqvB,EAAGrL,QACpB,uBAAzBhkB,EAAK0d,WAAW5a,MAClBrG,KAAKqlB,MAAM0wC,GAAUC,iBAAkB,CAAE1wC,GAAI/hB,IAExCA,EAET,KAAK,IACL,KAAK,IACH,OAAOvD,KAAKq2C,gBAEd,QACE,MAAMr2C,KAAKqlB,MAAM0wC,GAAUO,oBAAqB,CAC9ChxC,GAAItlB,KAAKqmB,MAAM7B,WAGtB,CAMDqzC,0BACE,MAAMt0D,EAAOvD,KAAKwvC,YAChBxvC,KAAKqmB,MAAMa,cAAc9lB,MACzBpB,KAAKqmB,MAAMa,eAEb,OAAOlnB,KAAK8mB,aAAavjB,EAAM,qBAAsBvD,KAAKqmB,MAAM7B,SACjE,CAIDszC,oBAAoBv0D,GAOlB,OANAvD,KAAKu0B,OACLhxB,EAAK0d,WAAajhB,KAAK60C,kBACvB70C,KAAK23D,WAAW/kC,EAAGnL,QACnBznB,KAAKqmB,MAAMgY,oBAAqB,EAChCr+B,KAAK6sC,OAAL,GAEO7sC,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAIDq0D,4BACEr0D,EACAw0D,GAEA,GAAI/3D,KAAK4gC,MAAL,GACFr9B,EAAK0d,WAAajhB,KAAK63D,8BAClB,CACL,MAAM52C,EAAajhB,KAAK60C,kBAaxBtxC,EAAK0d,WAAaA,CACnB,CAKD,OAJAjhB,KAAK23D,WAAWI,GAChB/3D,KAAKqmB,MAAMgY,oBAAqB,EAChCr+B,KAAK6sC,OAAL,GAEO7sC,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CAIDy0D,oBACE,MAAMz0D,EAAOvD,KAAK2jB,YAClB,OAAI3jB,KAAK4gC,MAAL,IACF5gC,KAAK23D,WAAW/kC,EAAGtL,OACnBtnB,KAAKu0B,OACLv0B,KAAK6sC,OAAL,IACAtpC,EAAKmb,SAAW1e,KAAKu9C,0BACrBv9C,KAAK23D,WAAW/kC,EAAGrL,QACnBvnB,KAAKqmB,MAAMgY,oBAAqB,EAChCr+B,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,wBAE/BA,EAAKiF,KAAOxI,KAAKw3D,yBACjBj0D,EAAKK,MAAQ5D,KAAKojC,IAAL,IAAkBpjC,KAAK03D,yBAA2B,KACxD13D,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAID00D,yBACE1zC,EACAC,GAEA,MAAMjhB,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAEF,OAAIxkB,KAAKojC,IAAL,KAEKpjC,KAAK6jB,WAAWtgB,EAAM,uBAE/BA,EAAKiF,KAAOxI,KAAKy3D,sBACVz3D,KAAKk4D,gCACV30D,GAEH,CAED20D,gCACE30D,GAEA,MAAMsiB,EAA+B,GACrC,OAAQ7lB,KAAK4gC,MAAL,MAAyB5gC,KAAK4gC,MAAL,KAC/B/a,EAAWpgB,KAAKzF,KAAKg4D,qBAKvB,OAHAz0D,EAAKsiB,WAAaA,EAClBtiB,EAAK40D,YAAcn4D,KAAKojC,IAAxB,IACApjC,KAAK6sC,OAAL,KACO7sC,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAID60D,yBACE7zC,EACAC,GAEA,MAAMjhB,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GACxC,OAAIxkB,KAAKojC,IAAL,KACKpjC,KAAK6jB,WAAWtgB,EAAM,uBAE/BA,EAAKiF,KAAOxI,KAAKy3D,sBACjBz3D,KAAK6sC,OAAL,KACO7sC,KAAK6jB,WAAWtgB,EAAM,qBAC9B,CAKD80D,kBAAkB9zC,EAAkBC,GAClC,MAAMjhB,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GAClCtjB,EAAW,GACXo3D,EAAiBt4D,KAAKi4D,yBAAyB1zC,EAAUC,GAC/D,IAAI+zC,EAAiB,KAErB,IAAKD,EAAeH,YAAa,CAC/BK,EAAU,OACR,OAAQx4D,KAAKqmB,MAAMhgB,MACjB,KAAK,IAIH,GAHAke,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtBxkB,KAAKu0B,OACDv0B,KAAKojC,IAAL,IAAoB,CACtBm1B,EAAiBv4D,KAAKo4D,yBACpB7zC,EACAC,GAEF,MAAMg0C,CACP,CACDt3D,EAASuE,KAAKzF,KAAKq4D,kBAAkB9zC,EAAUC,IAC/C,MAEF,KAAK,IACHtjB,EAASuE,KAAKzF,KAAKq2C,iBACnB,MAEF,KAAK,EAAW,CACd,MAAM9yC,EAAOvD,KAAK2jB,YAGlB3jB,KAAK23D,WAAW/kC,EAAGtL,OACnBtnB,KAAKu0B,OACDv0B,KAAK4gC,MAAL,IACF1/B,EAASuE,KACPzF,KAAK83D,oBAAoBv0D,IAG3BrC,EAASuE,KACPzF,KAAK43D,4BACHr0D,EACAqvB,EAAGnL,SAKT,KACD,CAED,QACE,MAAMznB,KAAKmX,aAKfs/C,GAAW6B,KACV7B,GAAW8B,IACO,OAAnBA,EAEAv4D,KAAKqlB,MAAM0wC,GAAUI,0BAA2B,CAC9C7wC,GAAIizC,KAEI9B,GAAW6B,IAAmB7B,GAAW8B,GACnDv4D,KAAKqlB,MAAM0wC,GAAUE,yBAA0B,CAC7C3wC,GAAIizC,EACJrC,eAAgBQ,GAAoB4B,EAAe9vD,QAE3CiuD,GAAW6B,IAAoB7B,GAAW8B,IAElD7B,GAAoB6B,EAAe/vD,QACnCkuD,GAAoB4B,EAAe9vD,OAEnCxI,KAAKqlB,MAAM0wC,GAAUE,yBAA0B,CAC7C3wC,GAAIizC,EACJrC,eAAgBQ,GAAoB4B,EAAe9vD,OAI1D,CAUD,GARIiuD,GAAW6B,IACb/0D,EAAKk1D,gBAAkBH,EACvB/0D,EAAKm1D,gBAAkBH,IAEvBh1D,EAAK+0D,eAAiBA,EACtB/0D,EAAKg1D,eAAiBA,GAExBh1D,EAAKrC,SAAWA,EACZlB,KAAK4gC,MAAL,IACF,MAAM5gC,KAAKqlB,MAAM0wC,GAAUS,6BAA8B,CACvDlxC,GAAItlB,KAAKqmB,MAAM7B,WAInB,OAAOiyC,GAAW6B,GACdt4D,KAAK6jB,WAAWtgB,EAAM,eACtBvD,KAAK6jB,WAAWtgB,EAAM,aAC3B,CAIDo1D,kBACE,MAAMp0C,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAE5B,OADAxkB,KAAKu0B,OACEv0B,KAAKq4D,kBAAkB9zC,EAAUC,EACzC,CAEDmzC,WAAWiB,GACT,MAAM,QAAE/pD,GAAY7O,KAAKqmB,MACzBxX,EAAQA,EAAQxJ,OAAS,GAAKuzD,CAC/B,CAMDviB,cAAc5xB,GACZ,OAAIzkB,KAAK4gC,MAAL,KACK5gC,KAAK0gB,aAAa1gB,KAAKqmB,MAAMziB,MAAO,WAClC5D,KAAK4gC,MAAL,KACF5gC,KAAK24D,kBAEZ34D,KAAK4gC,MAAL,KACA,KAAA5gC,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,MAIjCxe,KAAK+kC,aAAL,KACO/kC,KAAK24D,mBAELh5C,MAAM02B,cAAc5xB,EAE9B,CAED2f,YACE,MAAMd,EAAatjC,KAAKsjC,aACnBA,EAAWlc,eAAezH,MAAMykB,WACtC,CAEDE,iBAAiB9gC,GACf,MAAMqL,EAAU7O,KAAKsjC,aAErB,GAAIz0B,IAAY+jB,EAAGnL,OACjB,OAAOznB,KAAK42D,eAGd,GAAI/nD,IAAY+jB,EAAGrL,QAAU1Y,IAAY+jB,EAAGpL,OAAQ,CAClD,GAAI4L,GAAkB5vB,GACpB,OAAOxD,KAAKs3D,cAGd,GAAa,KAAT9zD,EAEF,QADExD,KAAKqmB,MAAM7H,IACNxe,KAAKqkC,YAAZ,KAGF,IACG,KAAA7gC,GAA6C,KAATA,IACrCqL,IAAY+jB,EAAGrL,OAEf,OAAOvnB,KAAKg3D,cAAcxzD,EAE7B,CAED,OACW,KAATA,GACAxD,KAAKqmB,MAAMgY,oBACX,KAAAr+B,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,MAErCxe,KAAKqmB,MAAM7H,IACNxe,KAAKqkC,YAAZ,MAGK1kB,MAAM2kB,iBAAiB9gC,EAC/B,CAED2kB,cAAc2c,GACZ,MAAM,QAAEj2B,EAAF,KAAWxI,GAASrG,KAAKqmB,MAC/B,GAAa,KAAThgB,GAAkC,MAAby+B,EAGvBj2B,EAAQktB,QAAQ,EAAG,EAAGnJ,EAAGpL,QACzBxnB,KAAKqmB,MAAMgY,oBAAqB,OAC3B,GAAa,MAATh4B,EAETwI,EAAQpJ,KAAKmtB,EAAGrL,aACX,GAAa,MAATlhB,EAAuB,CAChC,MAAMw5B,EAAMhxB,EAAQA,EAAQxJ,OAAS,GAChCw6B,IAAQjN,EAAGrL,QAAZ,KAAsBud,GAA0BjF,IAAQjN,EAAGpL,QAC7D3Y,EAAQtJ,MACRvF,KAAKqmB,MAAMgY,mBACTxvB,EAAQA,EAAQxJ,OAAS,KAAOutB,EAAGnL,SAErCznB,KAAK23D,WAAW/kC,EAAGnL,QACnBznB,KAAKqmB,MAAMgY,oBAAqB,EAEnC,MACCr+B,KAAKqmB,MAAMgY,mBAAqBzM,EAA2BvrB,EAE9D,GCvoBL,MAAMwyD,WAAwBphC,GAAMroB,eAAAA,GAAA,iBAClCiY,MAAqB,IAAIlK,IADS,KAIlC27C,MAAqB,IAAI37C,IAJS,KAOlC47C,WAA0B,IAAI57C,IAPI,KAUlC67C,QAAuB,IAAI77C,IAVO,KAgBlC87C,mBAAkC,IAAI97C,GAhBJ,EAsBrB,MAAM+7C,WAA+BrhC,GAA8BzoB,eAAAA,GAAA,iBAChF+pD,aAA8B,EADkD,CAGhFvgC,YAAY5Y,GAGV,OAFAhgB,KAAKm5D,aAAa1zD,KAAK,IAAI0X,KAEpB,IAAI07C,GAAgB74C,EAC5B,CAED6Y,MAAM7Y,GACAA,GAASoV,IACXp1B,KAAKm5D,aAAa1zD,KAAK,IAAI0X,KAG7BwC,MAAMkZ,MAAM7Y,EACb,CAED8Y,OACE,MAAM9Y,EAAQL,MAAMmZ,OAMpB,OAJI9Y,GAASoV,IACXp1B,KAAKm5D,aAAa5zD,MAGbya,CACR,CAEDo5C,UAAU5wD,EAAc6wD,GACtB,MAAMr4B,EAAMhhC,KAAKm5D,aAAa9zD,OAC9B,GAAIrF,KAAKm5D,aAAan4B,EAAM,GAAG/M,IAAIzrB,GACjC,OAAO,EAET,IAAK6wD,GAAer4B,EAAM,EACxB,IAAK,IAAIxwB,EAAI,EAAGA,EAAIwwB,EAAM,EAAGxwB,IAC3B,GAAIxQ,KAAKm5D,aAAa3oD,GAAGyjB,IAAIzrB,GAAO,OAAO,EAG/C,OAAO,CACR,CAEDwwB,YAAYxwB,EAAcywB,EAA2B7a,GACnD,GAAI6a,EAAchD,GAQhB,OAPIj2B,KAAKo5D,UAAU5wD,GAAM,IACvBxI,KAAK83B,OAAOzS,MAAMpG,EAAO5C,iBAAkB,CACzCiJ,GAAIlH,EACJxO,eAAgBpH,SAGpBxI,KAAKm5D,aAAan5D,KAAKm5D,aAAa9zD,OAAS,GAAG8zB,IAAI3wB,GAItD,MAAMuwB,EAAQ/4B,KAAK24B,eACnB,GAAIM,EAAclD,GAGhB,OAFA/1B,KAAKo5B,mBAAmBL,EAAOvwB,QAC/BuwB,EAAMkgC,mBAAmB9/B,IAAI3wB,GAI/BmX,MAAMqZ,YAAYxwB,EAAMywB,EAAa7a,GAEjC6a,EAAc1D,KACV0D,EAAc3D,KAElBt1B,KAAKk5B,0BAA0BH,EAAOvwB,EAAMywB,EAAa7a,GACzDpe,KAAKo5B,mBAAmBL,EAAOvwB,IAEjCuwB,EAAM1R,MAAM8R,IAAI3wB,IAEdywB,EAAcpD,IAAoBkD,EAAM+/B,MAAM3/B,IAAI3wB,GAClDywB,EAAcnD,IAA0BiD,EAAMggC,WAAW5/B,IAAI3wB,GAC7DywB,EAAcrD,IAAkBmD,EAAMigC,QAAQ7/B,IAAI3wB,EACvD,CAED8wB,oBACEP,EACAvwB,EACAywB,GAEA,GAAIF,EAAM+/B,MAAM7kC,IAAIzrB,GAAO,CACzB,GAAIywB,EAAcpD,GAAoB,CAGpC,MAAMyjC,KAAargC,EAAcnD,IAC3ByjC,EAAWxgC,EAAMggC,WAAW9kC,IAAIzrB,GACtC,OAAO8wD,IAAYC,CACpB,CACD,OAAO,CACR,CACD,OAAItgC,EAAcrD,IAAoBmD,EAAMigC,QAAQ/kC,IAAIzrB,KAClDuwB,EAAMpB,QAAQ1D,IAAIzrB,OAEVywB,EAAc3D,OAMxB2D,EAAc1D,IAAkBwD,EAAM1R,MAAM4M,IAAIzrB,KAI7CmX,MAAM2Z,oBAAoBP,EAAOvwB,EAAMywB,EAC/C,CAEDO,iBAAiBrW,GACf,MAAM,KAAE3a,GAAS2a,EAEjB,GAAInjB,KAAKo5D,UAAU5wD,GAAO,OAE1B,MAAMw4B,EAAMhhC,KAAK+3B,WAAW1yB,OAC5B,IAAK,IAAImL,EAAIwwB,EAAM,EAAGxwB,GAAK,EAAGA,IAAK,CACjC,MAAMuoB,EAAQ/4B,KAAK+3B,WAAWvnB,GAC9B,GAAIuoB,EAAM1R,MAAM4M,IAAIzrB,IAASuwB,EAAMkgC,mBAAmBhlC,IAAIzrB,GAAO,MAClE,CAEDmX,MAAM6Z,iBAAiBrW,EACxB,EChHH,MAAMq2C,GAAS,CAAelpD,EAAWjP,IACvCqC,OAAO+1D,eAAe9rD,KAAK2C,EAAQjP,IAAQiP,EAAOjP,GAWpD,SAASq4D,GAAWpwD,GAClB,GAAS,MAALA,EACF,MAAM,IAAI7C,MAAoB6C,cAAAA,YAEhC,OAAOA,CACR,CAED,SAASqwD,GAAOrwD,GACd,IAAKA,EACH,MAAM,IAAI7C,MAAM,cAEnB,CAgBD,MAAMmzD,GAAWn7C,CAAe,aAAY,CAC1Co7C,gCAAiC,EAAGC,gBACvBA,WAAAA,kEACbC,+BAAgC,EAC9BC,kBAIaA,aAAAA,+DACfC,kCACE,8DACFC,gCAAiC,2CACjCC,eAAgB,EAAG3xD,UAAkDA,qBAAAA,MACrE4xD,sBAAuB,oDACvBC,uBAAwB,qDACxBC,oEACE,6GACFC,6BACE,8DACFC,gBAAiB,EAAG1nD,UACaA,+BAAAA,SACjC2nD,gCACE,oDACFC,iCACE,4DACFC,+BAGE,EAAGC,cA5BqC,uCA8B1CC,kBAAmB,EAAGD,cACIA,wBAAAA,MAG1BE,wBAAyB,EAAGt9C,WACtBA,IAAAA,2BACNu9C,mBAAoB,sCACpBC,oBAAqB,uCACrBC,kCACE,+DACFC,yBAA0B,6CAC1BC,sBAAuB,EACrBC,eAIIA,IAAAA,EAAU,qCAAqCA,EAAU,gBAC/DC,0BACE,wDACFC,+BAAgC,EAC9BV,cAI4DA,4DAAAA,OAC9DW,yBACE,uDACFC,0BACE,2DACFC,wBACE,sDACFC,sCACE,oDACFC,4BAA6B,EAAGf,cAC1BA,IAAAA,8CACNgB,+BAAgC,EAAGhB,cAC7BA,IAAAA,iDACNiB,wCAAyC,EACvCjB,cAIIA,IAAAA,uFACNkB,sBAAuB,EACrBC,sBAIIA,IAAAA,EAAiB,8BAA8BA,EAAiB,gBACtEC,kDACE,4JAEFC,wBACE,0DACFC,qBACE,8DACFC,iCACE,2DACFC,kCACE,6DACFC,yCACE,mFACFC,2BACE,wDACFC,sBACE,6GACF1qB,kBACE,iFACF2qB,0BACE,wDACFC,+BAAgC,EAC9B7B,cAI4DA,4DAAAA,OAC9D8B,2BACE,oFACFC,uBACE,iHACFC,sBACE,oGACFC,sCACE,sDACFC,kCACE,+CACFC,+BACE,yDACFC,wCAAyC,EACvCC,uBAIC,yBAAwBA,mDAAmEA,OAC9FC,8BACE,gDACFC,0BACE,oHACFC,uCACE,mFACFC,gCACE,2GACFC,gCACE,2GACFC,4BACE,wEACFC,mBACE,+EACFC,yBAA0B,yCAC1BC,8BAA+B,8CAC/BC,8BACE,sDACFC,iCACE,oEACFC,kCAAmC,EAAGx3D,UACnC,yFAAwFA,OAO7F,SAASy3D,GACPl6D,GAEA,OAAQA,GACN,IAAK,MACH,MAAO,eACT,IAAK,UACH,MAAO,mBACT,IAAK,SACH,MAAO,kBACT,IAAK,QACH,MAAO,iBACT,IAAK,SACH,MAAO,kBACT,IAAK,SACH,MAAO,kBACT,IAAK,SACH,MAAO,kBACT,IAAK,SACH,MAAO,kBACT,IAAK,YACH,MAAO,qBACT,IAAK,UACH,MAAO,mBACT,QACE,OAEL,CAED,SAASm6D,GAAmBnD,GAC1B,MACe,YAAbA,GAAuC,WAAbA,GAAsC,cAAbA,CAEtD,CAED,SAASoD,GACPpD,GAEA,MAAoB,OAAbA,GAAkC,QAAbA,CAC7B,CASD,OAAgBp7C,GACd,cAAoCA,EAClC4uB,kBAGE,OAAO8qB,EACR,CAED+E,iBAGE,OAAOzsC,EAAkBxxB,KAAKqmB,MAAMhgB,KACrC,CAED63D,2BACE,OACGl+D,KAAK4gC,MACJ,IAAA5gC,KAAK4gC,MAAL,IACA5gC,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,MACA5gC,KAAK4tC,2BACN5tC,KAAKwsC,uBAET,CAED2xB,+BAME,OADAn+D,KAAKu0B,OACEv0B,KAAKk+D,0BACb,CAGDE,gBACEC,EACAC,GAEA,IAAK9sC,EAAkBxxB,KAAKqmB,MAAMhgB,OAAS,KAAArG,KAAKqmB,MAAMhgB,KACpD,OAGF,MAAMu0D,EAAW56D,KAAKqmB,MAAMziB,MAC5B,IAA4C,IAAxCy6D,EAAiBl8B,QAAQy4B,GAAkB,CAC7C,GAAI0D,GAAiCt+D,KAAKu+D,0BACxC,OAEF,GAAIv+D,KAAKw+D,WAAWx+D,KAAKm+D,6BAA6B/vD,KAAKpO,OACzD,OAAO46D,CAEV,CAEF,CAOD6D,kBAAiB,SACfC,EADe,iBAEfL,EAFe,oBAGfM,EAHe,8BAIfL,EAJe,cAKfM,EAAgBhF,GAAS+B,8BASzB,MAAMkD,EAAe,CACnBzgD,EACAw8C,EACAkE,EACAC,KAEInE,IAAakE,GAAUJ,EAASK,IAClC/+D,KAAKqlB,MAAMu0C,GAASkC,sBAAuB,CACzCx2C,GAAIlH,EACJ29C,iBAAkB,CAAC+C,EAAQC,IAE9B,EAEGC,EAAe,CACnB5gD,EACAw8C,EACAqE,EACAC,MAGGR,EAASO,IAASrE,IAAasE,GAC/BR,EAASQ,IAAStE,IAAaqE,IAEhCj/D,KAAKqlB,MAAMu0C,GAASuB,sBAAuB,CACzC71C,GAAIlH,EACJg9C,UAAW,CAAC6D,EAAMC,IAErB,EAGH,OAAS,CACP,MAAM,SAAE16C,GAAaxkB,KAAKqmB,MACpBu0C,EAA0C56D,KAAKo+D,gBACnDC,EAAiB97C,OAAjB,MAAwBo8C,EAAAA,EAAuB,IAC/CL,GAGF,IAAK1D,EAAU,MAEXmD,GAAmBnD,GACjB8D,EAASS,cACXn/D,KAAKqlB,MAAMu0C,GAASe,+BAAgC,CAClDr1C,GAAId,EACJo2C,cAGFiE,EAAar6C,EAAUo2C,EAAUA,EAAU,YAC3CiE,EAAar6C,EAAUo2C,EAAUA,EAAU,UAC3CiE,EAAar6C,EAAUo2C,EAAUA,EAAU,YAE3C8D,EAASS,cAAgBvE,GAElBoD,GAAwBpD,IAC7B8D,EAAS9D,IACX56D,KAAKqlB,MAAMu0C,GAASiB,kBAAmB,CAAEv1C,GAAId,EAAUo2C,aAEzD8D,EAAS9D,IAAY,EAErBiE,EAAar6C,EAAUo2C,EAAU,KAAM,SAEnCl3D,OAAO+1D,eAAe9rD,KAAK+wD,EAAU9D,GACvC56D,KAAKqlB,MAAMu0C,GAASiB,kBAAmB,CAAEv1C,GAAId,EAAUo2C,cAEvDiE,EAAar6C,EAAUo2C,EAAU,SAAU,YAC3CiE,EAAar6C,EAAUo2C,EAAU,SAAU,YAC3CiE,EAAar6C,EAAUo2C,EAAU,WAAY,YAC7CiE,EAAar6C,EAAUo2C,EAAU,WAAY,YAE7CoE,EAAax6C,EAAUo2C,EAAU,UAAW,YAC5CoE,EAAax6C,EAAUo2C,EAAU,SAAU,aAE7C8D,EAAS9D,IAAY,GAGvB,MAAI+D,GAAAA,EAAqB13B,SAAS2zB,IAChC56D,KAAKqlB,MAAMu5C,EAAe,CACxBt5C,GAAId,EACJo2C,YAGL,CACF,CAEDwE,mBAAmBtsD,GACjB,OAAQA,GACN,IAAK,cACL,IAAK,cACH,OAAO9S,KAAK4gC,MAAZ,GACF,IAAK,wBACH,OAAO5gC,KAAK4gC,MAAZ,GACF,IAAK,oBACH,OAAO5gC,KAAK4gC,MAAZ,GACF,IAAK,4BACH,OAAO5gC,KAAK4gC,MAAZ,IAGJ,MAAM,IAAIn6B,MAAM,cACjB,CAED44D,YACEvsD,EACAwsD,GAEA,MAAMrzD,EAAc,GACpB,OAAQjM,KAAKo/D,mBAAmBtsD,GAE9B7G,EAAOxG,KAAK65D,KAEd,OAAOrzD,CACR,CAEDszD,qBACEzsD,EACAwsD,EACAE,GAIA,OAAO9F,GACL15D,KAAKy/D,2BACH3sD,EACAwsD,GACoB,EACpBE,GAGL,CAMDC,2BACE3sD,EACAwsD,EACAI,EACAF,GAIA,MAAMvzD,EAAS,GACf,IAAI0zD,GAAoB,EAExB,OAAS,CACP,GAAI3/D,KAAKo/D,mBAAmBtsD,GAC1B,MAEF6sD,GAAoB,EAEpB,MAAMC,EAAUN,IAChB,GAAe,MAAXM,EACF,OAIF,GAFA3zD,EAAOxG,KAAKm6D,IAER5/D,KAAKojC,IAAL,IAAJ,CAKA,GAAIpjC,KAAKo/D,mBAAmBtsD,GAC1B,MAOF,YAJI4sD,GAEF1/D,KAAK6sC,OAAL,IARD,CAFC8yB,EAAmB3/D,KAAKqmB,MAAM8X,YAajC,CAMD,OAJIqhC,IACFA,EAAoB57D,MAAQ+7D,GAGvB1zD,CACR,CAED4zD,qBACE/sD,EACAwsD,EACAQ,EACAC,EACAP,GAIKO,IACCD,EACF9/D,KAAK6sC,OAAL,GAEA7sC,KAAK6sC,OAAL,KAIJ,MAAM5gC,EAASjM,KAAKu/D,qBAClBzsD,EACAwsD,EACAE,GASF,OANIM,EACF9/D,KAAK6sC,OAAL,GAEA7sC,KAAK6sC,OAAL,IAGK5gC,CACR,CAED+zD,oBACE,MAAMz8D,EAAOvD,KAAK2jB,YAqBlB,OApBA3jB,KAAK6sC,OAAL,IACA7sC,KAAK6sC,OAAL,IACK7sC,KAAK4gC,MAAL,MACH5gC,KAAKqlB,MAAMu0C,GAAS+D,8BAA+B,CACjDr4C,GAAItlB,KAAKqmB,MAAM7B,WAKnBjhB,EAAKmb,SAAWiB,MAAM02B,gBACtBr2C,KAAK6sC,OAAL,IAEI7sC,KAAKojC,IAAL,MAGF7/B,EAAK08D,UAAYjgE,KAAKkgE,qBAEpBlgE,KAAK4gC,MAAL,MACFr9B,EAAKuf,eAAiB9iB,KAAKmgE,wBAEtBngE,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAED28D,kBAAkBE,GAA8B,GAC9C,IAAIhJ,EAAyBp3D,KAAKm1C,gBAAgBirB,GAClD,MAAOpgE,KAAKojC,IAAL,IAAkB,CACvB,MAAM7/B,EACJvD,KAAK0mB,gBAAmC0wC,GAC1C7zD,EAAK67C,KAAOgY,EACZ7zD,EAAK00C,MAAQj4C,KAAKm1C,gBAAgBirB,GAClChJ,EAASp3D,KAAK6jB,WAAWtgB,EAAM,kBAChC,CACD,OAAO6zD,CACR,CAEDiJ,uBACE,MAAM98D,EAAOvD,KAAK2jB,YAKlB,OAJApgB,EAAK+8D,SAAWtgE,KAAKkgE,qBAChBlgE,KAAKwsC,yBAA2BxsC,KAAK4gC,MAAL,MACnCr9B,EAAKuf,eAAiB9iB,KAAKmgE,wBAEtBngE,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAEDg9D,yBAAyBC,GACvBxgE,KAAKu0B,OACL,MAAMhxB,EAAOvD,KAAK0mB,gBAAmC85C,GAIrD,OAHAj9D,EAAKk9D,cAAgBD,EACrBj9D,EAAKmyC,eAAiB11C,KAAK0gE,uBAAqC,GAChEn9D,EAAKo9D,SAAU,EACR3gE,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAEDq9D,sBACE,MAAMr9D,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,aAC9B,CAEDs9D,mBACE,MAAMt9D,EAAOvD,KAAK2jB,YAUlB,OATA3jB,KAAK6sC,OAAL,IACI7sC,KAAK4gC,MAAL,IACFr9B,EAAKu9D,SAAW9gE,KAAKggE,oBAErBz8D,EAAKu9D,SAAW9gE,KAAKkgE,qBAElBlgE,KAAKwsC,yBAA2BxsC,KAAK4gC,MAAL,MACnCr9B,EAAKuf,eAAiB9iB,KAAKmgE,wBAEtBngE,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAEDw9D,sBAAsBx9D,GACpBvD,KAAKy+D,iBAAiB,CACpBC,SAAUn7D,EACV86D,iBAAkB,CAAC,KAAM,OACzBM,oBAAqB,CACnB,SACA,UACA,YACA,WACA,UACA,WACA,YAEFC,cAAehF,GAASgC,gCAE3B,CAGDoF,qBAAqBz9D,GACnBvD,KAAKy+D,iBAAiB,CACpBC,SAAUn7D,EACV86D,iBAAkB,GAClBM,oBAAqB,CAAC,KAAM,OAC5BC,cAAehF,GAASiC,yCAE3B,CAEDoF,qBACEC,EAEYlhE,KAAKghE,qBAAqB5yD,KAAKpO,OAE3C,MAAMuD,EAAOvD,KAAK2jB,YAOlB,OALAu9C,EAAe39D,GAEfA,EAAKiF,KAAOxI,KAAKmhE,2BACjB59D,EAAK69D,WAAaphE,KAAKqhE,mBAAvB,IACA99D,EAAKwH,QAAU/K,KAAKqhE,mBAApB,IACOrhE,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAED+9D,yBACEJ,GAEA,GAAIlhE,KAAK4gC,MAAL,IACF,OAAO5gC,KAAKuhE,sBAAsBL,EAErC,CAEDK,sBACEL,GAEA,MAAM39D,EAAOvD,KAAK2jB,YAEd3jB,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,KACvB5gC,KAAKu0B,OAELv0B,KAAKmX,aAGP,MAAMqoD,EAAsB,CAAE57D,OAAQ,GAgBtC,OAdAL,EAAKse,OAAS7hB,KAAK6/D,qBACjB,4BAEA7/D,KAAKihE,qBAAqB7yD,KAAKpO,KAAMkhE,IACvB,GACO,EACrB1B,GAEyB,IAAvBj8D,EAAKse,OAAOxc,QACdrF,KAAKqlB,MAAMu0C,GAASoB,oBAAqB,CAAE11C,GAAI/hB,KAEd,IAA/Bi8D,EAAoB57D,OACtB5D,KAAK8rC,SAASvoC,EAAM,gBAAiBi8D,EAAoB57D,OAEpD5D,KAAK6jB,WAAWtgB,EAAM,6BAC9B,CAEDi+D,gCACE,QAAIxhE,KAAKujC,YAAYl9B,KAAoB,OAAO,KAEhDrG,KAAKu0B,OACL,MAAMktC,EAAgBzhE,KAAKqgE,uBAa3B,OAPIoB,EAAc3+C,gBAChB9iB,KAAKqlB,MAAMu0C,GAASO,eAAgB,CAClC70C,GAAIm8C,EAAcnB,SAClB93D,KAAM,UAIHi5D,CACR,CAIDC,gBACEC,EACAC,GAGA,MAAMC,EAAN,KAA4BF,EAGtBG,EAAsD,aACtDC,EAEF,iBAEJH,EAAU9+C,eAAiB9iB,KAAKshE,2BAChCthE,KAAK6sC,OAAL,IACA+0B,EAAUE,GAAa9hE,KAAKgiE,kCACxBH,GAGO7hE,KAAK4gC,MAAM+gC,MAFpBC,EAAUG,GACR/hE,KAAKiiE,qCAAqCN,GAK/C,CAEDK,iCAGE,OAAOriD,MACJuiD,iBADI,OAEJtxD,KAAImP,IAEgB,eAAjBA,EAAQ1Z,MACS,gBAAjB0Z,EAAQ1Z,MACS,kBAAjB0Z,EAAQ1Z,MACS,iBAAjB0Z,EAAQ1Z,MAERrG,KAAKqlB,MAAMu0C,GAASiE,kCAAmC,CACrDv4C,GAAIvF,EACJ1Z,KAAM0Z,EAAQ1Z,OAGX0Z,IAEZ,CAEDoiD,6BACOniE,KAAKojC,IAAL,KAAuBpjC,KAAK0sC,oBAC/B1sC,KAAK6sC,OAAL,GAEH,CAEDu1B,uBACEtvD,EACAvP,GAMA,OAFAvD,KAAK0hE,gBAAL,GAA+Bn+D,GAC/BvD,KAAKmiE,6BACEniE,KAAK6jB,WAAWtgB,EAAMuP,EAC9B,CAEDuvD,kCAEE,OADAriE,KAAKu0B,SACD/C,EAAkBxxB,KAAKqmB,MAAMhgB,QAC/BrG,KAAKu0B,OACEv0B,KAAK4gC,MAAZ,IAGH,CAED0hC,yBACE/+D,GAEA,IAEIvD,KAAK4gC,MACL,KAAA5gC,KAAKuiE,YAAYviE,KAAKqiE,gCAAgCj0D,KAAKpO,OAG7D,OAGFA,KAAK6sC,OAAL,GACA,MAAM1pB,EAAKnjB,KAAKm1C,kBAChBhyB,EAAGuyB,eAAiB11C,KAAK0gE,wBACzB1gE,KAAKinB,iBAAiB9D,GAEtBnjB,KAAK6sC,OAAL,GACAtpC,EAAKi/D,WAAa,CAACr/C,GAEnB,MAAM9c,EAAOrG,KAAKyiE,2BAGlB,OAFIp8D,IAAM9C,EAAKmyC,eAAiBrvC,GAChCrG,KAAKmiE,6BACEniE,KAAK6jB,WAAWtgB,EAAM,mBAC9B,CAEDm/D,iCACEn/D,EACAo/D,GAEI3iE,KAAKojC,IAAT,MAA2B7/B,EAAKkiB,UAAW,GAC3C,MAAMm9C,EAAer/D,EAErB,GAAIvD,KAAK4gC,MAAL,KAAyB5gC,KAAK4gC,MAAL,IAAmB,CAC1C+hC,GACF3iE,KAAKqlB,MAAMu0C,GAAS8C,2BAA4B,CAAEp3C,GAAI/hB,IAExD,MAAMqe,EAA8BghD,EAChChhD,EAAO9O,MAAQ9S,KAAK4gC,MAAL,KACjB5gC,KAAKqlB,MAAMu0C,GAASM,gCAAiC,CACnD50C,GAAItlB,KAAKqmB,MAAMwY,gBAGnB7+B,KAAK0hE,gBAAL,GAA+B9/C,GAC/B5hB,KAAKmiE,6BACL,MAAML,EAEF,aACEC,EAEF,iBACJ,GAAoB,QAAhBngD,EAAO9O,KACL8O,EAAOkgD,GAAWz8D,OAAS,IAC7BrF,KAAKqlB,MAAMpG,EAAO3L,eAAgB,CAAEgS,GAAItlB,KAAKqmB,MAAMwY,gBAC/C7+B,KAAKigD,YAAYr+B,EAAOkgD,GAAW,KACrC9hE,KAAKqlB,MAAMu0C,GAASK,kCAAmC,CACrD30C,GAAItlB,KAAKqmB,MAAMwY,sBAIhB,GAAoB,QAAhBjd,EAAO9O,KAAgB,CAChC,GAAiC,IAA7B8O,EAAOkgD,GAAWz8D,OACpBrF,KAAKqlB,MAAMpG,EAAO1L,eAAgB,CAAE+R,GAAItlB,KAAKqmB,MAAMwY,oBAC9C,CACL,MAAMgkC,EAAiBjhD,EAAOkgD,GAAW,GACrC9hE,KAAKigD,YAAY4iB,IACnB7iE,KAAKqlB,MAAMu0C,GAASK,kCAAmC,CACrD30C,GAAItlB,KAAKqmB,MAAMwY,gBAIO,eAAxBgkC,EAAex8D,MACfw8D,EAAep9C,UAEfzlB,KAAKqlB,MAAMu0C,GAASiD,sCAAuC,CACzDv3C,GAAItlB,KAAKqmB,MAAMwY,gBAGS,gBAAxBgkC,EAAex8D,MACjBrG,KAAKqlB,MAAMu0C,GAASkD,kCAAmC,CACrDx3C,GAAItlB,KAAKqmB,MAAMwY,eAGpB,CACGjd,EAAOmgD,IACT/hE,KAAKqlB,MAAMu0C,GAASmD,+BAAgC,CAClDz3C,GAAI1D,EAAOmgD,IAGhB,MACCngD,EAAO9O,KAAO,SAEhB,OAAO9S,KAAK6jB,WAAWjC,EAAQ,oBAChC,CAAM,CACL,MAAMisB,EAAkC+0B,EACpCD,IAAU90B,EAAS80B,UAAW,GAClC,MAAMt8D,EAAOrG,KAAKyiE,2BAGlB,OAFIp8D,IAAMwnC,EAAS6H,eAAiBrvC,GACpCrG,KAAKmiE,6BACEniE,KAAK6jB,WAAWgqB,EAAU,sBAClC,CACF,CAEDi1B,oBACE,MAAMv/D,EAAYvD,KAAK2jB,YAEvB,GAAI3jB,KAAK4gC,MAAL,KAAyB5gC,KAAK4gC,MAAL,IAC3B,OAAO5gC,KAAKoiE,uBAAuB,6BAA8B7+D,GAGnE,GAAIvD,KAAK4gC,MAAL,IAAqB,CACvB,MAAMzd,EAAKnjB,KAAK2jB,YAEhB,OADA3jB,KAAKu0B,OACDv0B,KAAK4gC,MAAL,KAAyB5gC,KAAK4gC,MAAL,IACpB5gC,KAAKoiE,uBACV,kCACA7+D,IAGFA,EAAKlC,IAAMrB,KAAKu7C,iBAAiBp4B,EAAI,OAC9BnjB,KAAK0iE,iCAAiCn/D,GAAM,GAEtD,CAEDvD,KAAKy+D,iBAAiB,CACpBC,SAAUn7D,EACV86D,iBAAkB,CAAC,YACnBM,oBAAqB,CACnB,UACA,WACA,UACA,YACA,SACA,SACA,cAIJ,MAAMoE,EAAM/iE,KAAKsiE,yBAAyB/+D,GAC1C,OAAIw/D,IAIJpjD,MAAMqjD,kBAAkBz/D,GAErBA,EAAKqgB,UACY,eAAlBrgB,EAAKlC,IAAIgF,MACU,QAAlB9C,EAAKlC,IAAImH,MAAoC,QAAlBjF,EAAKlC,IAAImH,OACrCxI,KAAKk+D,6BAEL36D,EAAKuP,KAAOvP,EAAKlC,IAAImH,KACrBmX,MAAMqjD,kBAAkBz/D,IAEnBvD,KAAK0iE,iCAAiCn/D,IAAQA,EAAKo/D,UAC3D,CAEDM,qBACE,MAAM1/D,EAAOvD,KAAK2jB,YAElB,OADApgB,EAAK2hD,QAAUllD,KAAKkjE,2BACbljE,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAED2/D,2BACEljE,KAAK6sC,OAAL,GACA,MAAMqY,EAAUllD,KAAKq/D,YACnB,cACAr/D,KAAK8iE,kBAAkB10D,KAAKpO,OAG9B,OADAA,KAAK6sC,OAAL,GACOqY,CACR,CAEDie,wBAEE,OADAnjE,KAAKu0B,OACDv0B,KAAKojC,IAAL,IACKpjC,KAAK+rC,aAAZ,MAEE/rC,KAAK+rC,aAAL,MACF/rC,KAAKu0B,SAEFv0B,KAAK4gC,MAAL,KAGL5gC,KAAKu0B,SACAv0B,KAAKi+D,mBAGVj+D,KAAKu0B,OACEv0B,KAAK4gC,MAAZ,MACD,CAEDwiC,6BACE,MAAM7/D,EAAOvD,KAAK2jB,YAGlB,OAFApgB,EAAKiF,KAAOxI,KAAKmhE,2BACjB59D,EAAK69D,WAAaphE,KAAKqjE,sBAAvB,IACOrjE,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAED+/D,oBACE,MAAM//D,EAAOvD,KAAK2jB,YA8BlB,OA5BA3jB,KAAK6sC,OAAL,GAEI7sC,KAAK4gC,MAAL,KACFr9B,EAAKo/D,SAAW3iE,KAAKqmB,MAAMziB,MAC3B5D,KAAKu0B,OACLv0B,KAAKssC,iBAAL,MACStsC,KAAKqsC,cAAL,OACT9oC,EAAKo/D,UAAW,GAGlB3iE,KAAK6sC,OAAL,GACAtpC,EAAKs1C,cAAgB74C,KAAKojE,6BAC1B7/D,EAAKggE,SAAWvjE,KAAKqsC,cAAL,IAA6BrsC,KAAKwjE,cAAgB,KAElExjE,KAAK6sC,OAAL,GAEI7sC,KAAK4gC,MAAL,KACFr9B,EAAKkiB,SAAWzlB,KAAKqmB,MAAMziB,MAC3B5D,KAAKu0B,OACLv0B,KAAK6sC,OAAL,KACS7sC,KAAKojC,IAAL,MACT7/B,EAAKkiB,UAAW,GAGlBliB,EAAKmyC,eAAiB11C,KAAKyjE,iBAC3BzjE,KAAK2sC,YACL3sC,KAAK6sC,OAAL,GAEO7sC,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAEDmgE,mBACE,MAAMngE,EAAOvD,KAAK2jB,YAClBpgB,EAAKogE,aAAe3jE,KAAK6/D,qBACvB,oBACA7/D,KAAK4jE,wBAAwBx1D,KAAKpO,OACpB,GACO,GAKvB,IAAI6jE,GAAsB,EACtBC,EAAkC,KAmCtC,OAlCAvgE,EAAKogE,aAAan+D,SAAQu+D,IACxB,MAAM,KAAE19D,GAAS09D,GAGfF,GACS,eAATx9D,GACS,mBAATA,GACW,uBAATA,GAAiC09D,EAAYt+C,UAE/CzlB,KAAKqlB,MAAMu0C,GAAS0C,2BAA4B,CAC9Ch3C,GAAIy+C,IAIRF,IAAAA,EACY,uBAATx9D,GAAiC09D,EAAYt+C,UACrC,mBAATpf,GAGF,IAAI29D,EAAY39D,EACH,eAATA,IACF09D,EAAcA,EAAYruB,eAC1BsuB,EAAYD,EAAY19D,MAG1B,MAAM49D,EAA0B,uBAAdD,EACH,MAAfF,IAAAA,EAAoBG,GAChBH,IAAoBG,GACtBjkE,KAAKqlB,MAAMu0C,GAASuC,iCAAkC,CACpD72C,GAAIy+C,GAEP,IAGI/jE,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAEDqgE,0BAGE,MAAQn0D,MAAO8U,EAAT,SAAmBC,GAAaxkB,KAAKqmB,MAErCrH,EAAOhf,KAAKojC,IAAlB,IACA,IAAI/8B,EAAwCrG,KAAKwjE,cACjD,MAAM/9C,EAAWzlB,KAAKojC,IAAtB,IACM8gC,EAAUlkE,KAAKojC,IAArB,IAEA,GAAI8gC,EAAS,CACX,MAAMC,EAAcnkE,KAAK0mB,gBAAsCrgB,GAC/D89D,EAAY1+C,SAAWA,EAGP,oBAAdpf,EAAKA,MACJA,EAAKyc,gBACiB,eAAvBzc,EAAKi6D,SAASj6D,MAIdrG,KAAKqlB,MAAMu0C,GAASqC,wBAAyB,CAAE32C,GAAIjf,IAGnD89D,EAAYj9D,MAAQb,GALpB89D,EAAYj9D,MAAQb,EAAKi6D,SAQ3B6D,EAAYl7B,YAAcjpC,KAAKwjE,cAC/Bn9D,EAAOrG,KAAK6jB,WAAWsgD,EAAa,qB,MAC/B,GAAI1+C,EAAU,CACnB,MAAM2+C,EAAmBpkE,KAAK0mB,gBAAkCrgB,GAChE+9D,EAAiB1uB,eAAiBrvC,EAClCA,EAAOrG,KAAK6jB,WAAWugD,EAAkB,iBAC1C,CAED,GAAIplD,EAAM,CACR,MAAMqlD,EAAWrkE,KAAKwvC,YAA0BjrB,EAAUC,GAC1D6/C,EAAS3uB,eAAiBrvC,EAC1BA,EAAOrG,KAAK6jB,WAAWwgD,EAAU,aAClC,CAED,OAAOh+D,CACR,CAEDi+D,2BACE,MAAM/gE,EAAOvD,KAAK2jB,YAIlB,OAHA3jB,KAAK6sC,OAAL,IACAtpC,EAAKmyC,eAAiB11C,KAAKwjE,cAC3BxjE,KAAK6sC,OAAL,IACO7sC,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAEDghE,iCACEl+D,EACAm+D,GAEA,MAAMjhE,EAAOvD,KAAK2jB,YAWlB,MARa,sBAATtd,IACD9C,EAAqCihE,WAAaA,EAC/CA,GAAUxkE,KAAKu0B,OACnBv0B,KAAKu0B,QAEPv0B,KAAKykE,kCAAiC,IACpCzkE,KAAK0hE,gBAAL,GAA+Bn+D,KAE1BvD,KAAK6jB,WAAWtgB,EAAM8C,EAC9B,CAEDq+D,yBACE,MAAMnhE,EAAOvD,KAAK2jB,YAelB,OAbApgB,EAAKqhD,QAAU,MACb,OAAQ5kD,KAAKqmB,MAAMhgB,MACjB,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,GACL,KAAK,GAEH,OAAOsZ,MAAM02B,gBACf,QACE,MAAMr2C,KAAKmX,aAVF,KAaRnX,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAEDohE,6BACE,MAAMphE,EAAOvD,KAAK2jB,YAElB,OADApgB,EAAKqhD,QAAUjlC,MAAMilD,eAAc,GAC5B5kE,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAEDshE,4BACE,OAAI7kE,KAAKqmB,MAAMgX,OAAer9B,KAAKwjE,cAC5B7jD,MAAMklD,2BACd,CAEDC,qCACE,MAAMC,EAAc/kE,KAAK4gE,sBACzB,OAAI5gE,KAAK+rC,aAAL,OAA8B/rC,KAAKwsC,wBAC9BxsC,KAAKugE,yBAAyBwE,GAE9BA,CAEV,CAEDC,sBACE,OAAQhlE,KAAKqmB,MAAMhgB,MACjB,KAAK,IACL,KAAK,IACL,KAAK,IACL,KAAK,GACL,KAAK,GACH,OAAOrG,KAAK0kE,yBACd,KAAK,GACH,GAAyB,MAArB1kE,KAAKqmB,MAAMziB,MAAe,CAC5B,MAAML,EAAOvD,KAAK2jB,YACZwf,EAAYnjC,KAAKujC,YACvB,GAAI,MAAAJ,EAAU98B,MAAmB,MAAA88B,EAAU98B,KACzC,MAAMrG,KAAKmX,aAIb,OADA5T,EAAKqhD,QAAU5kD,KAAKilE,kBACbjlE,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CACD,MACF,KAAK,GACH,OAAOvD,KAAK8kE,qCACd,KAAK,GACH,OAAO9kE,KAAK6gE,mBACd,KAAK,GACH,OAAO7gE,KAAKggE,oBACd,KAAK,EACH,OAAOhgE,KAAKuiE,YAAYviE,KAAKmjE,sBAAsB/0D,KAAKpO,OACpDA,KAAKsjE,oBACLtjE,KAAKijE,qBACX,KAAK,EACH,OAAOjjE,KAAK0jE,mBACd,KAAK,GAaH,OAAO1jE,KAAKskE,2BACd,KAAK,GACL,KAAK,GACH,OAAOtkE,KAAK2kE,6BACd,QAAS,CACP,MAAM,KAAEt+D,GAASrG,KAAKqmB,MACtB,GACEmL,EAAkBnrB,IAAlB,KACAA,GACS,KAATA,EACA,CACA,MAAMtD,EACK,KAATsD,EACI,gBACS,KAATA,EACA,gBACAy3D,GAAoB99D,KAAKqmB,MAAMziB,OACrC,QACesK,IAAbnL,GACA,KAAA/C,KAAK6jC,oBACL,CACA,MAAMtgC,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAMR,EAC9B,CACD,OAAO/C,KAAKqgE,sBACb,CACF,EAGH,MAAMrgE,KAAKmX,YACZ,CAED+tD,2BACE,IAAI7+D,EAAOrG,KAAKglE,sBAChB,OAAQhlE,KAAKwsC,yBAA2BxsC,KAAKojC,IAAL,GACtC,GAAIpjC,KAAK4gC,MAAL,GAAyB,CAC3B,MAAMr9B,EAAOvD,KAAK0mB,gBAA+BrgB,GACjD9C,EAAK0lC,YAAc5iC,EACnBrG,KAAK6sC,OAAL,GACAxmC,EAAOrG,KAAK6jB,WAAWtgB,EAAM,cAC9B,KAAM,CACL,MAAMA,EAAOvD,KAAK0mB,gBAAuCrgB,GACzD9C,EAAKm4C,WAAar1C,EAClB9C,EAAKo4C,UAAY37C,KAAKwjE,cACtBxjE,KAAK6sC,OAAL,GACAxmC,EAAOrG,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAEH,OAAO8C,CACR,CAED8+D,sBACE,MAAM5hE,EAAOvD,KAAK2jB,YACZyhD,EAAWplE,KAAKqmB,MAAMziB,MAY5B,OAXA5D,KAAKu0B,OACLhxB,EAAK6hE,SAAWA,EAChB7hE,EAAKmyC,eAAiB11C,KAAKqlE,8BAEV,aAAbD,GACFplE,KAAKslE,iCAEH/hE,GAIGvD,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAED+hE,iCAAiC/hE,GAC/B,OAAQA,EAAKmyC,eAAervC,MAC1B,IAAK,cACL,IAAK,cACH,OACF,QACErG,KAAKqlB,MAAMu0C,GAAS4D,mBAAoB,CAAEl4C,GAAI/hB,IAEnD,CAEDgiE,mBACE,MAAMhiE,EAAOvD,KAAK2jB,YAClB3jB,KAAKssC,iBAAL,KACA,MAAMuM,EAAgB74C,KAAK2jB,YAM3B,OALAk1B,EAAcrwC,KAAOxI,KAAKmhE,2BAC1BtoB,EAAcuoB,WAAaphE,KAAKw+D,YAAW,IACzCx+D,KAAKwlE,kCAEPjiE,EAAKs1C,cAAgB74C,KAAK6jB,WAAWg1B,EAAe,mBAC7C74C,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAEDiiE,gCACE,GAAIxlE,KAAKojC,IAAL,IAAuB,CACzB,MAAMg+B,EAAaphE,KAAKylE,qCAAoC,IAC1DzlE,KAAKwjE,gBAEP,GACExjE,KAAKqmB,MAAMqX,oCACV19B,KAAK4gC,MAAL,IAED,OAAOwgC,CAEV,CACF,CAEDiE,8BACE,MAAMK,EACJrzC,GAAsBryB,KAAKqmB,MAAMhgB,QAAUrG,KAAKqmB,MAAMiY,YACxD,OAAOonC,EACH1lE,KAAKmlE,sBACLnlE,KAAK+rC,aACL,KAAA/rC,KAAKulE,mBACLvlE,KAAKykE,kCAAiC,IACpCzkE,KAAKklE,4BAEZ,CAEDS,+BACE7yD,EACA8yD,EACAR,GAEA,MAAM7hE,EAAOvD,KAAK2jB,YACZkiD,EAAqB7lE,KAAKojC,IAAIgiC,GAC9B/9C,EAAQ,GACd,GACEA,EAAM5hB,KAAKmgE,WACJ5lE,KAAKojC,IAAIgiC,IAClB,OAAqB,IAAjB/9C,EAAMhiB,QAAiBwgE,GAG3BtiE,EAAK8jB,MAAQA,EACNrnB,KAAK6jB,WAAWtgB,EAAMuP,IAHpBuU,EAAM,EAIhB,CAEDy+C,kCACE,OAAO9lE,KAAK2lE,+BACV,qBACA3lE,KAAKqlE,4BAA4Bj3D,KAAKpO,MAFxC,GAKD,CAED+lE,2BACE,OAAO/lE,KAAK2lE,+BACV,cACA3lE,KAAK8lE,gCAAgC13D,KAAKpO,MAF5C,GAKD,CAEDgmE,0BACE,QAAIhmE,KAAK4gC,MAAL,KAIF5gC,KAAK4gC,MACL,KAAA5gC,KAAKuiE,YAAYviE,KAAKimE,qCAAqC73D,KAAKpO,MAEnE,CAEDkmE,uBACE,GAAI10C,EAAkBxxB,KAAKqmB,MAAMhgB,OAASrG,KAAK4gC,MAAL,IAExC,OADA5gC,KAAKu0B,QACE,EAGT,GAAIv0B,KAAK4gC,MAAL,GAAuB,CAEzB,MAAM,OAAE5D,GAAWh9B,KAAKqmB,MAClB8/C,EAAqBnpC,EAAO33B,OAClC,IAEE,OADArF,KAAKomE,gBAAL,GAAgC,GACzBppC,EAAO33B,SAAW8gE,CAG1B,CAFC,MAAM7lD,GACN,OAAO,CACR,CACF,CAED,GAAItgB,KAAK4gC,MAAL,GAAyB,CAC3B5gC,KAAKu0B,OAEL,MAAM,OAAEyI,GAAWh9B,KAAKqmB,MAClB8/C,EAAqBnpC,EAAO33B,OAClC,IAME,OALAsa,MAAMuiD,iBAAN,MAGE,GAEKllC,EAAO33B,SAAW8gE,CAG1B,CAFC,MAAME,GACN,OAAO,CACR,CACF,CAED,OAAO,CACR,CAEDJ,uCAEE,GADAjmE,KAAKu0B,OACDv0B,KAAK4gC,MAAL,KAAyB5gC,KAAK4gC,MAAL,IAG3B,OAAO,EAET,GAAI5gC,KAAKkmE,uBAAwB,CAC/B,GACElmE,KAAK4gC,MACL,KAAA5gC,KAAK4gC,MADL,KAEA5gC,KAAK4gC,MAFL,KAGA5gC,KAAK4gC,MAAL,IAMA,OAAO,EAET,GAAI5gC,KAAK4gC,MAAL,MACF5gC,KAAKu0B,OACDv0B,KAAK4gC,MAAL,KAEF,OAAO,CAGZ,CACD,OAAO,CACR,CAEDqhC,qCACEN,GAEA,OAAO3hE,KAAKsmE,UAAS,KACnB,MAAMC,EAAIvmE,KAAK2jB,YACf3jB,KAAK6sC,OAAO80B,GAEZ,MAAMp+D,EAAOvD,KAAK2jB,YAEZg9C,IAAY3gE,KAAKw+D,WACrBx+D,KAAKwmE,4BAA4Bp4D,KAAKpO,OAGxC,GAAI2gE,GAAW3gE,KAAK4gC,MAAL,IAAsB,CAGnC,IAAI6lC,EAAoBzmE,KAAK8kE,qCAa7B,MAV+B,eAA3B2B,EAAkBpgE,MACpB9C,EAAKk9D,cAAgBgG,EACrBljE,EAAKo9D,SAAU,EACdp9D,EAA2BmyC,eAAiB,KAC7C+wB,EAAoBzmE,KAAK6jB,WAAWtgB,EAAM,qBAE1CvD,KAAKyvC,2BAA2Bg3B,EAAmBljE,GAClDkjE,EAAwC9F,SAAU,GAErD4F,EAAE7wB,eAAiB+wB,EACZzmE,KAAK6jB,WAAW0iD,EAAG,mBAC3B,CAED,MAAMG,EACJ1mE,KAAKi+D,kBACLj+D,KAAKw+D,WAAWx+D,KAAK2mE,2BAA2Bv4D,KAAKpO,OAEvD,IAAK0mE,EACH,OAAK/F,GAMLp9D,EAAKk9D,cAAgBzgE,KAAKm1C,kBAC1B5xC,EAAKo9D,QAAUA,EACdp9D,EAA2BmyC,eAAiB,KAC7C6wB,EAAE7wB,eAAiB11C,KAAK6jB,WAAWtgB,EAAM,mBAClCvD,KAAK6jB,WAAW0iD,EAAG,qBARjBvmE,KAAK0gE,uBAAqC,EAAO6F,GAY5D,MAAMlgE,EAAOrG,KAAK0gE,uBAAqC,GAKvD,OAJAn9D,EAAKk9D,cAAgBiG,EACrBnjE,EAAKmyC,eAAiBrvC,EACtB9C,EAAKo9D,QAAUA,EACf4F,EAAE7wB,eAAiB11C,KAAK6jB,WAAWtgB,EAAM,mBAClCvD,KAAK6jB,WAAW0iD,EAAG,mBAA1B,GAEH,CAEDK,0CAIE,OAAO5mE,KAAK4gC,MAAL,IACH5gC,KAAKiiE,qCAAL,SACA/zD,CACL,CAEDu0D,2BACE,OAAOziE,KAAK4gC,MAAL,IAAuB5gC,KAAK0gE,6BAA0BxyD,CAC9D,CAEDu1D,iBACE,OAAOzjE,KAAKqhE,mBAAZ,GACD,CAEDsF,6BACE,MAAMxjD,EAAKnjB,KAAKm1C,kBAChB,GAAIn1C,KAAK+rC,aAAL,OAA8B/rC,KAAKwsC,wBAErC,OADAxsC,KAAKu0B,OACEpR,CAEV,CAEDqjD,8BACE,GAAI,MAAAxmE,KAAKqmB,MAAMhgB,KACb,OAAO,EAET,MAAMi4B,EAAct+B,KAAKqmB,MAAMiY,YAE/B,OADAt+B,KAAKu0B,UACA/C,EAAkBxxB,KAAKqmB,MAAMhgB,QAAUrG,KAAK4gC,MAAL,OAIxCtC,GACFt+B,KAAKqlB,MAAMpG,EAAOvI,2BAA4B,CAC5C4O,GAAItlB,KAAKqmB,MAAM6X,gBACfvnB,aAAc,aAIX,EACR,CAED+pD,sBACEmG,GAAW,EACXN,EAAgCvmE,KAAK2jB,aAMrC,OAJA3jB,KAAKsmE,UAAS,KACRO,GAAU7mE,KAAK6sC,OAAL,IACd05B,EAAE7wB,eAAiB11C,KAAKwjE,aAAxB,IAEKxjE,KAAK6jB,WAAW0iD,EAAG,mBAC3B,CAGD/C,cAEE7J,GAAO35D,KAAKqmB,MAAMgX,QAClB,MAAMh3B,EAAOrG,KAAK8mE,4BAElB,GACE9mE,KAAKqmB,MAAMqX,mCACX19B,KAAKwsC,0BACJxsC,KAAKojC,IAAL,IAED,OAAO/8B,EAET,MAAM9C,EAAOvD,KAAK0mB,gBAAqCrgB,GAiBvD,OAhBA9C,EAAKygE,UAAY39D,EAEjB9C,EAAKwjE,YAAc/mE,KAAKylE,qCAAoC,IAC1DzlE,KAAK8mE,8BAGP9mE,KAAK6sC,OAAL,IACAtpC,EAAKyjE,SAAWhnE,KAAKykE,kCAAiC,IACpDzkE,KAAKwjE,gBAGPxjE,KAAK6sC,OAAL,IACAtpC,EAAK0jE,UAAYjnE,KAAKykE,kCAAiC,IACrDzkE,KAAKwjE,gBAGAxjE,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED2jE,iCACE,OACElnE,KAAK+rC,aAAL,MADF,KACqC/rC,KAAKujC,YAAYl9B,IAEvD,CAEDygE,4BACE,OAAI9mE,KAAKgmE,0BACAhmE,KAAKukE,iCAAiC,kBAE3CvkE,KAAK4gC,MAAL,IAEK5gC,KAAKukE,iCAAiC,qBACpCvkE,KAAKknE,iCAEPlnE,KAAKukE,iCACV,qBACe,GAGZvkE,KAAK+lE,0BACb,CAEDoB,uBACMnnE,KAAKgjB,gBAAgB,aAAc,6BACrChjB,KAAKqlB,MAAMu0C,GAASgD,sBAAuB,CAAEt3C,GAAItlB,KAAKqmB,MAAM7B,WAG9D,MAAMjhB,EAAOvD,KAAK2jB,YACZ+J,EAAS1tB,KAAKwhE,gCAIpB,OAHAj+D,EAAKmyC,eAAiBhoB,GAAU1tB,KAAKonE,sBACrCpnE,KAAK6sC,OAAL,IACAtpC,EAAK0d,WAAajhB,KAAKilE,kBAChBjlE,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAED8jE,sBACE7pD,GAEA,MAAM8pD,EAAmBtnE,KAAKqmB,MAAM7B,SAE9B+iD,EAAgBvnE,KAAKu/D,qBACzB,yBACA,KACE,MAAMh8D,EAAOvD,KAAK2jB,YAMlB,OALApgB,EAAK0d,WAAajhB,KAAKkgE,oBACnBlgE,KAAK4gC,MAAL,MACFr9B,EAAKuf,eAAiB9iB,KAAKmgE,wBAGtBngE,KAAK6jB,WAAWtgB,EAAM,gCAA7B,IAWJ,OAPKgkE,EAAcliE,QACjBrF,KAAKqlB,MAAMu0C,GAASkB,wBAAyB,CAC3Cx1C,GAAIgiD,EACJ9pD,UAIG+pD,CACR,CAEDC,4BACEjkE,EACAmN,EAEI,CAAC,GAEL,GAAI1Q,KAAKysC,wBAAyB,OAAO,KACzCzsC,KAAKssC,iBAAL,KACI57B,EAAWwnC,UAAS30C,EAAK20C,SAAU,GACnC1mB,EAAkBxxB,KAAKqmB,MAAMhgB,OAC/B9C,EAAK4f,GAAKnjB,KAAKm1C,kBACfn1C,KAAKynE,gBAAgBlkE,EAAK4f,GAAImT,MAE9B/yB,EAAK4f,GAAK,KACVnjB,KAAKqlB,MAAMu0C,GAASsC,qBAAsB,CAAE52C,GAAItlB,KAAKqmB,MAAM7B,YAG7DjhB,EAAKuf,eAAiB9iB,KAAKshE,yBACzBthE,KAAK+gE,sBAAsB3yD,KAAKpO,OAE9BA,KAAKojC,IAAL,MACF7/B,EAAK0zC,QAAUj3C,KAAKqnE,sBAAsB,YAE5C,MAAMxiE,EAAO7E,KAAK2jB,YAGlB,OAFA9e,EAAKA,KAAO7E,KAAKsmE,SAAStmE,KAAKkjE,yBAAyB90D,KAAKpO,OAC7DuD,EAAKsB,KAAO7E,KAAK6jB,WAAWhf,EAAM,mBAC3B7E,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CAEDmkE,4BACEnkE,GAyBA,OAvBAA,EAAK4f,GAAKnjB,KAAKm1C,kBACfn1C,KAAKynE,gBAAgBlkE,EAAK4f,GAAIoT,IAE9BhzB,EAAKmyC,eAAiB11C,KAAKsmE,UAAS,KAOlC,GANA/iE,EAAKuf,eAAiB9iB,KAAKshE,yBACzBthE,KAAK+gE,sBAAsB3yD,KAAKpO,OAGlCA,KAAK6sC,OAAL,IAGE7sC,KAAK+rC,aACL,WAAA/rC,KAAKujC,YAAYl9B,KACjB,CACA,MAAM9C,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,qBAC9B,CAED,OAAOvD,KAAKwjE,aAAZ,IAGFxjE,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,yBAC9B,CAEDokE,cAAiBC,GACf,MAAMC,EAAa7nE,KAAKqmB,MAAMxX,QAC9B7O,KAAKqmB,MAAMxX,QAAU,CAACg5D,EAAW,IACjC,IACE,OAAOD,GAGR,CAJD,QAGE5nE,KAAKqmB,MAAMxX,QAAUg5D,CACtB,CACF,CAODvB,SAAYsB,GACV,MAAMnzB,EAAYz0C,KAAKqmB,MAAMgX,OAC7Br9B,KAAKqmB,MAAMgX,QAAS,EACpB,IACE,OAAOuqC,GAGR,CAJD,QAGE5nE,KAAKqmB,MAAMgX,OAASoX,CACrB,CACF,CAEDgxB,oCAAuCmC,GACrC,MAAME,EACJ9nE,KAAKqmB,MAAMqX,kCACb19B,KAAKqmB,MAAMqX,mCAAoC,EAC/C,IACE,OAAOkqC,GAIR,CALD,QAGE5nE,KAAKqmB,MAAMqX,kCACToqC,CACH,CACF,CAEDrD,iCAAoCmD,GAClC,MAAME,EACJ9nE,KAAKqmB,MAAMqX,kCACb19B,KAAKqmB,MAAMqX,mCAAoC,EAC/C,IACE,OAAOkqC,GAIR,CALD,QAGE5nE,KAAKqmB,MAAMqX,kCACToqC,CACH,CACF,CAEDzG,mBAAmB7jD,GACjB,OAAQxd,KAAK4gC,MAAMpjB,GAAqBxd,KAAKonE,2BAAjBl5D,CAC7B,CAEDm1D,sBAAsB7lD,GACpB,OAAOxd,KAAK+nE,mBAAkB,IAAM/nE,KAAK6sC,OAAOrvB,IACjD,CAED4pD,sBACE,OAAOpnE,KAAK+nE,mBAAkB,IAAM/nE,KAAKu0B,QAC1C,CAEDwzC,kBAAkBH,GAChB,OAAO5nE,KAAKsmE,UAAS,KACnBsB,IACO5nE,KAAKwjE,gBAEf,CAEDwE,oBACE,MAAMzkE,EAAOvD,KAAK2jB,YAQlB,OANApgB,EAAK4f,GAAKnjB,KAAK4gC,MAAL,KACNjhB,MAAMgB,mBAAmB3gB,KAAKqmB,MAAMziB,OACpC5D,KAAKm1C,iBAA8B,GACnCn1C,KAAKojC,IAAL,MACF7/B,EAAK0kE,YAActoD,MAAM49B,2BAEpBv9C,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAED2kE,uBACE3kE,EACAmN,EAGI,CAAC,GAiBL,OAfIA,EAAWgjC,QAAOnwC,EAAKmwC,OAAQ,GAC/BhjC,EAAWwnC,UAAS30C,EAAK20C,SAAU,GACvCl4C,KAAKssC,iBAAL,KACA/oC,EAAK4f,GAAKnjB,KAAKm1C,kBACfn1C,KAAKynE,gBACHlkE,EAAK4f,GACL5f,EAAKmwC,MAAQ9c,GAAqBJ,IAGpCx2B,KAAK6sC,OAAL,GACAtpC,EAAK2hD,QAAUllD,KAAKu/D,qBAClB,cACAv/D,KAAKgoE,kBAAkB55D,KAAKpO,OAE9BA,KAAK6sC,OAAL,GACO7sC,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED4kE,qBACE,MAAM5kE,EAAOvD,KAAK2jB,YAalB,OAZA3jB,KAAK+4B,MAAMF,MAAMlE,IAEjB30B,KAAK6sC,OAAL,GAEAltB,MAAMyoD,4BACH7kE,EAAKsB,KAAO,QACIqJ,GACF,EAHjB,GAMAlO,KAAKu0B,OACLv0B,KAAK+4B,MAAMD,OACJ94B,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAED8kE,oCACE9kE,EACA+kE,GAAkB,GAQlB,GANA/kE,EAAK4f,GAAKnjB,KAAKm1C,kBAEVmzB,GACHtoE,KAAKynE,gBAAgBlkE,EAAK4f,GAAI0T,IAG5B72B,KAAKojC,IAAL,IAAkB,CACpB,MAAMmlC,EAAQvoE,KAAK2jB,YACnB3jB,KAAKqoE,oCAAoCE,GAAO,GAEhDhlE,EAAKsB,KAAO0jE,CACb,MACCvoE,KAAK+4B,MAAMF,MAAMzD,IACjBp1B,KAAKsuC,UAAUzV,MAAMmS,IACrBznC,EAAKsB,KAAO7E,KAAKmoE,qBACjBnoE,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,OAEb,OAAO94B,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAEDilE,wCACEjlE,GAoBA,OAlBIvD,KAAK+rC,aAAL,MACFxoC,EAAK4I,QAAS,EACd5I,EAAK4f,GAAKnjB,KAAKm1C,mBACNn1C,KAAK4gC,MAAL,KACTr9B,EAAK4f,GAAKxD,MAAMgB,mBAAmB3gB,KAAKqmB,MAAMziB,OAE9C5D,KAAKmX,aAEHnX,KAAK4gC,MAAL,IACF5gC,KAAK+4B,MAAMF,MAAMzD,IACjBp1B,KAAKsuC,UAAUzV,MAAMmS,IACrBznC,EAAKsB,KAAO7E,KAAKmoE,qBACjBnoE,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,QAEX94B,KAAK2sC,YAGA3sC,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAEDklE,+BACEllE,EACAmlE,GAEAnlE,EAAKmlE,SAAWA,IAAY,EAC5BnlE,EAAK4f,GAAKnjB,KAAKm1C,kBACfn1C,KAAKynE,gBAAgBlkE,EAAK4f,GAAI8S,IAC9Bj2B,KAAK6sC,OAAL,IACA,MAAM87B,EAAkB3oE,KAAK4oE,yBAW7B,MATsB,SAApBrlE,EAAKgwC,YACoB,8BAAzBo1B,EAAgBtiE,MAEhBrG,KAAKqlB,MAAMu0C,GAASsB,yBAA0B,CAC5C51C,GAAIqjD,IAGRplE,EAAKolE,gBAAkBA,EACvB3oE,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,4BAC9B,CAEDslE,8BACE,OACE7oE,KAAK+rC,aACL,MAFF,KAEE/rC,KAAK6jC,mBAER,CAED+kC,yBACE,OAAO5oE,KAAK6oE,8BACR7oE,KAAK8oE,iCACL9oE,KAAKkgE,mBAA2C,EACrD,CAED4I,iCACE,MAAMvlE,EAAOvD,KAAK2jB,YAGlB,GAFA3jB,KAAKssC,iBAAL,KACAtsC,KAAK6sC,OAAL,KACK7sC,KAAK4gC,MAAL,KACH,MAAM5gC,KAAKmX,aAKb,OAFA5T,EAAK0d,WAAatB,MAAM02B,gBACxBr2C,KAAK6sC,OAAL,IACO7sC,KAAK6jB,WAAWtgB,EAAM,4BAC9B,CAIDg/D,YAAez2D,GACb,MAAMua,EAAQrmB,KAAKqmB,MAAM/H,QACnB4hB,EAAMp0B,IAEZ,OADA9L,KAAKqmB,MAAQA,EACN6Z,CACR,CAED6oC,mBACEj9D,GAEA,MAAMG,EAASjM,KAAK8sC,UAClBsV,GAEEt2C,KAAOs2C,MAGX,IAAIn2C,EAAOmhC,SAAYnhC,EAAO1I,KAG9B,OAFI0I,EAAOkB,QAAOnN,KAAKqmB,MAAQpa,EAAOihC,WAE/BjhC,EAAO1I,IACf,CAEDi7D,WAAc1yD,GACZ,MAAMua,EAAQrmB,KAAKqmB,MAAM/H,QACnBrS,EAASH,IACf,YAAeoC,IAAXjC,IAAmC,IAAXA,EACnBA,OAEPjM,KAAKqmB,MAAQA,EAGhB,CAED2iD,kBAAkBC,GAChB,GAAIjpE,KAAK0sC,mBACP,OAEF,IACI55B,EADAo2D,EAAYlpE,KAAKqmB,MAAMhgB,KAS3B,OANIrG,KAAK+rC,aAAL,MACFm9B,EAAA,GACAp2D,EAAO,OAIF9S,KAAKmpE,oBAAmB,KAC7B,GAAkB,KAAdD,EAEF,OADAD,EAAK/wB,SAAU,EACRv4B,MAAMypD,uBACXH,GACY,GACc,GAI9B,GAAkB,KAAdC,EAIF,OADAD,EAAK/wB,SAAU,EACRl4C,KAAKqpE,WACVJ,GACkB,GACD,GAIrB,GAAkB,MAAdC,EACF,OAAOlpE,KAAKkoE,uBAAuBe,EAAM,CAAE/wB,SAAS,IAGtD,GAAkB,MAAdgxB,EACF,OAAOlpE,KAAKwoE,wCAAwCS,GAGtD,GAAkB,KAAdC,GAAyC,KAAdA,EAC7B,OAAKlpE,KAAK4gC,MAAN,KAA2B5gC,KAAKosC,sBAAsB,SAM1DpsC,KAAK6sC,OAAL,IACO7sC,KAAKkoE,uBAAuBe,EAAM,CACvCv1B,OAAO,EACPwE,SAAS,MART+wB,EAAK/wB,SAAU,EACRl4C,KAAKspE,kBAAkBL,EAAMn2D,GAAQ9S,KAAKqmB,MAAMziB,OAAO,IAWlE,GAAkB,MAAdslE,EAA6B,CAC/B,MAAMj9D,EAASjM,KAAKwnE,4BAA4ByB,EAAM,CACpD/wB,SAAS,IAEX,GAAIjsC,EAAQ,OAAOA,CACpB,CAED,OAAIulB,EAAkB03C,GACblpE,KAAKupE,mBACVN,EACAjpE,KAAKqmB,MAAMziB,OACA,QAJf,CAMC,GAEJ,CAGD4lE,8BACE,OAAOxpE,KAAKupE,mBACVvpE,KAAK2jB,YACL3jB,KAAKqmB,MAAMziB,OACA,EAEd,CAED6lE,2BACElmE,EACAk5C,GAEA,OAAQA,EAAKj0C,MACX,IAAK,UAAW,CACd,MAAM6qC,EAAcrzC,KAAKgpE,kBAAkBzlE,GAC3C,GAAI8vC,EAEF,OADAA,EAAY6E,SAAU,EACf7E,EAET,KACD,CACD,IAAK,SAGH,GAAIrzC,KAAK4gC,MAAL,GAAuB,CACzB5gC,KAAK+4B,MAAMF,MAAMzD,IACjBp1B,KAAKsuC,UAAUzV,MAAMmS,IACrB,MAAM0+B,EAAMnmE,EAMZ,OALAmmE,EAAIv9D,QAAS,EACbu9D,EAAIvmD,GAAKs5B,EACTitB,EAAI7kE,KAAO7E,KAAKmoE,qBAChBnoE,KAAK+4B,MAAMD,OACX94B,KAAKsuC,UAAUxV,OACR94B,KAAK6jB,WAAW6lD,EAAK,sBAC7B,CACD,MAEF,QACE,OAAO1pE,KAAKupE,mBAAmBhmE,EAAMk5C,EAAKj0C,MAAiB,GAEhE,CAGD+gE,mBACEhmE,EACAK,EACA2wB,GAGA,OAAQ3wB,GACN,IAAK,WACH,GACE5D,KAAK2pE,sBAAsBp1C,KAC1Bv0B,KAAK4gC,MAAL,KAAyBpP,EAAkBxxB,KAAKqmB,MAAMhgB,OAEvD,OAAOrG,KAAK4pE,2BAA2BrmE,GAEzC,MAEF,IAAK,SACH,GAAIvD,KAAK2pE,sBAAsBp1C,GAAO,CACpC,GAAIv0B,KAAK4gC,MAAL,KACF,OAAO5gC,KAAKwoE,wCAAwCjlE,GAC/C,GAAIiuB,EAAkBxxB,KAAKqmB,MAAMhgB,MACtC,OAAOrG,KAAKqoE,oCAAoC9kE,EAEnD,CACD,MAEF,IAAK,YACH,GACEvD,KAAK2pE,sBAAsBp1C,IAC3B/C,EAAkBxxB,KAAKqmB,MAAMhgB,MAE7B,OAAOrG,KAAKqoE,oCAAoC9kE,GAElD,MAEF,IAAK,OACH,GACEvD,KAAK2pE,sBAAsBp1C,IAC3B/C,EAAkBxxB,KAAKqmB,MAAMhgB,MAE7B,OAAOrG,KAAK0nE,4BAA4BnkE,GAE1C,MAEL,CAEDomE,sBAAsBp1C,GACpB,OAAIA,GACEv0B,KAAKysC,0BACTzsC,KAAKu0B,QACE,IAEDv0B,KAAK0sC,kBACd,CAEDm9B,oCACEtlD,EACAC,GAEA,IAAKxkB,KAAK4gC,MAAL,IACH,OAGF,MAAMkpC,EAA4B9pE,KAAKqmB,MAAM+W,uBAC7Cp9B,KAAKqmB,MAAM+W,wBAAyB,EAEpC,MAAM8C,EACJlgC,KAAK+oE,oBAAmB,KACtB,MAAMxlE,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAOF,OALAjhB,EAAKuf,eAAiB9iB,KAAKuhE,wBAE3B5hD,MAAMiiC,oBAAoBr+C,GAC1BA,EAAKkyC,WAAaz1C,KAAK4mE,0CACvB5mE,KAAK6sC,OAAL,IACOtpC,CAAP,IAKJ,OAFAvD,KAAKqmB,MAAM+W,uBAAyB0sC,EAE/B5pC,EAIEvgB,MAAMgkC,qBACXzjB,EAC6B,MACjB,QAPd,CASD,CAID6pC,mCACE,GAAI,KAAA/pE,KAAKgqE,YAGT,OAAOhqE,KAAKmgE,sBACb,CAEDA,uBACE,MAAM58D,EAAOvD,KAAK2jB,YAelB,OAdApgB,EAAKse,OAAS7hB,KAAKsmE,UAAS,IAE1BtmE,KAAK2nE,eAAc,KACjB3nE,KAAK6sC,OAAL,IACO7sC,KAAKu/D,qBACV,4BACAv/D,KAAKwjE,YAAYp1D,KAAKpO,YAID,IAAvBuD,EAAKse,OAAOxc,QACdrF,KAAKqlB,MAAMu0C,GAASmB,mBAAoB,CAAEz1C,GAAI/hB,IAEhDvD,KAAK6sC,OAAL,IACO7sC,KAAK6jB,WAAWtgB,EAAM,+BAC9B,CAED0mE,uBACE,OAAO33C,GAA0BtyB,KAAKqmB,MAAMhgB,KAC7C,CAMDs2C,2BACE,OAAI38C,KAAKiqE,wBACFtqD,MAAMg9B,0BACd,CAEDutB,wBACEroB,EACAsoB,GAGA,MAAM5lD,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAE5B,IAAI26C,EACAwD,GAAW,EACXyH,GAAW,EACf,QAAuBl8D,IAAnB2zC,EAA8B,CAChC,MAAM6c,EAAyB,CAAC,EAChC1+D,KAAKy+D,iBAAiB,CACpBC,WACAL,iBAAkB,CAChB,SACA,UACA,YACA,WACA,cAGJc,EAAgBT,EAASS,cACzBiL,EAAW1L,EAAS0L,SACpBzH,EAAWjE,EAASiE,UAEC,IAAnB9gB,IACCsd,GAAiBwD,GAAYyH,IAE9BpqE,KAAKqlB,MAAMu0C,GAAS2D,4BAA6B,CAAEj4C,GAAId,GAE1D,CAED,MAAM46B,EAAOp/C,KAAK0gD,oBAClB1gD,KAAKygD,6BAA6BrB,GAClC,MAAMirB,EAAMrqE,KAAK0gD,kBAAkBtB,EAAK3vC,MAAO2vC,EAAKhhC,IAAI3O,MAAO2vC,GAC/D,GAAI+f,GAAiBwD,GAAYyH,EAAU,CACzC,MAAME,EAAKtqE,KAAKwvC,YAAmCjrB,EAAUC,GAW7D,OAVI2lD,EAAW9kE,SACbilE,EAAGH,WAAaA,GAEdhL,IAAemL,EAAGnL,cAAgBA,GAClCwD,IAAU2H,EAAG3H,SAAWA,GACxByH,IAAUE,EAAGF,SAAWA,GACX,eAAbC,EAAIhkE,MAAsC,sBAAbgkE,EAAIhkE,MACnCrG,KAAKqlB,MAAMu0C,GAASgE,iCAAkC,CAAEt4C,GAAIglD,IAE9DA,EAAGC,UAAYF,EACRrqE,KAAK6jB,WAAWymD,EAAI,sBAC5B,CAMD,OAJIH,EAAW9kE,SACb+5C,EAAK+qB,WAAaA,GAGbE,CACR,CAEDG,kBAAkBjnE,GAChB,MACiB,wBAAdA,EAAK8C,MACJsZ,MAAM6qD,kBAAkBjnE,EAAKgnE,YAC/B5qD,MAAM6qD,kBAAkBjnE,EAE3B,CAED84C,2BAME94C,EAAiB8C,EAAiBkd,GAAoB,GAClDvjB,KAAK4gC,MAAL,MACFr9B,EAAKkyC,WAAaz1C,KAAKiiE,qCAAvB,KAGF,MAAMwI,EACK,wBAATpkE,EACI,oBACS,gBAATA,GAAmC,uBAATA,EAC1B,uBACA6H,EACN,OAAIu8D,IAAiBzqE,KAAK4gC,MAAL,IAAyB5gC,KAAK0sC,mBAC1C1sC,KAAK6jB,WAAWtgB,EAAMknE,GAEV,sBAAjBA,GAAwCzqE,KAAKqmB,MAAMmX,mBACrDx9B,KAAKqlB,MAAMu0C,GAASc,iCAAkC,CAAEp1C,GAAI/hB,IACvDA,EAAuC20C,SACnCv4B,MAAM08B,2BAA2B94C,EAAMknE,EAAclnD,GAIzD5D,MAAM08B,2BAA2B94C,EAAM8C,EAAMkd,EACrD,CAEDmnD,4BAA4BnnE,IACrBA,EAAKsB,MAAQtB,EAAK4f,GAGrBnjB,KAAKynE,gBAAgBlkE,EAAK4f,GAAIsT,IAE9B9W,MAAM+qD,4BAA4BnnE,EAErC,CAEDonE,2BAA2BC,GACzBA,EAAMplE,SAAQjC,IACO,0BAAf,MAAAA,OAAA,EAAAA,EAAM8C,OACRrG,KAAKqlB,MAAMu0C,GAAS6D,yBAA0B,CAC5Cn4C,GAAI/hB,EAAKmyC,gBAEZ,GAEJ,CAED4J,iBACED,EAEAwrB,GAOA,OADA7qE,KAAK2qE,2BAA2BtrB,GACzBA,CACR,CAEDI,eACEC,EACAC,EACAC,EACAn7B,GAEA,MAAMlhB,EAAOoc,MAAM8/B,eACjBC,EACAC,EACAC,EACAn7B,GAOF,MAJkB,oBAAdlhB,EAAK8C,MACPrG,KAAK2qE,2BAA2BpnE,EAAKw3B,UAGhCx3B,CACR,CAED2iB,eACEC,EACA5B,EACAC,EACA4B,EACAC,GAEA,IAAKrmB,KAAKwsC,yBAA2BxsC,KAAK4gC,MAAL,IAAqB,CAIxD5gC,KAAKqmB,MAAMgY,oBAAqB,EAChCr+B,KAAKu0B,OAEL,MAAMu2C,EAAoB9qE,KAAKwvC,YAC7BjrB,EACAC,GAGF,OADAsmD,EAAkB7pD,WAAakF,EACxBnmB,KAAK6jB,WAAWinD,EAAmB,sBAC3C,CAED,IAAIC,GAAiB,EACrB,GACE/qE,KAAK4gC,MAAL,KACA,KAAA5gC,KAAK6jC,oBACL,CACA,GAAIzd,EAEF,OADAC,EAAMG,MAAO,EACNL,EAETE,EAAMC,oBAAsBykD,GAAiB,EAC7C/qE,KAAKu0B,MACN,CAGD,GAAIv0B,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,IAA0B,CACjD,IAAIoqC,EAIJ,MAAM/+D,EAASjM,KAAK+oE,oBAAmB,KACrC,IAAK3iD,GAAWpmB,KAAKirE,qBAAqB9kD,GAAO,CAG/C,MAAM+kD,EAAelrE,KAAK6pE,oCACxBtlD,EACAC,GAEF,GAAI0mD,EACF,OAAOA,CAEV,CAED,MAAM1nB,EAAgBxjD,KAAK+pE,mCAC3B,IAAKvmB,EAAe,OAEpB,GAAIunB,IAAmB/qE,KAAK4gC,MAAL,IAErB,YADAoqC,EAAuBhrE,KAAKqmB,MAAMwY,eAIpC,GAAInM,GAAgB1yB,KAAKqmB,MAAMhgB,MAAO,CACpC,MAAM4F,EAAS0T,MAAMwrD,8BACnBhlD,EACA5B,EACAC,EACA6B,GAGF,OADApa,EAAO6W,eAAiB0gC,EACjBv3C,CACR,CAED,IAAKma,GAAWpmB,KAAKojC,IAAL,IAAqB,CACnC,MAAM7/B,EAAOvD,KAAKwvC,YAEhBjrB,EAAUC,GAkBZ,OAjBAjhB,EAAKmiB,OAASS,EAGd5iB,EAAKtB,UAAYjC,KAAKojD,6BAAL,IAEK,GAItBpjD,KAAK2qE,2BAA2BpnE,EAAKtB,WAErCsB,EAAKuf,eAAiB0gC,EAClBn9B,EAAMC,sBACP/iB,EAA0CkiB,SACzCslD,GAGG/qE,KAAKulB,qBAAqBhiB,EAAM8iB,EAAMC,oBAC9C,CAED,MAAM8kD,EAAYprE,KAAKqmB,MAAMhgB,KAC7B,GAEE,KAAA+kE,GAAA,KAEAA,GAEC,KAAAA,GACCv5C,EAAwBu5C,KACvBprE,KAAKwsC,wBAGR,OAGF,MAAMjpC,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAIF,OAFAjhB,EAAK0d,WAAakF,EAClB5iB,EAAKuf,eAAiB0gC,EACfxjD,KAAK6jB,WAAWtgB,EAAM,4BAA7B,IAOF,GAJIynE,GACFhrE,KAAKmX,WAAW6zD,EAAhB,IAGE/+D,EAYF,MAVkB,8BAAhBA,EAAO5F,OACNrG,KAAK4gC,MACH,KAAA5gC,KAAK4gC,MACJ,UAAA5gC,KAAK6jC,sBAET7jC,KAAKqlB,MACHu0C,GAASoC,kDACT,CAAE12C,GAAItlB,KAAKqmB,MAAM7B,WAGdvY,CAEV,CAED,OAAO0T,MAAMuG,eAAeC,EAAM5B,EAAUC,EAAU4B,EAASC,EAChE,CAEDo9B,eAAelgD,GAA6B,MAC1Coc,MAAM8jC,eAAelgD,GAErB,MAAM,OAAEmiB,GAAWniB,EAED,8BAAhBmiB,EAAOrf,MACP,SAACqf,EAAOvE,QAAPkqD,EAActpD,gBAEfxe,EAAKuf,eAAiB4C,EAAO5C,eAC7Bvf,EAAKmiB,OAASA,EAAOzE,WAExB,CAEDqqD,YACElsB,EACAmsB,EACAC,EACAC,GAEA,GACEj5C,GAAwB,IAAUi5C,IACjCzrE,KAAKwsC,yBACNxsC,KAAK+rC,aAAL,IACA,CACA,MAAMxoC,EAAOvD,KAAKwvC,YAChB+7B,EACAC,GAEFjoE,EAAK0d,WAAam+B,EAClB,MAAM1xB,EAAS1tB,KAAKwhE,gCASpB,OAPEj+D,EAAKmyC,eADHhoB,GAGoB1tB,KAAKonE,sBAE7BpnE,KAAK6jB,WAAWtgB,EAAM,kBAEtBvD,KAAK0rE,eACE1rE,KAAKsrE,YAEV/nE,EACAgoE,EACAC,EACAC,EAEH,CAED,OAAO9rD,MAAM2rD,YAAYlsB,EAAMmsB,EAAcC,EAAcC,EAC5D,CAED/pB,kBACE5tB,EACAtP,EACAmnD,EACA7mD,GAIK9kB,KAAKqmB,MAAMmX,kBACd7d,MAAM+hC,kBAAkB5tB,EAAMtP,EAAUmnD,EAAe7mD,EAE1D,CAWD8mD,wBAAyB,CAEzBr1B,YACEhzC,GAGA,GADAA,EAAKgwC,WAAa,QAEhB/hB,EAAkBxxB,KAAKqmB,MAAMhgB,OAC7BrG,KAAK4gC,MADL,KAEA5gC,KAAK4gC,MAAL,GACA,CACA,IAAIirC,EAAQ7rE,KAAKujC,YAgBjB,GAbEvjC,KAAK+rC,aAAL,WAEA8/B,EAAMxlE,MAFN,KAIAwlE,EAAMxlE,MAEN,KAAAwlE,EAAMxlE,OAEN9C,EAAKgwC,WAAa,OAClBvzC,KAAKu0B,OACLs3C,EAAQ7rE,KAAKujC,aAGX/R,EAAkBxxB,KAAKqmB,MAAMhgB,OAAS,KAAAwlE,EAAMxlE,KAC9C,OAAOrG,KAAKyoE,+BACVllE,EAGL,CAED,MAAMuoE,EAAansD,MAAM42B,YAAYhzC,GAiBrC,MAX4B,SAA1BuoE,EAAWv4B,YAEXu4B,EAAW7lD,WAAW5gB,OAAS,GAEG,2BAAlCymE,EAAW7lD,WAAW,GAAG5f,MAEzBrG,KAAKqlB,MAAMu0C,GAASwD,uCAAwC,CAC1D93C,GAAIwmD,IAIDA,CACR,CAED/lD,YAAYxiB,GACV,GAAIvD,KAAK4gC,MAAL,IAYF,OAVA5gC,KAAKu0B,OAEHv0B,KAAK+rC,aAAL,MACA,KAAA/rC,KAAK6jC,qBAELtgC,EAAKgwC,WAAa,OAClBvzC,KAAKu0B,QAELhxB,EAAKgwC,WAAa,QAEbvzC,KAAKyoE,+BACVllE,GACe,GAEZ,GAAIvD,KAAKojC,IAAL,IAAiB,CAE1B,MAAMpyB,EAASzN,EAGf,OAFAyN,EAAOiQ,WAAatB,MAAMk1B,kBAC1B70C,KAAK2sC,YACE3sC,KAAK6jB,WAAW7S,EAAQ,qBAChC,CAAM,GAAIhR,KAAKqsC,cAAL,IAA4B,CAErC,MAAM8R,EAAO56C,EAKb,OAHAvD,KAAKssC,iBAAL,KACA6R,EAAKh7B,GAAKnjB,KAAKm1C,kBACfn1C,KAAK2sC,YACE3sC,KAAK6jB,WAAWs6B,EAAM,+BAC9B,CAWC,OATEn+C,KAAK+rC,aACL,UAAA/rC,KAAKujC,YAAYl9B,MAEjBrG,KAAKu0B,OACLhxB,EAAKmzC,WAAa,QAElBnzC,EAAKmzC,WAAa,QAGb/2B,MAAMoG,YACXxiB,EAGL,CAEDwoE,kBACE,OACE/rE,KAAK+rC,aAAL,MADF,KACqC/rC,KAAKujC,YAAYl9B,IAEvD,CAEDu2C,+BACE,GAAI58C,KAAK+rE,kBAAmB,CAC1B,MAAMC,EAAMhsE,KAAK2jB,YAGjB,OAFA3jB,KAAKu0B,OACLy3C,EAAIxH,UAAW,EACRxkE,KAAKqpE,WAAW2C,GAAK,GAAM,EACnC,CAID,GAAIhsE,KAAK4gC,MAAL,KAA2B,CAC7B,MAAM30B,EAASjM,KAAKwnE,4BAClBxnE,KAAK2jB,aAEP,GAAI1X,EAAQ,OAAOA,CACpB,CAED,OAAO0T,MAAMi9B,8BACd,CAED0sB,kBACE/lE,EACAuP,EACAm5D,GAAmC,GAEnC,MAAM,iBAAEzuC,GAAqBx9B,KAAKqmB,MAC5BgtB,EAAc1zB,MAAM2pD,kBACxB/lE,EACAuP,EACAm5D,GAA2BzuC,GAG7B,IAAKA,EAAkB,OAAO6V,EAE9B,IAAK,MAAM,GAAElwB,EAAF,KAAMub,KAAU2U,EAAY64B,aAEhCxtC,IAUQ,UAAT5rB,GAAsBqQ,EAAGuyB,eAC3B11C,KAAKqlB,MAAMu0C,GAAS8B,sCAAuC,CACzDp2C,GAAIoZ,IAGQ,kBAAdA,EAAKr4B,MACS,mBAAdq4B,EAAKr4B,MACS,mBAAdq4B,EAAKr4B,MACS,kBAAdq4B,EAAKr4B,OACU,oBAAdq4B,EAAKr4B,MAA8Bq4B,EAAKytC,YAAY9mE,OAAS,KAC7D+mE,GAAsB1tC,IAEvB1+B,KAAKqlB,MACHu0C,GAASU,oEACT,CAAEh1C,GAAIoZ,KAKZ,OAAO2U,CACR,CAEDg5B,sBACEx9D,EACAqT,GAEA,GAAIliB,KAAK4gC,MAAoB,KAAA5gC,KAAKosC,sBAAsB,QAAS,CAC/D,MAAM7oC,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAK6sC,OAAL,IACO7sC,KAAKkoE,uBAAuB3kE,EAAM,CAAEmwC,OAAO,GACnD,CAED,GAAI1zC,KAAK+rC,aAAL,KACF,OAAO/rC,KAAKkoE,uBACVloE,KAAK2jB,aAIT,GAAI3jB,KAAK+rC,aAAL,KAAkC,CACpC,MAAM9/B,EAASjM,KAAKwnE,4BAA4BxnE,KAAK2jB,aACrD,GAAI1X,EAAQ,OAAOA,CACpB,CAED,OAAO0T,MAAM0sD,sBAAsBx9D,EAASqT,EAC7C,CAEDoqD,sBACE,OAAOtsE,KAAKo+D,gBAAgB,CAAC,SAAU,YAAa,WACrD,CAEDmO,mBAAmBxtB,EAAaqc,GAC9B,OAAOA,EAAU5yB,MAAKoyB,GAChBmD,GAAmBnD,GACd7b,EAAOogB,gBAAkBvE,IAEzB7b,EAAO6b,IAEnB,CAED2D,0BACE,OACEv+D,KAAK+rC,aACL,MAFF,MAEE/rC,KAAK6jC,mBAER,CAEDib,iBACEr8B,EACAs8B,EACA14B,GAEA,MAAM+0C,EAAY,CAChB,UACA,UACA,SACA,YACA,WACA,WACA,WACA,UAEFp7D,KAAKy+D,iBAAiB,CACpBC,SAAU3f,EACVsf,iBAAkBjD,EAClBuD,oBAAqB,CAAC,KAAM,OAC5BL,+BAA+B,EAC/BM,cAAehF,GAASiC,0CAG1B,MAAM2Q,EAAmC,KACnCxsE,KAAKu+D,2BACPv+D,KAAKu0B,OACLv0B,KAAKu0B,OACDv0B,KAAKusE,mBAAmBxtB,EAAQqc,IAClCp7D,KAAKqlB,MAAMu0C,GAASsD,8BAA+B,CACjD53C,GAAItlB,KAAKqmB,MAAMwY,gBAGnBlf,MAAM8sD,sBACJhqD,EACAs8B,IAGF/+C,KAAK0sE,6BACHjqD,EACAs8B,EACA14B,IACE04B,EAAO1F,OAEZ,EAEC0F,EAAO7G,QACTl4C,KAAKmpE,mBAAmBqD,GAExBA,GAEH,CAEDE,6BACEjqD,EACAs8B,EACA14B,EACA+yB,GAEA,MAAM2pB,EAAM/iE,KAAKsiE,yBACfvjB,GAEF,GAAIgkB,EAmBF,OAlBAtgD,EAAU5d,KAAKY,KAAKs9D,GAEfhkB,EAAeylB,UAClBxkE,KAAKqlB,MAAMu0C,GAASyB,0BAA2B,CAAE/1C,GAAIy5B,IAElDA,EAAeogB,eAClBn/D,KAAKqlB,MAAMu0C,GAAS0B,+BAAgC,CAClDh2C,GAAIy5B,EACJ6b,SAAW7b,EAAeogB,gBAGzBpgB,EAAe7G,SAClBl4C,KAAKqlB,MAAMu0C,GAAS2B,yBAA0B,CAAEj2C,GAAIy5B,SAEjDA,EAAeqrB,UAClBpqE,KAAKqlB,MAAMu0C,GAAS4B,0BAA2B,CAAEl2C,GAAIy5B,MAMpD/+C,KAAKqmB,MAAMoX,iBAAoBshB,EAAeylB,UACjDxkE,KAAKqlB,MAAMu0C,GAASwC,kCAAmC,CACrD92C,GAAIy5B,IAIHA,EAAeqrB,WACb/jD,EAAMsmD,eACT3sE,KAAKqlB,MAAMu0C,GAAS2C,sBAAuB,CAAEj3C,GAAIy5B,KAMrDp/B,MAAM+sD,6BACJjqD,EACAs8B,EACA14B,EACA+yB,EAEH,CAEDwzB,6BACEC,GAEA,MAAMpnD,EAAWzlB,KAAKojC,IAAtB,IACI3d,IAAUonD,EAAapnD,UAAW,GAEjConD,EAAqBlK,UAAY3iE,KAAK4gC,MAAL,KACpC5gC,KAAKqlB,MAAMu0C,GAASS,uBAAwB,CAAE/0C,GAAIunD,IAG/CA,EAAqB30B,SAAWl4C,KAAK4gC,MAAL,KACnC5gC,KAAKqlB,MAAMu0C,GAASQ,sBAAuB,CAAE90C,GAAIunD,GAEpD,CAODrwB,yBACEj5C,EACAk5C,GAEA,MAAM0B,EACU,eAAd1B,EAAKp2C,KAEDrG,KAAKypE,2BAA2BlmE,EAAMk5C,QACtCvuC,EACN,OAAOiwC,GAAQx+B,MAAM68B,yBAAyBj5C,EAAMk5C,EACrD,CAIDC,+BACE,QAAI18C,KAAKiqE,wBACFtqD,MAAM+8B,8BACd,CAGDG,iBACEJ,EACAl4B,EACAC,EACAC,GAIA,IAAKzkB,KAAKqmB,MAAM+W,yBAA2Bp9B,KAAK4gC,MAAL,IACzC,OAAOjhB,MAAMk9B,iBACXJ,EACAl4B,EACAC,EACAC,GAIJ,MAAMxY,EAASjM,KAAK8sC,UAAS,IAC3BntB,MAAMk9B,iBAAiBJ,EAAMl4B,EAAUC,KAGzC,OAAKvY,EAAO1I,MAQR0I,EAAOkB,QAAOnN,KAAKqmB,MAAQpa,EAAOihC,WAC/BjhC,EAAO1I,OARR0I,EAAOkB,OAETwS,MAAMm9B,2BAA2Br4B,EAAqBxY,EAAOkB,OAGxDsvC,EAIV,CAIDuB,eACEz6C,EACAghB,EACAC,GAWA,GATAjhB,EAAOoc,MAAMq+B,eAAez6C,EAAMghB,EAAUC,GACxCxkB,KAAKojC,IAAL,MACF7/B,EAAKkiB,UAAW,EAIhBzlB,KAAKinB,iBAAiB1jB,IAGpBvD,KAAK4gC,MAAL,IAAsB,CACxB,MAAMqd,EAAej+C,KAAKwvC,YACxBjrB,EACAC,GAKF,OAHAy5B,EAAah9B,WAAa1d,EAC1B06C,EAAavI,eAAiB11C,KAAK0gE,wBAE5B1gE,KAAK6jB,WAAWo6B,EAAc,uBACtC,CAED,OAAO16C,CACR,CAED66C,uBACE76C,GAEA,IAAKvD,KAAKqmB,MAAMmX,kBAAoBx9B,KAAK+rC,aAAL,KAClC,OAAO/rC,KAAKmpE,oBAAmB,IAAMnpE,KAAKo+C,uBAAuB76C,KAInE,MAAMghB,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAEtBsoD,EAAY9sE,KAAKqsC,cAAvB,KAEA,GACEygC,IACC9sE,KAAK+rC,aAAL,OAAmC/rC,KAAK08C,gCAEzC,MAAM18C,KAAKqlB,MAAMu0C,GAASqB,kCAAmC,CAC3D31C,GAAItlB,KAAKqmB,MAAM7B,WAInB,MAAMuoD,EAAev7C,EAAkBxxB,KAAKqmB,MAAMhgB,MAC5CgtC,EACH05B,GAAgB/sE,KAAKwpE,+BACtB7pD,MAAMy+B,uBAAuB76C,GAE/B,OAAK8vC,IAGkB,2BAArBA,EAAYhtC,MACS,2BAArBgtC,EAAYhtC,MACZymE,KAEAvpE,EAAKmzC,WAAa,QAGhBo2B,IAEF9sE,KAAKgnB,mBAAmBqsB,EAAa9uB,EAAUC,GAE/C6uB,EAAY6E,SAAU,GAGjB7E,GAjBkB,IAkB1B,CAEDsL,aACEp7C,EACAq7C,EACAC,EAEA5lB,GAEA,KAAM2lB,GAAeC,IAAe7+C,KAAK+rC,aAAL,KAClC,OAGFpsB,MAAMg/B,aACJp7C,EACAq7C,EACAC,EACCt7C,EAAa20C,QAAUzhB,GAAkBP,IAE5C,MAAMpT,EAAiB9iB,KAAKshE,yBAC1BthE,KAAK+gE,sBAAsB3yD,KAAKpO,OAE9B8iB,IAAgBvf,EAAKuf,eAAiBA,EAC3C,CAEDkqD,6BACEzpE,IAEKA,EAAKkiB,UAAYzlB,KAAKojC,IAAL,MACpB7/B,EAAK0pE,UAAW,GAGlB,MAAM5mE,EAAOrG,KAAKyiE,2BACdp8D,IAAM9C,EAAKmyC,eAAiBrvC,EACjC,CAEDyd,mBAAmBvgB,GAYjB,GAXAvD,KAAKgtE,6BAA6BzpE,GAGhCvD,KAAKqmB,MAAMmX,oBACTj6B,EAAKo/D,UAAap/D,EAAKmyC,iBACzB11C,KAAK4gC,MAAL,KAEA5gC,KAAKqlB,MAAMu0C,GAASa,gCAAiC,CACnDn1C,GAAItlB,KAAKqmB,MAAM7B,WAGfjhB,EAAKihE,UAAYxkE,KAAK4gC,MAAL,IAAmB,CACtC,MAAM,IAAEv/B,GAAQkC,EAChBvD,KAAKqlB,MAAMu0C,GAASG,+BAAgC,CAClDz0C,GAAItlB,KAAKqmB,MAAM7B,SACfw1C,aACe,eAAb34D,EAAIgF,MAA0B9C,EAAKqgB,SAE3B,IAAA5jB,KAAKi8B,MAAM+C,MAAM39B,EAAIoO,MAAOpO,EAAIqO,QADpCrO,EAAImH,MAGb,CAED,OAAOmX,MAAMmE,mBAAmBvgB,EACjC,CAEDygB,0BACEzgB,GAiBA,OAdIA,EAAKihE,UACPxkE,KAAKqlB,MAAMu0C,GAAS4C,0BAA2B,CAAEl3C,GAAI/hB,IAInDA,EAAK47D,eACPn/D,KAAKqlB,MAAMu0C,GAAS6C,+BAAgC,CAClDn3C,GAAI/hB,EAEJq3D,SAAUr3D,EAAK47D,gBAInBn/D,KAAKgtE,6BAA6BzpE,GAC3Boc,MAAMqE,0BAA0BzgB,EACxC,CAEDif,gBACEC,EACAb,EACAc,EACAlB,EACAmB,EACAC,GAEA,MAAME,EAAiB9iB,KAAKshE,2BACxBx+C,GAAkBH,GACpB3iB,KAAKqlB,MAAMu0C,GAASW,6BAA8B,CAChDj1C,GAAIxC,IAKR,MAAM,QAAEo1B,GAAU,EAAZ,KAAmBplC,GAAS8O,GAE9Bs2B,GAAqB,QAATplC,GAA2B,QAATA,GAChC9S,KAAKqlB,MAAMu0C,GAASY,gBAAiB,CAAEl1C,GAAI1D,EAAQ9O,SAEjDgQ,IAAgBlB,EAAOkB,eAAiBA,GAC5CnD,MAAM6C,gBACJC,EACAb,EACAc,EACAlB,EACAmB,EACAC,EAEH,CAEDs9B,uBACEz9B,EACAb,EACAc,EACAlB,GAEA,MAAMsB,EAAiB9iB,KAAKshE,2BACxBx+C,IAAgBlB,EAAOkB,eAAiBA,GAC5CnD,MAAMugC,uBAAuBz9B,EAAWb,EAAQc,EAAalB,EAC9D,CAED0rD,iCACE3pE,EACAuP,GAEkB,oBAAdvP,EAAK8C,OAES,qBAAd9C,EAAK8C,MAAgC9C,EAAKK,MAAMiB,OAEpD8a,MAAMutD,iCAAiC3pE,EAAMuP,EAC9C,CAEDqtC,gBAAgB58C,GACdoc,MAAMwgC,gBAAgB58C,GAElBA,EAAKic,aAAexf,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAA9C,OAEFr9B,EAAK68C,oBAAsBpgD,KAAK+pE,oCAE9B/pE,KAAKqsC,cAAL,OACF9oC,EAAK2zC,WAAal3C,KAAKqnE,sBAAsB,cAEhD,CAED7mB,kBACEt8B,EACAK,EACAC,EACA9B,EACAlB,EACA2C,EACAC,EACAK,GAEA,MAAM3B,EAAiB9iB,KAAKshE,2BAG5B,OAFIx+C,IAAgBoB,EAAKpB,eAAiBA,GAEnCnD,MAAM6gC,kBACXt8B,EACAK,EACAC,EACA9B,EACAlB,EACA2C,EACAC,EACAK,EAEH,CAEDm9B,oBAAoBr+C,EAAkBs+C,GACpC,MAAM/+B,EAAiB9iB,KAAKshE,2BACxBx+C,IAAgBvf,EAAKuf,eAAiBA,GAC1CnD,MAAMiiC,oBAAoBr+C,EAAMs+C,EACjC,CAGDC,WACE3D,EACArrC,GAEA6M,MAAMmiC,WAAW3D,EAAMrrC,GAEJ,eAAjBqrC,EAAKh7B,GAAG9c,OACPrG,KAAKwsC,yBACNxsC,KAAKojC,IAAL,MAEA+a,EAAK8uB,UAAW,GAGlB,MAAM5mE,EAAOrG,KAAKyiE,2BACdp8D,IACF83C,EAAKh7B,GAAGuyB,eAAiBrvC,EACzBrG,KAAKinB,iBAAiBk3B,EAAKh7B,IAE9B,CAGD4+B,kCACEx+C,EACAoK,GAKA,OAHI3N,KAAK4gC,MAAL,MACFr9B,EAAKkyC,WAAaz1C,KAAK0gE,yBAElB/gD,MAAMoiC,kCAAkCx+C,EAAMoK,EACtD,CAED2vC,iBACE74B,EACAw9B,GACc,kBAGd,IAAI57B,EACA67B,EACAirB,EAuCArqD,EArCJ,GACE9iB,KAAK4lB,UAAU,SACd5lB,KAAK4gC,MAAL,MAA8B5gC,KAAK4gC,MADpC,KAEA,CAWA,GATAva,EAAQrmB,KAAKqmB,MAAM/H,QAEnB4jC,EAAMliD,KAAK8sC,UACT,IAAMntB,MAAM29B,iBAAiB74B,EAAqBw9B,IAClD57B,IAKG67B,EAAI/0C,MAAO,OAAO+0C,EAAI3+C,KAK3B,MAAM,QAAEsL,GAAY7O,KAAKqmB,MACnB87B,EAAiBtzC,EAAQA,EAAQxJ,OAAS,GAC5C88C,IAAmBvvB,EAAGrL,QAAU46B,IAAmBvvB,EAAGnL,QACxD5Y,EAAQtJ,KAEX,CAED,IAAI,SAAC28C,KAAAkrB,EAAKjgE,SAAUnN,KAAK4gC,MAAL,IAClB,OAAOjhB,MAAM29B,iBAAiB74B,EAAqBw9B,GAQhD57B,GAASA,IAAUrmB,KAAKqmB,QAAOA,EAAQrmB,KAAKqmB,MAAM/H,SAGvD,MAAM+L,EAAQrqB,KAAK8sC,UAASsV,IAAS,QAEnCt/B,EAAiB9iB,KAAKuhE,wBACtB,MAAM9kB,EAAO98B,MAAM29B,iBACjB74B,EACAw9B,GAmCF,OA/BgB,4BAAdxF,EAAKp2C,MAAL,SACAo2C,EAAKt7B,QAALq+B,EAAYz9B,gBAEZqgC,IAIoC,KAAlC,SAAAt/B,QAAA,IAAgBjB,OAAOxc,SACzBrF,KAAKyvC,2BAA2BgN,EAAM35B,GAExC25B,EAAK35B,eAAiBA,EAqBf25B,CAAP,GACCp2B,GAGH,IAAKgE,EAAMld,QAAUkd,EAAM+iB,QAMzB,OAFItqB,GAAgB9iB,KAAKqtE,6BAA6BvqD,GAE/CuH,EAAM9mB,KAGf,IAAK2+C,IAIHyX,IAAQ35D,KAAK4lB,UAAU,QAIvBunD,EAAWntE,KAAK8sC,UACd,IAAMntB,MAAM29B,iBAAiB74B,EAAqBw9B,IAClD57B,IAIG8mD,EAAShgE,OAAO,OAAOggE,EAAS5pE,KAGvC,YAAI2+C,IAAAO,EAAKl/C,KAGP,OADAvD,KAAKqmB,MAAQ67B,EAAIhV,UACVgV,EAAI3+C,KAGb,GAAI8mB,EAAM9mB,KAKR,OAHAvD,KAAKqmB,MAAQgE,EAAM6iB,UACfpqB,GAAgB9iB,KAAKqtE,6BAA6BvqD,GAE/CuH,EAAM9mB,KAGf,YAAI4pE,IAAAG,EAAU/pE,KAGZ,OADAvD,KAAKqmB,MAAQ8mD,EAASjgC,UACfigC,EAAS5pE,KAGlB,UAAI2+C,EAAAA,IAAAQ,EAAKvV,OAAQ,MAAM+U,EAAI/0C,MAC3B,GAAIkd,EAAM8iB,OAAQ,MAAM9iB,EAAMld,MAC9B,UAAIggE,EAAAA,IAAAI,EAAUpgC,OAAQ,MAAMggC,EAAShgE,MAErC,MAAM,SAAA+0C,QAAA,IAAK/0C,QAASkd,EAAMld,QAAS,OAAAggE,EAAAA,QAAA,IAAUhgE,MAC9C,CAEDkgE,6BAA6B9pE,GAAW,MAEb,IAAvBA,EAAKse,OAAOxc,QACZ,OAAC9B,EAAAA,EAAK4d,QAAL08B,EAAY2vB,gBACbxtE,KAAKgjB,gBAAgB,aAAc,6BAEnChjB,KAAKqlB,MAAMu0C,GAAS+C,uBAAwB,CAAEr3C,GAAI/hB,GAErD,CAGD0hE,gBACExgD,EACAgpD,GAEA,OAAKztE,KAAK4lB,UAAU,QAAU5lB,KAAK4gC,MAAL,IACrB5gC,KAAKmnE,uBAELxnD,MAAMslD,gBAAgBxgD,EAAqBgpD,EAErD,CAED9qB,WACEp/C,GAEA,GAAIvD,KAAK4gC,MAAL,IAAsB,CAIxB,MAAM30B,EAASjM,KAAK8sC,UAASsV,IAC3B,MAAM3M,EAAaz1C,KAAKiiE,qCAAxB,IAIA,OADIjiE,KAAKusC,sBAAyBvsC,KAAK4gC,MAAL,KAAsBwhB,IACjD3M,CAAP,IAGF,GAAIxpC,EAAOmhC,QAAS,OAEfnhC,EAAOkhC,SACNlhC,EAAOkB,QAAOnN,KAAKqmB,MAAQpa,EAAOihC,WAEtC3pC,EAAKkyC,WAAaxpC,EAAO1I,KAE5B,CAED,OAAOoc,MAAMgjC,WAAWp/C,EACzB,CAGDk9C,6BAA6B3E,GACvB97C,KAAKojC,IAAL,MAEe,eAAf0Y,EAAMz1C,MACLrG,KAAKqmB,MAAMmX,kBACXx9B,KAAKqmB,MAAMgX,QAEZr9B,KAAKqlB,MAAMu0C,GAAS/nB,kBAAmB,CAAEvsB,GAAIw2B,IAG9CA,EAA8Br2B,UAAW,GAE5C,MAAMpf,EAAOrG,KAAKyiE,2BAIlB,OAHIp8D,IAAMy1C,EAAMpG,eAAiBrvC,GACjCrG,KAAKinB,iBAAiB60B,GAEfA,CACR,CAEDj3B,aAAathB,EAAcuhB,GACzB,OAAQvhB,EAAK8C,MACX,IAAK,uBACH,OAAOrG,KAAK6kB,aAAathB,EAAK0d,WAAY6D,GAC5C,IAAK,sBACH,OAAO,EACT,QACE,OAAOnF,MAAMkF,aAAathB,EAAMuhB,GAErC,CAEDC,aAAaxhB,EAAcyhB,GAAiB,GAC1C,OAAQzhB,EAAK8C,MACX,IAAK,0BACHrG,KAAK0tE,oCAAoCnqE,EAAMyhB,GAC/C,MACF,IAAK,iBACL,IAAK,sBACL,IAAK,kBACCA,EACFhlB,KAAKwuC,gBAAgB/D,iCACnBmvB,GAAS8D,8BACT,CAAEp4C,GAAI/hB,IAGRvD,KAAKqlB,MAAMu0C,GAAS8D,8BAA+B,CAAEp4C,GAAI/hB,IAE3DvD,KAAK+kB,aAAaxhB,EAAK0d,WAAY+D,GACnC,MACF,IAAK,uBACEA,GAA4B,yBAAnBzhB,EAAK67C,KAAK/4C,OACtB9C,EAAK67C,KAAOp/C,KAAKk8C,oBAAoB34C,EAAK67C,OAG9C,QACEz/B,MAAMoF,aAAaxhB,EAAMyhB,GAE9B,CAED0oD,oCAAoCnqE,EAAcyhB,GAChD,OAAQzhB,EAAK0d,WAAW5a,MACtB,IAAK,iBACL,IAAK,sBACL,IAAK,kBACL,IAAK,0BACHrG,KAAK+kB,aAAaxhB,EAAK0d,WAAY+D,GACnC,MACF,QACErF,MAAMoF,aAAaxhB,EAAMyhB,GAE9B,CAED2oD,sBAAsBpqE,EAAcqqE,GAClC,OAAQrqE,EAAK8C,MACX,IAAK,iBACL,IAAK,kBACL,IAAK,sBACHrG,KAAK2tE,sBAAsBpqE,EAAK0d,YAAY,GAC5C,MACF,QACEtB,MAAMguD,sBAAsBpqE,EAAMqqE,GAEvC,CAGDlpD,YACEre,EAMAse,EACAC,GAEA,OACE40C,GACE,CAIEqU,sBAAsB,EACtBC,oBAAqB,YACrBC,oBAAqB,aACrBC,gBAAiBppD,IAAY8R,KAC1B/R,IAA8B,CAAC,cAAc,GAChDspD,iBAAkBrpD,IAAY8R,KAC3B/R,IAA8B,CAAC,cAAc,IAElDte,IACGsZ,MAAM+E,YAAYre,EAAMse,EAA2BC,EAE3D,CAED+8B,mBACE,OAAQ3hD,KAAKqmB,MAAMhgB,MACjB,KAAK,GAEH,OAAOrG,KAAKm1C,iBAA8B,GAC5C,QACE,OAAOx1B,MAAMgiC,mBAElB,CAEDusB,6BAA6BzxB,GAE3B,GAAIz8C,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,IAA0B,CACjD,MAAM4iB,EAAgBxjD,KAAK+pE,mCAE3B,GAAI/pE,KAAK4gC,MAAL,IAAuB,CACzB,MAAMjzB,EAAOgS,MAAMuuD,6BAA6BzxB,GAEhD,OADA9uC,EAAKmV,eAAiB0gC,EACf71C,CACR,CAED3N,KAAKmX,WAAW,KAAhB,GACD,CAED,OAAOwI,MAAMuuD,6BAA6BzxB,EAC3C,CAED0xB,oBACEzuB,GAEA,OACE1/C,KAAKqmB,MAAMmX,kBACXx9B,KAAK4gC,MAAL,KACA5gC,KAAK6jC,sBAAwB6b,GAE7B1/C,KAAKu0B,QACE,GAEA5U,MAAMwuD,oBAAoBzuB,EAEpC,CAODI,gBACE,OAAO9/C,KAAK4gC,MAAgB,KAAAjhB,MAAMmgC,eACnC,CAEDC,kBACE,OACE//C,KAAK4gC,MAAkB,KAAA5gC,KAAK4gC,MAA5B,KAA+CjhB,MAAMogC,iBAExD,CAEDW,kBACEn8B,EACAC,EACA46B,GAEA,MAAM77C,EAAOoc,MAAM+gC,kBAAkBn8B,EAAUC,EAAU46B,GAYzD,MATgB,sBAAd77C,EAAK8C,MACL9C,EAAKmyC,gBACLnyC,EAAK00C,MAAMxoC,MAAQlM,EAAKmyC,eAAejmC,OAEvCzP,KAAKqlB,MAAMu0C,GAASuD,0BAA2B,CAC7C73C,GAAI/hB,EAAKmyC,iBAINnyC,CACR,CAGD+gC,iBAAiB9gC,GACf,GAAIxD,KAAKqmB,MAAMgX,OAAQ,CACrB,GAAa,KAAT75B,EACF,OAAOxD,KAAKqlC,SAAgB,MAE9B,GAAa,KAAT7hC,EACF,OAAOxD,KAAKqlC,SAAgB,KAE/B,CACD,OAAO1lB,MAAM2kB,iBAAiB9gC,EAC/B,CAGDkoE,eACE,MAAM,KAAErlE,GAASrG,KAAKqmB,MACT,KAAThgB,GACFrG,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKmmC,gBACa,KAAT9/B,IACTrG,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKomC,eAER,CAED4jC,YACE,MAAM,KAAE3jE,GAASrG,KAAKqmB,MACtB,OAAa,KAAThgB,GACFrG,KAAKqmB,MAAM7H,KAAO,EAClBxe,KAAKqlC,SAAL,GAAqB,GACd,IAEFh/B,CACR,CAEDu3C,iBACEyB,EACAvB,EACA94B,GAEA,IAAK,IAAIxU,EAAI,EAAGA,EAAI6uC,EAASh6C,OAAQmL,IAAK,CACxC,MAAMisC,EAAO4C,EAAS7uC,GACH,0BAAf,MAAAisC,OAAA,EAAAA,EAAMp2C,QACRg5C,EAAS7uC,GAAKxQ,KAAKk8C,oBACjBO,GAGL,CACD98B,MAAMi+B,iBAAiByB,EAAUvB,EAAkB94B,EACpD,CAEDk3B,oBAAoB34C,GAKlB,OAJAA,EAAK0d,WAAWy0B,eAAiBnyC,EAAKmyC,eAEtC11C,KAAKinB,iBAAiB1jB,EAAK0d,WAAY1d,EAAKmyC,eAAet3B,IAAI1O,KAExDnM,EAAK0d,UACb,CAED2hC,iBAAiB/gC,GACf,OAAI7hB,KAAK4gC,MAAL,IACK/e,EAAO87B,OAAMlB,GAAQz8C,KAAK6kB,aAAa43B,GAAM,KAE/C98B,MAAMijC,iBAAiB/gC,EAC/B,CAEDmgC,wBACE,OAAOhiD,KAAK4gC,MAAmB,KAAAjhB,MAAMqiC,uBACtC,CAEDosB,0BAEE,OAAOzuD,MAAMyuD,2BAA6BpuE,KAAK+rE,iBAChD,CAED7T,gCACE30D,GAGA,GAAIvD,KAAK4gC,MAAL,KAAqB5gC,KAAK4gC,MAAL,IAA0B,CACjD,MAAM4iB,EAAgBxjD,KAAK+oE,oBAAmB,IAE5C/oE,KAAK+pE,qCAGHvmB,IAAejgD,EAAKuf,eAAiB0gC,EAC1C,CACD,OAAO7jC,MAAMu4C,gCAAgC30D,EAC9C,CAED8qE,kCACEzsD,GAEA,MAAM0sD,EAAY3uD,MAAM0uD,kCAAkCzsD,GACpDC,EAAS7hB,KAAK2hB,6BAA6BC,GAC3C2sD,EAAa1sD,EAAO,GACpB2sD,EAAkBD,GAAcvuE,KAAKigD,YAAYsuB,GAEvD,OAAOC,EAAkBF,EAAY,EAAIA,CAC1C,CAEDG,wBACE,MAAM3yB,EAAQn8B,MAAM8uD,wBACdpoE,EAAOrG,KAAKyiE,2BAOlB,OALIp8D,IACFy1C,EAAMpG,eAAiBrvC,EACvBrG,KAAKinB,iBAAiB60B,IAGjBA,CACR,CAEDqtB,mBAAsBvB,GACpB,MAAM8G,EAAsB1uE,KAAKqmB,MAAMmX,iBACvCx9B,KAAKqmB,MAAMmX,kBAAmB,EAC9B,IACE,OAAOoqC,GAGR,CAJD,QAGE5nE,KAAKqmB,MAAMmX,iBAAmBkxC,CAC/B,CACF,CAEDrF,WACE9lE,EACAq7C,EACAC,GAEA,MAAM8vB,EAAqB3uE,KAAKqmB,MAAMoX,gBACtCz9B,KAAKqmB,MAAMoX,kBAAqBl6B,EAAaihE,SAC7C,IACE,OAAO7kD,MAAM0pD,WAAW9lE,EAAMq7C,EAAaC,EAG5C,CAJD,QAGE7+C,KAAKqmB,MAAMoX,gBAAkBkxC,CAC9B,CACF,CAED/E,2BACErmE,GAEA,GAAIvD,KAAK4gC,MAAL,IAEF,OADAr9B,EAAKihE,UAAW,EACTxkE,KAAKqpE,WACV9lE,GACkB,GACD,GAEd,GAAIvD,KAAK+rC,aAAL,MAMT,IAAK/rC,KAAKysC,wBAKR,OAJAlpC,EAAKihE,UAAW,EAChBxkE,KAAKqlB,MAAMu0C,GAASyC,yCAA0C,CAC5D/2C,GAAI/hB,IAECvD,KAAKwnE,4BACVjkE,QAIJvD,KAAKmX,WAAW,KAAhB,GAEH,CAED0L,YAGEtf,EACAmf,EACAlB,EACAmB,EACAa,EACAnd,EACAod,GAEA,MAAM7B,EAASjC,MAAMkD,YACnBtf,EACAmf,EACAlB,EACAmB,EACAa,EACAnd,EACAod,GAGF,GAAI7B,EAAO4iD,SAAU,CACnB,MAAMoK,EAAU5uE,KAAK4lB,UAAU,YAEzBhE,EAAOhe,MAAMiB,OACb+c,EAAO/c,KACb,GAAI+pE,EAAS,CACX,MAAM,IAAEvtE,GAAQugB,EAChB5hB,KAAKqlB,MAAMu0C,GAASC,gCAAiC,CACnDv0C,GAAI1D,EACJk4C,WACe,eAAbz4D,EAAIgF,MAA0Bub,EAAOgC,SAE7B,IAAA5jB,KAAKi8B,MAAM+C,MAAM39B,EAAIoO,MAAOpO,EAAIqO,QADpCrO,EAAImH,MAGb,CACF,CACD,OAAOoZ,CACR,CAEDu/C,2BACE,MAAMb,EAAyBtgE,KAAKm1C,kBACpC,OAAiDmrB,EAAS93D,IAC3D,CAEDqmE,8BACE,QAAS7uE,KAAKgjB,gBAAgB,aAAc,MAC7C,CAEDvD,QAIE,OAHIzf,KAAK6uE,gCACP7uE,KAAKqmB,MAAMmX,kBAAmB,GAEzB7d,MAAMF,OACd,CAEDqvD,gBAIE,OAHI9uE,KAAK6uE,gCACP7uE,KAAKqmB,MAAMmX,kBAAmB,GAEzB7d,MAAMmvD,eACd,CAEDC,qBACExrE,EACAyrE,EACAC,EACA7tB,GAEA,OAAK4tB,GAAY5tB,GACfphD,KAAKkvE,mCACH3rE,GACe,EACf0rE,GAEKjvE,KAAK6jB,WAA8BtgB,EAAM,qBAElDA,EAAKmzC,WAAa,QACX/2B,MAAMovD,qBACXxrE,EACAyrE,EACAC,EACA7tB,GAEH,CAEDH,qBACEJ,EACAK,EACAC,EACAC,EAEAnoB,GAEA,OAAKioB,GAAoBE,GACvBphD,KAAKkvE,mCACHruB,GACe,EACfM,GAEKnhD,KAAK6jB,WAA8Bg9B,EAAW,qBAEvDA,EAAUtN,WAAa,QAChB5zB,MAAMshC,qBACXJ,EACAK,EACAC,EACAC,EACAD,EAAqBrqB,GAAsBb,IAE9C,CAEDi5C,mCACE3rE,EACA4rE,EACAC,GAEA,MAAMC,EAAcF,EAAW,WAAa,QACtCG,EAAeH,EAAW,QAAU,WAE1C,IACII,EADAC,EAAWjsE,EAAK8rE,GAGhBI,GAAmB,EACnBC,GAAoB,EAExB,MAAMtxD,EAAMoxD,EAASpxD,IAAI3O,MAOzB,GAAIzP,KAAK+rC,aAAL,IAA2B,CAE7B,MAAM4jC,EAAU3vE,KAAKm1C,kBACrB,GAAIn1C,KAAK+rC,aAAL,IAA2B,CAE7B,MAAM6jC,EAAW5vE,KAAKm1C,kBAClBzjB,EAA2B1xB,KAAKqmB,MAAMhgB,OAExCopE,GAAmB,EACnBD,EAAWG,EACXJ,EAAYJ,EACRnvE,KAAKm1C,kBACLn1C,KAAK6vE,wBACTH,GAAoB,IAGpBH,EAAYK,EACZF,GAAoB,E,MAEbh+C,EAA2B1xB,KAAKqmB,MAAMhgB,OAE/CqpE,GAAoB,EACpBH,EAAYJ,EACRnvE,KAAKm1C,kBACLn1C,KAAK6vE,0BAGTJ,GAAmB,EACnBD,EAAWG,E,MAEJj+C,EAA2B1xB,KAAKqmB,MAAMhgB,QAE/CopE,GAAmB,EACfN,GACFK,EAAWxvE,KAAKm1C,iBAAgB,GAC3Bn1C,KAAK+rC,aAAL,KACH/rC,KAAK0hD,kBACH8tB,EAAShnE,KACTgnE,EAASpxD,IAAI3O,OACb,GACA,IAIJ+/D,EAAWxvE,KAAK6vE,yBAGhBJ,GAAoBL,GACtBpvE,KAAKqlB,MACH8pD,EACIvV,GAAS0D,gCACT1D,GAASyD,gCACb,CAAE/3C,GAAIlH,IAIV7a,EAAK8rE,GAAeG,EACpBjsE,EAAK+rE,GAAgBC,EAErB,MAAMO,EAAUX,EAAW,aAAe,aAC1C5rE,EAAKusE,GAAWL,EAAmB,OAAS,QAExCC,GAAqB1vE,KAAKqsC,cAAL,MACvB9oC,EAAK+rE,GAAgBH,EACjBnvE,KAAKm1C,kBACLn1C,KAAK6vE,yBAENtsE,EAAK+rE,KACR/rE,EAAK+rE,GAAgBtgC,GAAgBzrC,EAAK8rE,KAExCF,GACFnvE,KAAKynE,gBACHlkE,EAAK+rE,GACLG,EAAmB34C,GAAsBb,GAG9C,GAGL,SAASm2C,GAAsBnrD,GAC7B,GAAwB,qBAApBA,EAAW5a,KAA6B,OAAO,EAEnD,MAAM,SAAEud,EAAF,SAAYiqB,GAAa5sB,EAE/B,QACE2C,GACkB,kBAAlBiqB,EAASxnC,QACU,oBAAlBwnC,EAASxnC,MAA8BwnC,EAASs+B,YAAY9mE,OAAS,KAKjE0qE,GAAkC9uD,EAAW3Q,OACrD,CAED,SAASy/D,GAAkC9uD,GACzC,MAAwB,eAApBA,EAAW5a,MACS,qBAApB4a,EAAW5a,QACX4a,EAAW2C,UAERmsD,GAAkC9uD,EAAW3Q,QACrD,CCh+HD,MAAM0/D,GAAoBvxD,CAAe,eAAc,CACrDwxD,oBAAqB,4BACrBC,gBAAiB,qCAKnB,OAAgB1wD,GACd,cAAsCA,EACpC2wD,iBACEhhC,GAEA,GAAInvC,KAAK4gC,MAAL,KAA4B,CAC9B,MAAMr9B,EAAOvD,KAAK2jB,YAWlB,OAVA3jB,KAAKu0B,OACLv0B,KAAKowE,gBAIL7sE,EAAKiF,KAAOmX,MAAMw1B,iBAA8B,GAEhDn1C,KAAKowE,gBACLpwE,KAAK6sC,OAAL,KAEO7sC,KAAKqwE,kBAAkB9sE,EAAM4rC,EACrC,CACF,CAEDkhC,kBACE9sE,EACA4rC,GAEA,MAAMmhC,KAAgB/sE,EAAK4rC,cAA8B,gBAAd5rC,EAAK8C,MAIhD,OAHA9C,EAAK4rC,aAAeA,EAGbmhC,EAAa/sE,EAAOvD,KAAK6jB,WAAWtgB,EAAM,cAClD,CAMD+gC,iBAAiB9gC,GACf,OACW,KAATA,GACA,KAAAxD,KAAKi8B,MAAMC,WAAWl8B,KAAKqmB,MAAM7H,IAAM,GAEhCxe,KAAKqlC,SAAyB,OAGhC1lB,MAAM2kB,iBAAiB9gC,EAC/B,CAMD6yC,cACE5xB,GAEA,OACEzkB,KAAKmwE,iBAAiB,eACtBxwD,MAAM02B,cAAc5xB,EAEvB,CAED0wB,gBAAgB6C,GAKd,OACEh4C,KAAKmwE,iBAAiB,eAAiBxwD,MAAMw1B,gBAAgB6C,EAEhE,CAED0J,kBACE5tB,EACAtP,EACAmnD,EACA7mD,QAKa5W,IAAT4lB,GACFnU,MAAM+hC,kBAAkB5tB,EAAMtP,EAAUmnD,EAAe7mD,EAE1D,CAMD68B,mBACE,OAAO3hD,KAAKmwE,iBAAiB,YAAcxwD,MAAMgiC,kBAClD,CAEDj9B,YAAYre,EAAcw5C,EAA0Bj7B,GAClD,MACW,gBAATve,GACAsZ,MAAM+E,YAAYre,EAAMw5C,EAAiBj7B,EAE5C,CAEDG,aAAaxhB,EAAcyhB,GAEvBzhB,GACc,gBAAdA,EAAK8C,MACiB,eAAtB9C,EAAK4rC,aAEL5rC,EAAK4rC,aAAe,UAEpBxvB,MAAMoF,aAAaxhB,EAAMyhB,EAE5B,CAMDyxB,MAAM5nC,GACJ,GAAI8Q,MAAM82B,MAAM5nC,GACd,OAAO,EAKT,IAAK7O,KAAK+rC,aAAL,IACH,OAAO,EAET,GAAIl9B,EAAS,OAAO,EAIpB,MAAMs0B,EAAYnjC,KAAKujC,YACvB,OAAI,MAAAJ,EAAU98B,IAKf,CAEDkqE,oBACEhtE,EACAitE,GAGIjtE,EAAK2D,OAA6B,gBAApB3D,EAAK2D,MAAMb,MAC7BsZ,MAAM4wD,oBAAoBhtE,EAAMitE,EACjC,CAGDh0B,yBACEj5C,EACAk5C,GAEA,GACgB,gBAAdA,EAAKp2C,MACJo2C,EAAKt7B,OAASs7B,EAAKt7B,MAAMY,cAG1B,OAAOpC,MAAM68B,yBAAyBj5C,EAAMk5C,GAG9C,GAAIz8C,KAAK4gC,MAAL,IAAsB,CAExB,MAAMvf,EAA2B9d,EAIjC,OAHA8d,EAAKna,MAAQlH,KAAKqwE,kBAAkB5zB,EAAM,cAC1Cz8C,KAAKu0B,OACLlT,EAAKxc,KAAO8a,MAAM28B,eAAe,SAC1Bt8C,KAAK6jB,WAAWxC,EAAM,mBAC9B,CAID,OAFArhB,KAAK2sC,YACLppC,EAAKiF,KAAOi0C,EAAKj0C,KACVxI,KAAKqwE,kBAAkB9sE,EAAM,YACrC,CAEDktE,WACExuD,EACAyuD,EACAvuD,GAEA,OACEniB,KAAKmwE,iBAAiB,mBACtBxwD,MAAM8wD,WACJxuD,EACAyuD,EACAvuD,EAGL,CAEDwuD,gBACEC,GAEA,OACE5wE,KAAKmwE,iBAAiB,eAAiBxwD,MAAMgxD,gBAAgBC,EAEhE,CAEDvH,WACE9lE,EACAq7C,EACAC,GAEA,MAAMx4C,EAAOu4C,EAAc,mBAAqB,kBAEhD5+C,KAAKu0B,OACLv0B,KAAK6wE,eAAettE,GACpB,MAAMutE,EAAY9wE,KAAKqmB,MAAMoN,OAEvBlC,EAAcvxB,KAAKmwE,iBAAiB,cAC1C,GAAI5+C,EAAa,CACf,KACEvxB,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,MACA5gC,KAAK4gC,MAAL,IAGK,IAAIie,IAAeD,EAGxB,OAFAr7C,EAAK4f,GAAK,KACV5f,EAAKsB,KAAO7E,KAAKqwE,kBAAkB9+C,EAAa,aACzCvxB,KAAK6jB,WAAWtgB,EAAM8C,GAE7B,MAAMrG,KAAKqlB,MAAM2qD,GAAkBC,oBAAqB,CACtD3qD,GAAItlB,KAAKqmB,MAAM7B,UAElB,CATCjhB,EAAK4f,GAAKoO,CAUb,MACCvxB,KAAK2+C,aAAap7C,EAAMq7C,EAAaC,GAOvC,OAJAl/B,MAAMwgC,gBAAgB58C,GACtBA,EAAKsB,KACH7E,KAAKmwE,iBAAiB,cACtBxwD,MAAMoxD,iBAAiBxtE,EAAKic,WAAYsxD,GACnC9wE,KAAK6jB,WAAWtgB,EAAM8C,EAC9B,CAED0f,YAAYxiB,GACV,MAAMguB,EAAcvxB,KAAKmwE,iBAAiB,cAC1C,IAAK5+C,EAAa,OAAO5R,MAAMoG,YAAYxiB,GAE3C,IAAKvD,KAAK+rC,aAAL,MAAgC/rC,KAAK4gC,MAAL,IAKnC,OAHAr9B,EAAK0iB,WAAa,GAClB1iB,EAAKoiB,OAAS,KACdpiB,EAAK8vC,YAAcrzC,KAAKqwE,kBAAkB9+C,EAAa,eAChDvxB,KAAK6jB,WAAWtgB,EAAM,0BAI/BvD,KAAKmlC,aAAa,qBAClB,MAAM0b,EAAY7gD,KAAK2jB,YAIvB,OAHAk9B,EAAU76B,SAAWuL,EACrBhuB,EAAK0iB,WAAa,CAACjmB,KAAK6jB,WAAWg9B,EAAW,2BAEvClhC,MAAMoG,YAAYxiB,EAC1B,CAEDo5C,2BACE,GAAI38C,KAAK4gC,MAAL,IAAyB,CAC3B,MAAMrM,EAAOv0B,KAAK0jC,iBAClB,GAAI1jC,KAAKgsC,qBAAqBzX,EAAM,SAEhCv0B,KAAKi8B,MAAM+0C,WACTz+C,GADF,KAEEvyB,KAAK2jC,oBAAoBpP,EAAO,IAGlC,OAAO,CAGZ,CACD,OAAO5U,MAAMg9B,0BACd,CAEDs0B,iCAAiC1tE,GAC/B,SAAIA,EAAK0iB,YAAc1iB,EAAK0iB,WAAW5gB,OAAS,IAIzCsa,MAAMsxD,iCAAiC1tE,EAC/C,CAED2tE,YAAY3tE,GACV,MAAM,WAAE0iB,GAAe1iB,EACvB,MAAI0iB,GAAAA,EAAY5gB,SACd9B,EAAK0iB,WAAaA,EAAWpV,QAE3BtN,GAA+B,gBAAvBA,EAAKyiB,SAAS3f,QAG1BsZ,MAAMuxD,YAAY3tE,GAClBA,EAAK0iB,WAAaA,CACnB,CAEDswB,YACEhzC,GAEA,MAAMguB,EAAcvxB,KAAKmwE,iBAAiB,cAC1C,IAAK5+C,EAAa,OAAO5R,MAAM42B,YAAYhzC,GAI3C,GAFAA,EAAK0iB,WAAa,IAEbjmB,KAAK+rC,aAAL,MAAgC/rC,KAAK4gC,MAAL,IAInC,OAFAr9B,EAAKoiB,OAAS3lB,KAAKqwE,kBAAkB9+C,EAAa,iBAClDvxB,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,qBAI/B,MAAMs9C,EACJ7gD,KAAK0mB,gBAA0C6K,GAMjD,GALAsvB,EAAUC,MAAQvvB,EAClBhuB,EAAK0iB,WAAWxgB,KACdzF,KAAK6jB,WAAWg9B,EAAW,2BAGzB7gD,KAAKojC,IAAL,IAAoB,CAEtB,MAAM+tC,EAAgBnxE,KAAKoxE,8BAA8B7tE,GAGpD4tE,GAAenxE,KAAKqxE,2BAA2B9tE,EACrD,CAKD,OAHAvD,KAAKssC,iBAAL,IACA/oC,EAAKoiB,OAAS3lB,KAAKsxE,oBACnBtxE,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED+tE,oBAGE,OACEtxE,KAAKmwE,iBAAiB,kBAAoBxwD,MAAM2xD,mBAEnD,CAGDlB,gBACMpwE,KAAKqmB,MAAM5W,MAAQzP,KAAKqmB,MAAMa,cAAc9lB,OAC9CpB,KAAKqlB,MAAM2qD,GAAkBE,gBAAiB,CAC5C5qD,GAAItlB,KAAKqmB,MAAMa,eAGpB,GC3XL,GAAgB1H,GACd,cAA+BA,EAC7B+xD,mBACE,GAAIvxE,KAAK4gC,MAAL,IAAuB,CACzB,MAAM4wC,EAAsBxxE,KAAKqmB,MAAM7B,SAEjCjhB,EAAOvD,KAAK2jB,YAElB,GADA3jB,KAAKu0B,OACD/C,EAAkBxxB,KAAKqmB,MAAMhgB,MAAO,CACtC,MAAMmC,EAAOxI,KAAKyxE,oBAAoBzxE,KAAKqmB,MAAM5W,OAC3CiiE,EAAa1xE,KAAKu7C,iBAAiBh4C,EAAMiF,GAG/C,GADAkpE,EAAWrrE,KAAO,wBACdrG,KAAK4gC,MAAL,IACF,OAAO8wC,CAEV,CACD1xE,KAAKmX,WAAWq6D,EACjB,CACF,CAMDn7B,cAAc5xB,GACZ,OACEzkB,KAAKuxE,oBAAsB5xD,MAAM02B,cAAc5xB,EAElD,GCdE,SAASmB,GACdnb,EACAknE,GAKA,MAAOC,EAAcC,GACO,kBAAnBF,EAA8B,CAACA,EAAgB,CAAC,GAAKA,EAExDG,EAAepuE,OAAO0M,KAAKyhE,GAE3BE,EAAiD,IAAxBD,EAAazsE,OAE5C,OAAOoF,EAAQ+9B,MAAKwpC,IAClB,GAAiB,kBAANA,EACT,OAAOD,GAA0BC,IAAMJ,EAClC,CACL,MAAO33C,EAAYC,GAAiB83C,EACpC,GAAI/3C,IAAe23C,EACjB,OAAO,EAET,IAAK,MAAMvwE,KAAOywE,EAEhB,GAAI53C,EAAc74B,KAASwwE,EAAgBxwE,GACzC,OAAO,EAGX,OAAO,CACR,IAEJ,CAEM,SAAS2hB,GAGdvY,EAAqBjC,EAAkBypE,GACvC,MAAM73C,EAAS3vB,EAAQynE,MAAK93C,GACtBxvB,MAAMC,QAAQuvB,GACTA,EAAO,KAAO5xB,EAEd4xB,IAAW5xB,IAItB,OAAI4xB,GAAUxvB,MAAMC,QAAQuvB,IAAWA,EAAO/0B,OAAS,EAC7C+0B,EAAO,GAAiC63C,GAG3C,IACR,CAED,MAAME,GAAqB,CAAC,UAAW,SAAU,OAAQ,SACnDC,GAAe,CAAC,KAAM,KAAM,IAAK,IAAK,KACtCC,GAAgC,CAAC,OAAQ,OAExC,SAASC,GAAgB7nE,GAC9B,GAAImb,GAAUnb,EAAS,cAAe,CACpC,GAAImb,GAAUnb,EAAS,qBACrB,MAAM,IAAIhE,MACR,mEAIJ,MAAM8rE,EAAyBvvD,GAC7BvY,EACA,aACA,0BAEF,GAC4B,MAA1B8nE,GACkC,mBAA3BA,EAEP,MAAM,IAAI9rE,MAAM,+CAGlB,MAAM+rE,EAAyBxvD,GAC7BvY,EACA,aACA,0BAEF,GAC4B,MAA1B+nE,GACkC,mBAA3BA,EAEP,MAAM,IAAI/rE,MAAM,8CAEnB,CAED,GAAImf,GAAUnb,EAAS,SAAWmb,GAAUnb,EAAS,cACnD,MAAM,IAAIhE,MAAM,+CAGlB,GAAImf,GAAUnb,EAAS,iBAAmBmb,GAAUnb,EAAS,eAC3D,MAAM,IAAIhE,MAAM,wDAGlB,GAAImf,GAAUnb,EAAS,oBAAqB,CAC1C,MAAMo7B,EAAW7iB,GAAgBvY,EAAS,mBAAoB,YAE9D,IAAK0nE,GAAmBlrC,SAASpB,GAAW,CAC1C,MAAM4sC,EAAeN,GAAmBvhE,KAAIohE,GAAM,IAAGA,OAAM75D,KAAK,MAChE,MAAM,IAAI1R,MACqEgsE,6EAAAA,KAEhF,CAED,MAAMC,EAAoB9sD,GAAUnb,EAAS,CAC3C,iBACA,CAAEkoE,WAAY,UAGhB,GAAiB,SAAb9sC,EAAqB,CACvB,GAAIjgB,GAAUnb,EAAS,gBACrB,MAAM,IAAIhE,MACR,4DAIJ,GAAImf,GAAUnb,EAAS,eACrB,MAAM,IAAIhE,MACR,2DAIJ,MAAMq/B,EAAa9iB,GACjBvY,EACA,mBACA,cAGF,IAAK2nE,GAAanrC,SAASnB,GAAa,CACtC,MAAM8sC,EAAYR,GAAaxhE,KAAI21D,GAAM,IAAGA,OAAMpuD,KAAK,MAEvD,MAAM,IAAI1R,MACyGmsE,iHAAAA,KAEpH,CAED,GAAmB,MAAf9sC,GAAsB4sC,EACxB,MAAM,IAAIjsE,MACR,yIAGL,MAAM,GAAiB,UAAbo/B,GAAwB6sC,EACjC,MAAM,IAAIjsE,MACR,yHAGL,CAED,GAAImf,GAAUnb,EAAS,oBAKd,CACL,GAAImb,GAAUnb,EAAS,oBACrB,MAAM,IAAIhE,MACR,iEAGJ,MAAMosE,EAAsC7vD,GAC1CvY,EACA,mBACA,WAEF,GAA4C,aAAxCooE,EACF,MAAM,IAAIpsE,MACR,uJAKL,CAGH,GACEmf,GAAUnb,EAAS,mBACyC,MAA5DuY,GAAgBvY,EAAS,iBAAkB,gBAC1C4nE,GAA8BprC,SAC7BjkB,GAAgBvY,EAAS,iBAAkB,eAG7C,MAAM,IAAIhE,MACR,0EACE4rE,GAA8BzhE,KAAIohE,GAAM,IAAGA,OAAM75D,KAAK,OAI5D,GACEyN,GAAUnb,EAAS,wBAClBmb,GAAUnb,EAAS,iBACpB,CACA,MAAM0C,EAAQ,IAAI1G,MAChB,gGAIF,MADA0G,EAAM2lE,eAAiB,gBACjB3lE,CACP,CACF,CAYM,MAAM4lE,GAAe,CAC1BC,SACA9wB,OACA+wB,QACAC,cACAC,eACAC,iBAGWC,GAAmB3vE,OAAO0M,KAAK2iE,ICxN/BO,GAA0B,CAErCjpE,WAAY,SAEZkpE,oBAAgBrlE,EAGhB0wB,YAAa,EAGbD,UAAW,EAGX60C,2BAA2B,EAG3BC,4BAA4B,EAG5BC,6BAA6B,EAE7BC,yBAAyB,EAEzBnpE,wBAAwB,EAExBC,QAAS,GAETH,WAAY,KASZukC,QAAQ,EAERhvB,QAAQ,EAGRtV,gCAAgC,EAGhCo4B,eAAe,EAKfiC,eAAe,GAKV,SAASgvC,GAAWC,GACzB,MAAMj0D,EAAe,CAAC,EACtB,IAAK,MAAMve,KAAOqC,OAAO0M,KAAKkjE,IAE5B1zD,EAAQve,GAAOwyE,GAAqB,MAAbA,EAAKxyE,GAAewyE,EAAKxyE,GAAOiyE,GAAejyE,GAExE,OAAOue,CACR,CClDD,MAAM45C,GAAS,CAAelpD,EAAWjP,IACvCqC,OAAO+1D,eAAe9rD,KAAK2C,EAAQjP,IAAQiP,EAAOjP,GAE9CyyE,GAAiCvwE,GAChB,4BAAdA,EAAK8C,KACRytE,GAA8BvwE,EAAK0d,YACnC1d,EAGS,MAAewwE,WAAmBxkC,GAuD/CxqB,aAAaxhB,EAAYyhB,GAAiB,GAAa,QACrD,IAAIjD,EAwBJ,QAvBkB,4BAAdxe,EAAK8C,MAAL,SAA2C9C,EAAK4d,QAAL08B,EAAY97B,iBACzDA,EAAgB+xD,GAA8BvwE,GAC1CyhB,EAKyB,eAAvBjD,EAAc1b,KAChBrG,KAAKwuC,gBAAgB/D,iCACnBxrB,EAAO7H,+BACP,CAAEkO,GAAI/hB,IAEwB,qBAAvBwe,EAAc1b,MAIvBrG,KAAKqlB,MAAMpG,EAAO7H,+BAAgC,CAAEkO,GAAI/hB,IAG1DvD,KAAKqlB,MAAMpG,EAAO7H,+BAAgC,CAAEkO,GAAI/hB,KAIpDA,EAAK8C,MACX,IAAK,aACL,IAAK,gBACL,IAAK,eACL,IAAK,oBACL,IAAK,cACH,MAEF,IAAK,mBACH9C,EAAK8C,KAAO,gBACZ,IACE,IAAImK,EAAI,EAAGnL,EAAS9B,EAAKmN,WAAWrL,OAAQ2J,EAAO3J,EAAS,EAC5DmL,EAAInL,EACJmL,IACA,OACA,MAAM0T,EAAO3gB,EAAKmN,WAAWF,GACvB4U,EAAS5U,IAAMxB,EACrBhP,KAAKmlB,iCAAiCjB,EAAMkB,EAAQJ,GAGlDI,GACc,gBAAdlB,EAAK7d,MACL,OAAA9C,EAAAA,EAAK4d,QAAL,EAAY28B,kBAEZ99C,KAAKqlB,MAAMpG,EAAOjF,kBAAmB,CACnCsL,GAAI/hB,EAAK4d,MAAM28B,kBAGpB,CACD,MAEF,IAAK,iBAAkB,CACrB,MAAM,IAAEz8C,EAAF,MAAOuC,GAAUL,EACnBvD,KAAKojB,cAAc/hB,IACrBrB,KAAKilB,WAAWC,eACdllB,KAAKkjB,iBAAiB7hB,GACtBA,EAAI+c,IAAI3O,OAGZzP,KAAK+kB,aAAanhB,EAAOohB,GACzB,KACD,CAED,IAAK,gBACH,MAAM,IAAIve,MACR,gIAKJ,IAAK,kBACHlD,EAAK8C,KAAO,eACZrG,KAAK49C,iBACHr6C,EAAKw3B,SADP,SAEEx3B,EAAK4d,YAFP,EAEE6yD,EAAYl2B,iBACZ94B,GAEF,MAEF,IAAK,uBACmB,MAAlBzhB,EAAK6hE,UACPplE,KAAKqlB,MAAMpG,EAAOlH,sBAAuB,CAAEuN,GAAI/hB,EAAK67C,KAAKhhC,IAAI1O,MAG/DnM,EAAK8C,KAAO,2BACL9C,EAAK6hE,SACZplE,KAAK+kB,aAAaxhB,EAAK67C,KAAMp6B,GAC7B,MAEF,IAAK,0BAEHhlB,KAAK+kB,aAAahD,EAAeiD,GACjC,MAML,CAEDG,iCACEjB,EACAkB,EACAJ,GAEA,GAAkB,iBAAdd,EAAK7d,KACPrG,KAAKqlB,MACW,QAAdnB,EAAKpR,MAAgC,QAAdoR,EAAKpR,KACxBmM,EAAOzF,mBACPyF,EAAOxF,iBACX,CAAE6L,GAAIpB,EAAK7iB,WAER,GAAkB,kBAAd6iB,EAAK7d,KAA0B,CACxC6d,EAAK7d,KAAO,cACZ,MAAM4tE,EAAM/vD,EAAKxF,SACjB1e,KAAK2tE,sBAAsBsG,GAAwB,GACnDj0E,KAAK+kB,aAAakvD,EAAKjvD,GAElBI,GACHplB,KAAKqlB,MAAMpG,EAAOjF,kBAAmB,CAAEsL,GAAIpB,GAE9C,MACClkB,KAAK+kB,aAAab,EAAMc,EAE3B,CAID44B,iBACEyB,EACAvB,EACA94B,GAEA,MAAMtV,EAAM2vC,EAASh6C,OAAS,EAE9B,IAAK,IAAImL,EAAI,EAAGA,GAAKd,EAAKc,IAAK,CAC7B,MAAM65D,EAAMhrB,EAAS7uC,GACrB,GAAK65D,EAAL,CAEA,GAAiB,kBAAbA,EAAIhkE,KAA0B,CAChCgkE,EAAIhkE,KAAO,cACX,MAAM4tE,EAAM5J,EAAI3rD,SAChB1e,KAAK2tE,sBAAsBsG,GAAwB,GACnDj0E,KAAK+kB,aAAakvD,EAAKjvD,EACxB,MACChlB,KAAK+kB,aAAaslD,EAAKrlD,GAGR,gBAAbqlD,EAAIhkE,OACFmK,EAAId,EACN1P,KAAKqlB,MAAMpG,EAAOjF,kBAAmB,CAAEsL,GAAI+kD,IAClCvsB,GACT99C,KAAKqlB,MAAMpG,EAAOjF,kBAAmB,CAAEsL,GAAIw4B,IAf7B,CAkBnB,CACF,CAEDj5B,aAAathB,EAAYuhB,GACvB,OAAQvhB,EAAK8C,MACX,IAAK,aACL,IAAK,gBACL,IAAK,eACL,IAAK,oBACL,IAAK,cACH,OAAO,EAET,IAAK,mBAAoB,CACvB,MAAM2I,EAAOzL,EAAKmN,WAAWrL,OAAS,EACtC,OAAQ9B,EAAKmN,WAA8CitC,OACzD,CAACz5B,EAAM1T,IAEW,iBAAd0T,EAAK7d,OACJmK,IAAMxB,GAAsB,kBAAdkV,EAAK7d,OACpBrG,KAAK6kB,aAAaX,IAIzB,CAED,IAAK,iBACH,OAAOlkB,KAAK6kB,aAAathB,EAAKK,OAEhC,IAAK,gBACH,OAAO5D,KAAK6kB,aAAathB,EAAKmb,UAEhC,IAAK,kBACH,OAAQnb,EAAyBw3B,SAAS4iB,OACxCiiB,GAAuB,OAAZA,GAAoB5/D,KAAK6kB,aAAa+6C,KAGrD,IAAK,uBACH,MAAyB,MAAlBr8D,EAAK6hE,SAEd,IAAK,0BACH,OAAOplE,KAAK6kB,aAAathB,EAAK0d,YAEhC,IAAK,mBACL,IAAK,2BACH,OAAQ6D,EAEV,QACE,OAAO,EAEZ,CAIDw6B,iBACED,EAEAE,GAEA,OAAOF,CACR,CAED60B,qBACE70B,EACAE,GAEAv/C,KAAKs/C,iBAAiBD,EAAUE,GAEhC,IAAK,MAAM9C,KAAQ4C,EACE,qBAAf,MAAA5C,OAAA,EAAAA,EAAMp2C,OACRrG,KAAKk0E,qBAAqBz3B,EAAK1hB,SAGpC,CAIDo5C,YAEE1vD,GAEA,MAAMlhB,EAAOvD,KAAK2jB,YAMlB,OALA3jB,KAAKu0B,OACLhxB,EAAKmb,SAAW1e,KAAKu9C,wBACnB94B,OACAvW,GAEKlO,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAID6wE,mBACE,MAAM7wE,EAAOvD,KAAK2jB,YAGlB,OAFA3jB,KAAKu0B,OACLhxB,EAAKmb,SAAW1e,KAAK2hD,mBACd3hD,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAGDo+C,mBAEE,OAAQ3hD,KAAKqmB,MAAMhgB,MACjB,KAAK,EAAa,CAChB,MAAM9C,EAAOvD,KAAK2jB,YAQlB,OAPA3jB,KAAKu0B,OAELhxB,EAAKw3B,SAAW/6B,KAAKkiE,iBAAL,MAGd,GAEKliE,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAED,KAAK,EACH,OAAOvD,KAAKomE,gBAA2B,MAI3C,OAAOpmE,KAAKm1C,iBACb,CAGD+sB,iBAEExiB,EACA20B,EACAC,EACAzyB,GAEA,MAAM0yB,EAA6C,GACnD,IAAIv5B,GAAQ,EACZ,OAAQh7C,KAAKojC,IAAIsc,GAMf,GALI1E,EACFA,GAAQ,EAERh7C,KAAK6sC,OAAL,IAEEynC,GAAct0E,KAAK4gC,MAAL,IAChB2zC,EAAK9uE,KAAK,UACL,IAAIzF,KAAKojC,IAAIsc,GAClB,MACK,GAAI1/C,KAAK4gC,MAAL,KAET,GADA2zC,EAAK9uE,KAAKzF,KAAKygD,6BAA6BzgD,KAAKo0E,sBAC5Cp0E,KAAKmuE,oBAAoBkG,GAAgB,CAC5Cr0E,KAAK6sC,OAAO6S,GACZ,KACD,MACI,CACL,MAAMyqB,EAAa,GACfnqE,KAAK4gC,MAAgB,KAAA5gC,KAAK4lB,UAAU,eACtC5lB,KAAKqlB,MAAMpG,EAAOnD,8BAA+B,CAC/CwJ,GAAItlB,KAAKqmB,MAAM7B,WAInB,MAAOxkB,KAAK4gC,MAAL,IACLupC,EAAW1kE,KAAKzF,KAAKw0E,kBAEvBD,EAAK9uE,KAAKzF,KAAKkqE,wBAAwBroB,EAAgBsoB,GACxD,EAEH,OAAOoK,CACR,CAGDE,yBAEEvwD,GAMA,OAJAlkB,KAAKu0B,OAELrQ,EAAKxF,SAAW1e,KAAKm1C,kBACrBn1C,KAAKmuE,oBAAL,KACOnuE,KAAK6jB,WAAWK,EAAM,cAC9B,CAGDwwD,uBACE,MAAMxwD,EAAOlkB,KAAK2jB,aACZ,KAAEtd,EAAMoJ,MAAO8U,EAAf,SAAyBC,GAAaxkB,KAAKqmB,MACjD,OAAa,KAAThgB,EACKrG,KAAKy0E,yBAAyBvwD,IACnB,MAAT7d,GACTrG,KAAKmlC,aAAa,uBAAwB3gB,GAC1CxkB,KAAKilB,WAAWC,eAAellB,KAAKqmB,MAAMziB,MAAO4gB,GAChDN,EAA8B7iB,IAAMrB,KAAK+iB,oBAE1C/iB,KAAKgjE,kBAAkB9+C,GAExBA,EAA8BtC,QAAS,EACjC5hB,KAAKwgD,kBACVt8B,EACAK,EACAC,GACA,GACA,GACA,GACA,GAEH,CAED0lD,wBAEEroB,EACAsoB,GAEA,MAAM/qB,EAAOp/C,KAAK0gD,oBAClB1gD,KAAKygD,6BAA6BrB,GAClC,MAAMirB,EAAMrqE,KAAK0gD,kBAAkBtB,EAAK3vC,MAAO2vC,EAAKhhC,IAAI3O,MAAO2vC,GAI/D,OAHI+qB,EAAW9kE,SACb+5C,EAAK+qB,WAAaA,GAEbE,CACR,CAGD5pB,6BAA6B3E,GAC3B,OAAOA,CACR,CAID4E,kBAEEn8B,EACAC,EACA46B,GACS,UAIT,GAHA56B,EAAQ,SAAGA,GAAH,EAAexkB,KAAKqmB,MAAM7B,SAClCD,EAAQ,SAAGA,GAAH,EAAevkB,KAAKqmB,MAAM5W,MAClC2vC,EAAe,OAARA,EAAAA,GAAQ,EAAAp/C,KAAK2hD,oBACf3hD,KAAKojC,IAAV,IAAsB,OAAOgc,EAE7B,MAAM77C,EAAOvD,KAAKwvC,YAA+BjrB,EAAUC,GAG3D,OAFAjhB,EAAK67C,KAAOA,EACZ77C,EAAK00C,MAAQj4C,KAAKu9C,0BACXv9C,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CA+BDmhB,YACEre,EAEAse,EAEAC,GAEA,OAAO40C,GACL,CACEloD,kBAAmB,OACnBc,YAAa,WACbuiE,eAAgB,QAChBxiE,wBAAyB,aACzBf,aAAc,WACdc,cAAe,cAGjB7L,EAEH,CAgCDuuE,UACE3zD,GAEE4zD,GAAI/9D,EADN,QAEE8N,EAAU8R,GAFZ,aAGEo+C,GAAe,EAHjB,kBAIE9xB,GAAoB,EAJtB,yBAKE+xB,IAA6BnwD,EAAU6Q,IALzC,yBAMEu/C,GAA2B,IASvB,MACN,MAAM3uE,EAAO4a,EAAW5a,KAKxB,GAAIrG,KAAK6mB,eAAe5F,GAAa,OAErC,GAAa,qBAAT5a,EAIF,YAHIue,IAAY8R,IACd12B,KAAKqlB,MAAMpG,EAAO3H,8BAA+B,CAAEgO,GAAIrE,KAK3D,GAAwB,eAApBA,EAAW5a,KAAuB,CACpCrG,KAAKynE,gBACHxmD,EACA2D,EACAo+B,EACA+xB,GAGF,MAAM,KAAEvsE,GAASyY,EAUjB,YARI6zD,IACEA,EAAa7gD,IAAIzrB,GACnBxI,KAAKqlB,MAAMpG,EAAO1F,UAAW,CAAE+L,GAAIrE,IAEnC6zD,EAAa37C,IAAI3wB,IAKtB,CAED,MAAMysE,EAAWj1E,KAAK0kB,YACpBzD,EAAW5a,OACT2uE,GAAwB,OAAI/zD,EAAAA,EAAWE,QAAX+zD,EAAkBnzD,gBAC5B,yBAAlBjL,EAASzQ,KACXue,GAGF,IAAiB,IAAbqwD,EAAmB,OACvB,IAAiB,IAAbA,EAAoB,CACtB,MAAME,EACJvwD,IAAY8R,GAAYzX,EAAOpI,WAAaoI,EAAOlI,kBASrD,YAPA/W,KAAKqlB,MAAM8vD,EAAiB,CAC1B7vD,GAAIrE,EACJnK,SACoB,qBAAlBA,EAASzQ,KACL,CAAEA,KAAM,mBAAoBsM,OAAQmE,EAASnE,QAC7C,CAAEtM,KAAMyQ,EAASzQ,OAG1B,CAED,MAAOhF,EAAK+zE,GAA6BxqE,MAAMC,QAAQoqE,GACnDA,EACA,CAACA,EAAmB,4BAAT5uE,GACTgvE,EACgB,iBAApBp0D,EAAW5a,MACS,kBAApB4a,EAAW5a,MACS,4BAApB4a,EAAW5a,KACP4a,EACAnK,EAGN,IAAK,MAAM3V,IAAS,GAAGohB,OAAOtB,EAAW5f,IACnCF,GACFnB,KAAK40E,UAAUzzE,EAAO,CAEpB0zE,GAAIQ,EACJzwD,UACAkwD,eACAC,2BACA/xB,oBACAgyB,yBAA0BI,GAIjC,CAED3N,gBACEniD,EACA2T,EACA+pB,GAA6B,EAC7BsyB,IAA6Br8C,EAAcxD,KAGzCz1B,KAAKqmB,MAAMoN,SACVuvB,EACG7uB,GAAyB7O,EAAG9c,KAAMxI,KAAK+zB,UACvCG,GAA6B5O,EAAG9c,SAEhCywB,IAAgBvC,GAClB12B,KAAKqlB,MAAMpG,EAAOvC,oBAAqB,CAAE4I,KAAI3I,cAAe2I,EAAG9c,OAE/DxI,KAAKqlB,MAAMpG,EAAOrC,2BAA4B,CAC5C0I,KACAzI,YAAayI,EAAG9c,QAKjB8sE,GAA+B,QAAZhwD,EAAG9c,MACzBxI,KAAKqlB,MAAMpG,EAAOtH,oBAAqB,CAAE2N,OAGrC2T,EAAcvC,IAClB12B,KAAKu1E,0BAA0BjwD,EAAI2T,EAEtC,CAEDs8C,0BAA0B7D,EAAwB9sD,GAChD5kB,KAAK+4B,MAAMC,YAAY04C,EAAWlpE,KAAMoc,EAAS8sD,EAAWtzD,IAAI3O,MACjE,CAEDk+D,sBAAsBpqE,EAAYqqE,GAChC,OAAQrqE,EAAK8C,MACX,IAAK,0BACHrG,KAAK2tE,sBAAsBpqE,EAAK0d,WAAY2sD,GAC5C,MACF,IAAK,aACL,IAAK,mBACH,MACF,IAAK,kBACL,IAAK,mBACH,GAAIA,EAAc,MAEpB,QACE5tE,KAAKqlB,MAAMpG,EAAOzH,6BAA8B,CAAE8N,GAAI/hB,IAE3D,CAED4qE,oBACEzuB,GAEA,QAAK1/C,KAAK4gC,MAAL,MAIL5gC,KAAKqlB,MACHrlB,KAAK6jC,sBAAwB6b,EACzBzgC,EAAOjF,kBACPiF,EAAOpK,iBACX,CAAEyQ,GAAItlB,KAAKqmB,MAAM7B,YAGZ,EACR,ECjqBY,MAAegxD,WAAyBzB,GA2CrD0B,WACEvxD,EACAwxD,EACAC,EAGAlxD,GAEA,GACgB,kBAAdP,EAAK7d,MACLrG,KAAK6mB,eAAe3C,IACpBA,EAAKN,UAELM,EAAKG,UAEL,OAGF,MAAMhjB,EAAM6iB,EAAK7iB,IAEXmH,EAAoB,eAAbnH,EAAIgF,KAAwBhF,EAAImH,KAAOnH,EAAIuC,MAExD,GAAa,cAAT4E,EAAsB,CACxB,GAAIktE,EAEF,YADA11E,KAAKqlB,MAAMpG,EAAOlF,cAAe,CAAEuL,GAAIjkB,IAGrCs0E,EAASC,OACPnxD,EAGyC,OAAvCA,EAAoB+oB,iBACtB/oB,EAAoB+oB,eAAiBnsC,EAAI+c,IAAI3O,OAG/CzP,KAAKqlB,MAAMpG,EAAOtK,eAAgB,CAAE2Q,GAAIjkB,KAI5Cs0E,EAASC,MAAO,CACjB,CACF,CAEDC,qBAAqBp5B,EAAoBxf,GACvC,MACgB,4BAAdwf,EAAKp2C,MAAsCo2C,EAAKhtC,QAAUwtB,CAE7D,CAGD6xC,gBACE9uE,KAAKyuC,qBACLzuC,KAAKmjC,YACL,MAAMsZ,EAAOz8C,KAAK60C,kBAalB,OAZK70C,KAAK4gC,MAAL,MACH5gC,KAAKmX,aAIPnX,KAAKm8B,4BACLsgB,EAAKliB,SAAWv6B,KAAKqmB,MAAMkU,SAC3BkiB,EAAKzf,OAASh9B,KAAKqmB,MAAM2W,OACrBh9B,KAAK4f,QAAQC,SACf48B,EAAK58B,OAAS7f,KAAK6f,QAGd48B,CACR,CAqBD5H,gBAEEihC,EACArxD,GAEA,OAAIqxD,EACK91E,KAAK+1E,eAAc,IACxB/1E,KAAKg2E,oBAAoBvxD,KAGtBzkB,KAAKi2E,YAAW,IAAMj2E,KAAKg2E,oBAAoBvxD,IACvD,CAGDuxD,oBAEEvxD,GAEA,MAAMF,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtBi4B,EAAOz8C,KAAKs9C,iBAAiB74B,GACnC,GAAIzkB,KAAK4gC,MAAL,IAAsB,CACxB,MAAMr9B,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GACxCjhB,EAAK4oE,YAAc,CAAC1vB,GACpB,MAAOz8C,KAAKojC,IAAL,IACL7/B,EAAK4oE,YAAY1mE,KAAKzF,KAAKs9C,iBAAiB74B,IAG9C,OADAzkB,KAAKs/C,iBAAiB/7C,EAAK4oE,aACpBnsE,KAAK6jB,WAAWtgB,EAAM,qBAC9B,CACD,OAAOk5C,CACR,CAGDy5B,2BAEEzxD,EACAw9B,GAEA,OAAOjiD,KAAK+1E,eAAc,IACxB/1E,KAAKs9C,iBAAiB74B,EAAqBw9B,IAE9C,CAGD1E,wBAEE94B,EACAw9B,GAEA,OAAOjiD,KAAKi2E,YAAW,IACrBj2E,KAAKs9C,iBAAiB74B,EAAqBw9B,IAE9C,CAIDnF,2BACEr4B,EACA0xD,GACA,MACA1xD,EAAoBipB,sBACE,OAApByoC,EAAAA,MAAAA,OAAAA,EAAAA,EAAa/3D,KAAO,EAAApe,KAAKqmB,MAAM7B,QAClC,CAKD84B,iBAEE74B,EACAw9B,GAEA,MAAM19B,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,GAAIxkB,KAAK+rC,aAAL,MACE/rC,KAAKsuC,UAAU7C,SAAU,CAC3B,IAAI2T,EAAOp/C,KAAKo2E,aAIhB,OAHIn0B,IACF7C,EAAO6C,EAAet0C,KAAK3N,KAAMo/C,EAAM76B,EAAUC,IAE5C46B,CACR,CAGH,IAAIi3B,EACA5xD,EACF4xD,GAAsB,GAEtB5xD,EAAsB,IAAImqB,GAC1BynC,GAAsB,GAExB,MAAM,KAAEhwE,GAASrG,KAAKqmB,OAElB,KAAAhgB,GAAsBmrB,EAAkBnrB,MAC1CrG,KAAKqmB,MAAM4W,iBAAmBj9B,KAAKqmB,MAAM5W,OAG3C,IAAI2vC,EAAOp/C,KAAKs2E,sBAAsB7xD,GAItC,GAHIw9B,IACF7C,EAAO6C,EAAet0C,KAAK3N,KAAMo/C,EAAM76B,EAAUC,IAE/CsN,GAAkB9xB,KAAKqmB,MAAMhgB,MAAO,CACtC,MAAM9C,EAAOvD,KAAKwvC,YAAoCjrB,EAAUC,GAC1D4gD,EAAWplE,KAAKqmB,MAAMziB,MAoC5B,OAnCAL,EAAK6hE,SAAWA,EAEZplE,KAAK4gC,MAAL,KACF5gC,KAAK+kB,aAAaq6B,GAAkB,GACpC77C,EAAK67C,KAAOA,EAG4B,MAAtC36B,EAAoB+oB,gBACpB/oB,EAAoB+oB,eAAepsC,OAASmjB,IAE5CE,EAAoB+oB,eAAiB,MAGK,MAA1C/oB,EAAoB8oB,oBACpB9oB,EAAoB8oB,mBAAmBnsC,OAASmjB,IAEhDE,EAAoB8oB,mBAAqB,MAGJ,MAArC9oB,EAAoBgpB,eACpBhpB,EAAoBgpB,cAAcrsC,OAASmjB,IAE3CvkB,KAAK2uC,0BAA0BlqB,GAC/BA,EAAoBgpB,cAAgB,OAGtClqC,EAAK67C,KAAOA,EAGdp/C,KAAKu0B,OACLhxB,EAAK00C,MAAQj4C,KAAKs9C,mBAClBt9C,KAAK40E,UAAUx1B,EAAM,CACnBy1B,GAAI70E,KAAK6jB,WAAWtgB,EAAM,0BAGrBA,C,CAKT,OAJW8yE,GACTr2E,KAAKqtC,sBAAsB5oB,GAAqB,GAG3C26B,CACR,CAKDk3B,sBAEE7xD,GAEA,MAAMF,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtByY,EAAmBj9B,KAAKqmB,MAAM4W,iBAC9Bwf,EAAOz8C,KAAKu2E,aAAa9xD,GAE/B,OAAIzkB,KAAK61E,qBAAqBp5B,EAAMxf,GAC3Bwf,EAGFz8C,KAAK68C,iBAAiBJ,EAAMl4B,EAAUC,EAAUC,EACxD,CAEDo4B,iBAEEJ,EACAl4B,EACAC,EAEAC,GAEA,GAAIzkB,KAAKojC,IAAL,IAAuB,CACzB,MAAM7/B,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GAKxC,OAJAjhB,EAAK8vB,KAAOopB,EACZl5C,EAAKy5C,WAAah9C,KAAKu9C,0BACvBv9C,KAAK6sC,OAAL,IACAtpC,EAAK85C,UAAYr9C,KAAKs9C,mBACft9C,KAAK6jB,WAAWtgB,EAAM,wBAC9B,CACD,OAAOk5C,CACR,CAED+5B,yBAEE/xD,GAEA,OAAOzkB,KAAK4gC,MAAL,KACH5gC,KAAK+iB,mBACL/iB,KAAKilE,gBAAgBxgD,EAC1B,CAKD8xD,aAEE9xD,GAEA,MAAMF,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtByY,EAAmBj9B,KAAKqmB,MAAM4W,iBAC9Bwf,EAAOz8C,KAAKw2E,yBAAyB/xD,GAE3C,OAAIzkB,KAAK61E,qBAAqBp5B,EAAMxf,GAC3Bwf,EAGFz8C,KAAKsrE,YAAY7uB,EAAMl4B,EAAUC,GAAW,EACpD,CAQD8mD,YAEElsB,EACAmsB,EACAC,EACAC,GAEA,GAAIzrE,KAAKojB,cAAcg8B,GAAO,CAK5B,MAAMx7C,EAAQ5D,KAAKkjB,iBAAiBk8B,IAGlCqsB,GAAWj5C,GAAwB,MAClCxyB,KAAKsuC,UAAU3C,QACf3rC,KAAK4gC,MAAL,MAED5gC,KAAKqlB,MAAMpG,EAAOvF,oBAAqB,CACrC4L,GAAI85B,EACJxvC,eAAgBhM,IAIpB5D,KAAKilB,WAAWC,eAAethB,EAAOw7C,EAAKhhC,IAAI3O,MAChD,CAED,MAAMgnE,EAAKz2E,KAAKqmB,MAAMhgB,KACtB,GAAI6rB,GAAgBukD,KAAQz2E,KAAKsuC,UAAU3C,QAAU3rC,KAAK4gC,MAAL,KAAqB,CACxE,IAAI81C,EAAOlkD,GAAwBikD,GACnC,GAAIC,EAAOjL,EAAS,CAClB,GAAW,KAAPgL,EAAoB,CAEtB,GADAz2E,KAAKmlC,aAAa,oBACdnlC,KAAKqmB,MAAM0X,2BACb,OAAOqhB,EAETp/C,KAAK22E,6BAA6Bv3B,EAAMosB,EACzC,CACD,MAAMjoE,EAAOvD,KAAKwvC,YAChB+7B,EACAC,GAEFjoE,EAAK67C,KAAOA,EACZ77C,EAAK6hE,SAAWplE,KAAKqmB,MAAMziB,MAE3B,MAAMgzE,EAAU,KAAAH,GAAhB,KAAuCA,EACjCI,EAAN,KAAiBJ,EAUjB,GARII,IAGFH,EAAOlkD,GAAP,KAGFxyB,KAAKu0B,OAGI,KAAPkiD,GACAz2E,KAAK4lB,UAAU,CAAC,mBAAoB,CAAEigB,SAAU,cAE5C,KAAA7lC,KAAKqmB,MAAMhgB,MAAsBrG,KAAKsuC,UAAU9C,SAClD,MAAMxrC,KAAKqlB,MAAMpG,EAAOvE,iCAAkC,CACxD4K,GAAItlB,KAAKqmB,MAAM7B,WAKrBjhB,EAAK00C,MAAQj4C,KAAK82E,qBAAqBL,EAAIC,GAC3C,MAAMK,EAAe/2E,KAAK6jB,WACxBtgB,EACAqzE,GAAWC,EAAW,oBAAsB,oBAOxCG,EAASh3E,KAAKqmB,MAAMhgB,KAC1B,GACGwwE,IAAwB,KAAXG,GAAL,KAAgCA,IACxCJ,GAAsB,KAAXI,EAEZ,MAAMh3E,KAAKqlB,MAAMpG,EAAO3G,0BAA2B,CACjDgN,GAAItlB,KAAKqmB,MAAM7B,WAInB,OAAOxkB,KAAKsrE,YACVyL,EACAxL,EACAC,EACAC,EAEH,CACF,CACD,OAAOrsB,CACR,CAKD03B,qBAEEL,EACAC,GAEA,MAAMnyD,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,OAAQiyD,GACN,KAAK,GACH,OAAQz2E,KAAKgjB,gBAAgB,mBAAoB,aAC/C,IAAK,OACH,OAAOhjB,KAAKi3E,yBAAwB,IAC3Bj3E,KAAKk3E,sBAGhB,IAAK,QACH,OAAOl3E,KAAKi3E,yBAAwB,KAClC,GAAIj3E,KAAKsuC,UAAU7C,UAAYzrC,KAAK+rC,aAAL,KAC7B,MAAM/rC,KAAKqlB,MAAMpG,EAAO7B,kBAAmB,CACzCkI,GAAItlB,KAAKqmB,MAAM7B,WAGnB,OAAOxkB,KAAKm3E,8BACVn3E,KAAKo3E,yBAAyBX,EAAIC,GAClCnyD,EACAC,EAHF,IAOJ,IAAK,SACH,OAAOxkB,KAAKq3E,gCAA+B,IAClCr3E,KAAKs3E,wBAAwBZ,KAK5C,QACE,OAAO12E,KAAKo3E,yBAAyBX,EAAIC,GAE9C,CAKDU,yBAEEX,EACAC,GAEA,MAAMnyD,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAE5B,OAAOxkB,KAAKsrE,YACVtrE,KAAKw2E,2BACLjyD,EACAC,EACAiO,GAAwBgkD,GAAMC,EAAO,EAAIA,EAE5C,CAEDQ,oBAA8C,MAC5C,MAAM,SAAE1yD,GAAaxkB,KAAKqmB,MACpBxhB,EAAO7E,KAAKs9C,mBACZi6B,EAAsBr6D,EAAoC+W,IAE9DpvB,EAAKwB,MAgBP,OAZIkxE,GAAwB,OAAD,EAAC1yE,EAAKsc,QAAL,EAAYY,eACtC/hB,KAAKqlB,MAAMpG,EAAOvB,wBAAyB,CACzC4H,GAAId,EAEJne,KAAMxB,EAAKwB,OAGVrG,KAAKw3E,yCAERx3E,KAAKqlB,MAAMpG,EAAOxB,gBAAiB,CAAE6H,GAAId,IAGpC3f,CACR,CAED4yE,2BACEl0E,GAEIvD,KAAK4gC,MAAL,KACF5gC,KAAKqlB,MAAMpG,EAAO1D,mCAAoC,CACpD+J,GAAI/hB,EAAKmb,UAGd,CAIDumD,gBAEExgD,EACAgpD,GAEA,MAAMlpD,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtBkzD,EAAU13E,KAAK+rC,aAArB,IAEA,GAAI2rC,GAAW13E,KAAK23E,iBAAkB,CACpC33E,KAAKu0B,OACL,MAAMkoB,EAAOz8C,KAAK43E,WAAWrzD,EAAUC,GAEvC,OADKipD,GAAUztE,KAAKy3E,2BAA2Bh7B,GACxCA,CACR,CACD,MAAMo7B,EAAS73E,KAAK4gC,MAApB,IACMr9B,EAAOvD,KAAK2jB,YAClB,GAAIyO,GAAcpyB,KAAKqmB,MAAMhgB,MAAO,CAClC9C,EAAK6hE,SAAWplE,KAAKqmB,MAAMziB,MAC3BL,EAAKoP,QAAS,EAEV3S,KAAK4gC,MAAL,KACF5gC,KAAKmlC,aAAa,oBAEpB,MAAM2yC,EAAW93E,KAAK4gC,MAAtB,IAOA,GANA5gC,KAAKu0B,OAELhxB,EAAKmb,SAAW1e,KAAKilE,gBAAgB,MAAM,GAE3CjlE,KAAKqtC,sBAAsB5oB,GAAqB,GAE5CzkB,KAAKqmB,MAAMoN,QAAUqkD,EAAU,CACjC,MAAM7D,EAAM1wE,EAAKmb,SAEA,eAAbu1D,EAAI5tE,KACNrG,KAAKqlB,MAAMpG,EAAOxC,aAAc,CAAE6I,GAAI/hB,IAC7BvD,KAAK2mB,yBAAyBstD,IACvCj0E,KAAKqlB,MAAMpG,EAAO5K,mBAAoB,CAAEiR,GAAI/hB,GAE/C,CAED,IAAKs0E,EAIH,OAHKpK,GACHztE,KAAKy3E,2BAA2Bl0E,GAE3BvD,KAAK6jB,WAAWtgB,EAAM,kBAEhC,CAED,MAAMk5C,EAAOz8C,KAAK+3E,YAEhBx0E,EACAs0E,EACApzD,GAGF,GAAIizD,EAAS,CACX,MAAM,KAAErxE,GAASrG,KAAKqmB,MAChBsB,EAAa3nB,KAAK4lB,UAAU,eAC9BiM,EAAwBxrB,GACxBwrB,EAAwBxrB,KAAUrG,KAAK4gC,MAF3C,IAGA,GAAIjZ,IAAe3nB,KAAKg4E,mBAEtB,OADAh4E,KAAKqoC,eAAeppB,EAAO7L,uBAAwB,CAAEkS,GAAId,IAClDxkB,KAAK43E,WAAWrzD,EAAUC,EAEpC,CAED,OAAOi4B,CACR,CAGDs7B,YAEEx0E,EACAs0E,EACApzD,GAEA,GAAIozD,EAAQ,CAEV,MAAMI,EAAuB10E,EAI7B,OAHAvD,KAAK40E,UAAUqD,EAAqBv5D,SAAU,CAC5Cm2D,GAAI70E,KAAK6jB,WAAWo0D,EAAsB,sBAErC10E,CACR,CAED,MAAMghB,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,IAAIi4B,EAAOz8C,KAAKk4E,oBAAoBzzD,GACpC,GAAIzkB,KAAKqtC,sBAAsB5oB,GAAqB,GAAQ,OAAOg4B,EACnE,MAAOtqB,GAAenyB,KAAKqmB,MAAMhgB,QAAUrG,KAAKusC,qBAAsB,CACpE,MAAMhpC,EAAOvD,KAAKwvC,YAAgCjrB,EAAUC,GAC5DjhB,EAAK6hE,SAAWplE,KAAKqmB,MAAMziB,MAC3BL,EAAKoP,QAAS,EACdpP,EAAKmb,SAAW+9B,EAChBz8C,KAAKu0B,OACLv0B,KAAK40E,UAAUn4B,EAAM,CACnBo4B,GAAKp4B,EAAOz8C,KAAK6jB,WAAWtgB,EAAM,qBAErC,CACD,OAAOk5C,CACR,CAIDy7B,oBAEEzzD,GAEA,MAAMF,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SACtByY,EAAmBj9B,KAAKqmB,MAAM4W,iBAC9Bwf,EAAOz8C,KAAKq2C,cAAc5xB,GAEhC,OAAIzkB,KAAK61E,qBAAqBp5B,EAAMxf,GAC3Bwf,EAGFz8C,KAAKmjD,gBAAgB1G,EAAMl4B,EAAUC,EAC7C,CAED2+B,gBAEEh9B,EACA5B,EACAC,EACA4B,GAEA,MAAMC,EAAQ,CACZC,qBAAqB,EACrB6xD,gBAAiBn4E,KAAKirE,qBAAqB9kD,GAC3CK,MAAM,GAER,GACEL,EAAOnmB,KAAKkmB,eAAeC,EAAM5B,EAAUC,EAAU4B,EAASC,GAG9DA,EAAM8xD,iBAAkB,SAChB9xD,EAAMG,MAChB,OAAOL,CACR,CAMDD,eAEEC,EACA5B,EACAC,EACA4B,EACAC,GAEA,MAAM,KAAEhgB,GAASrG,KAAKqmB,MACtB,IAAKD,GAAoB,KAAT/f,EACd,OAAOrG,KAAKo4E,UAAUjyD,EAAM5B,EAAUC,EAAU4B,EAASC,GACpD,GAAIqM,GAAgBrsB,GACzB,OAAOrG,KAAKmrE,8BACVhlD,EACA5B,EACAC,EACA6B,GAIJ,IAAIZ,GAAW,EAEf,GAAa,KAATpf,EAAyB,CAC3B,GAAI+f,GAAW,KAAApmB,KAAK6jC,oBAGlB,OADAxd,EAAMG,MAAO,EACNL,EAETE,EAAMC,oBAAsBb,GAAW,EACvCzlB,KAAKu0B,MACN,CAED,IAAKnO,GAAWpmB,KAAK4gC,MAAL,IACd,OAAO5gC,KAAKq4E,gCACVlyD,EACA5B,EACAC,EACA6B,EACAZ,GAEG,CACL,MAAM7B,EAAW5jB,KAAKojC,IAAtB,GACA,OAAIxf,GAAY6B,GAAYzlB,KAAKojC,IAAL,IACnBpjC,KAAKs4E,YACVnyD,EACA5B,EACAC,EACA6B,EACAzC,EACA6B,IAGFY,EAAMG,MAAO,EACNL,EAEV,CACF,CAMDmyD,YAEEnyD,EACA5B,EACAC,EACA6B,EACAzC,EACA6B,GAEA,MAAMliB,EAAOvD,KAAKwvC,YAEhBjrB,EAAUC,GAgBZ,OAfAjhB,EAAK+M,OAAS6V,EACd5iB,EAAKqgB,SAAWA,EACZA,GACFrgB,EAAKsqC,SAAW7tC,KAAK60C,kBACrB70C,KAAK6sC,OAAL,IACS7sC,KAAK4gC,MAAL,MACS,UAAdza,EAAK9f,MACPrG,KAAKqlB,MAAMpG,EAAO7E,kBAAmB,CAAEkL,GAAId,IAE7CxkB,KAAKilB,WAAWC,eAAellB,KAAKqmB,MAAMziB,MAAO5D,KAAKqmB,MAAM7B,UAC5DjhB,EAAKsqC,SAAW7tC,KAAK+iB,oBAErBxf,EAAKsqC,SAAW7tC,KAAKm1C,iBAAgB,GAGnC9uB,EAAMC,qBACP/iB,EAAoCkiB,SAAWA,EACzCzlB,KAAK6jB,WAAWtgB,EAAM,6BAEtBvD,KAAK6jB,WAAWtgB,EAAM,mBAEhC,CAGD60E,UAEEjyD,EACA5B,EACAC,EACA4B,EACAC,GAEA,MAAM9iB,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GAKxC,OAJAjhB,EAAK+M,OAAS6V,EACdnmB,KAAKu0B,OACLhxB,EAAKmiB,OAAS1lB,KAAKu4E,kBACnBlyD,EAAMG,MAAO,EACNxmB,KAAKmjD,gBACVnjD,KAAK6jB,WAAWtgB,EAAM,kBACtBghB,EACAC,EACA4B,EAEH,CAMDiyD,gCAEElyD,EACA5B,EACAC,EACA6B,EACAZ,GAEA,MAAMqkD,EAA4B9pE,KAAKqmB,MAAM+W,uBAC7C,IAAI3Y,EAA+C,KAEnDzkB,KAAKqmB,MAAM+W,wBAAyB,EACpCp9B,KAAKu0B,OAEL,MAAMhxB,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAEFjhB,EAAKmiB,OAASS,EACd,MAAM,gBAAEgyD,EAAF,oBAAmB7xD,GAAwBD,EAE7C8xD,IACFn4E,KAAKwuC,gBAAgB3V,MAAMiS,MAC3BrmB,EAAsB,IAAImqB,IAGxBtoB,IAEF/iB,EAAKkiB,SAAWA,GAIhBliB,EAAKtB,UADHwjB,EACezlB,KAAKojD,6BAAtB,IAEiBpjD,KAAKojD,6BAEpBj9B,GAAc,WAAdA,EAAK9f,KACS,UAAd8f,EAAK9f,KAEL9C,EACAkhB,GAGJ,IAAIsyD,EAG4B/2E,KAAKulB,qBACnChiB,EACA+iB,GAuBF,OApBI6xD,GAAmBn4E,KAAKgiD,0BAA4Bv8B,GAEtDY,EAAMG,MAAO,EACbxmB,KAAK2uC,0BAA0BlqB,GAC/BzkB,KAAKwuC,gBAAgB7D,oBACrB3qC,KAAKwuC,gBAAgB1V,OACrBi+C,EAAe/2E,KAAK+hD,kCAClB/hD,KAAKwvC,YAAuCjrB,EAAUC,GACtDuyD,KAGEoB,IACFn4E,KAAKqtC,sBAAsB5oB,GAAqB,GAChDzkB,KAAKwuC,gBAAgB1V,QAEvB94B,KAAK8lB,sBAAsBixD,IAG7B/2E,KAAKqmB,MAAM+W,uBAAyB0sC,EAE7BiN,CACR,CAEDjxD,sBACEviB,EACAg8C,GAEAv/C,KAAKk0E,qBAAqB3wE,EAAKtB,UAAWs9C,EAC3C,CAID4rB,8BAEEhlD,EACA5B,EACAC,EACA6B,GAEA,MAAM9iB,EAAOvD,KAAKwvC,YAChBjrB,EACAC,GAOF,OALAjhB,EAAKi1E,IAAMryD,EACX5iB,EAAKk1E,MAAQz4E,KAAK4kE,eAAc,GAC5Bv+C,EAAMC,qBACRtmB,KAAKqlB,MAAMpG,EAAO5F,2BAA4B,CAAEiM,GAAId,IAE/CxkB,KAAK6jB,WAAWtgB,EAAM,2BAC9B,CAED0nE,qBAAqB9kD,GACnB,MACgB,eAAdA,EAAK9f,MACS,UAAd8f,EAAK3d,MACLxI,KAAKqmB,MAAMa,cAAc9lB,QAAU+kB,EAAKzW,MACvC1P,KAAKusC,sBAENpmB,EAAKzW,IAAMyW,EAAK1W,QAAU,GAC1B0W,EAAK1W,QAAUzP,KAAKqmB,MAAM4W,gBAE7B,CAED1X,qBACEhiB,EACAkiB,GAEA,GAAyB,WAArBliB,EAAKmiB,OAAOrf,KAUd,GAT8B,IAA1B9C,EAAKtB,UAAUoD,SAIVrF,KAAK4lB,UAAU,qBAClB5lB,KAAKmlC,aAAa,qBAIM,IAA1B5hC,EAAKtB,UAAUoD,QAAgB9B,EAAKtB,UAAUoD,OAAS,EACzDrF,KAAKqlB,MAAMpG,EAAOrJ,gBAAiB,CACjC0P,GAAI/hB,EACJsS,iBACE7V,KAAK4lB,UAAU,qBACf5lB,KAAK4lB,UAAU,oBACX,EACA,SAGR,IAAK,MAAMquD,KAAO1wE,EAAKtB,UACJ,kBAAbgyE,EAAI5tE,MACNrG,KAAKqlB,MAAMpG,EAAOlJ,yBAA0B,CAAEuP,GAAI2uD,IAK1D,OAAOj0E,KAAK6jB,WACVtgB,EACAkiB,EAAW,yBAA2B,iBAEzC,CAED29B,6BAEE1D,EACAg5B,EACAC,EACAC,EACAn0D,GAEA,MAAM8vD,EAAuB,GAC7B,IAAIv5B,GAAQ,EACZ,MAAM69B,EAAgC74E,KAAKqmB,MAAM0X,2BACjD/9B,KAAKqmB,MAAM0X,4BAA6B,EAExC,OAAQ/9B,KAAKojC,IAAIsc,GAAQ,CACvB,GAAI1E,EACFA,GAAQ,OAGR,GADAh7C,KAAK6sC,OAAL,IACI7sC,KAAK4gC,MAAM8e,GAAQ,EAEnBg5B,GACC14E,KAAK4lB,UAAU,qBACf5lB,KAAK4lB,UAAU,qBAEhB5lB,KAAKqlB,MAAMpG,EAAOtJ,gCAAiC,CACjD2P,GAAItlB,KAAKqmB,MAAM6X,kBAGf06C,GACF54E,KAAK84E,4BAA4BF,GAEnC54E,KAAKu0B,OACL,KACD,CAGHggD,EAAK9uE,KACHzF,KAAK+4E,mBAAkB,EAAOt0D,EAAqBk0D,GAEtD,CAID,OAFA34E,KAAKqmB,MAAM0X,2BAA6B86C,EAEjCtE,CACR,CAEDvyB,wBACE,OAAOhiD,KAAK4gC,MAAL,MAAyB5gC,KAAKusC,oBACtC,CAEDwV,kCAEEx+C,EACAoK,GAC2B,MAiB3B,OAhBA3N,KAAKo8B,kCAAkCzuB,GACvC3N,KAAK6sC,OAAL,IACA7sC,KAAK2jD,qBACHpgD,EACAoK,EAAK1L,WACL,EAHF,SAIE0L,EAAKwT,YAJP,EAIE63D,EAAYl7B,kBAGVnwC,EAAKktB,eACPD,GAAiBr3B,EAAMoK,EAAKktB,eAG1BltB,EAAK+X,OAAO8U,kBACdI,GAAiBr3B,EAAMoK,EAAK+X,OAAO8U,kBAE9Bj3B,CACR,CAIDg1E,kBACE,MAAMh0D,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,OAAOxkB,KAAKmjD,gBAAgBnjD,KAAKq2C,gBAAiB9xB,EAAUC,GAAU,EACvE,CAcD6xB,cAEE5xB,GAEA,IAAIlhB,EAEJ,MAAM,KAAE8C,GAASrG,KAAKqmB,MACtB,OAAQhgB,GACN,KAAK,GACH,OAAOrG,KAAKi5E,aAEd,KAAK,GAIH,OAHA11E,EAAOvD,KAAK2jB,YACZ3jB,KAAKu0B,OAEDv0B,KAAK4gC,MAAL,IACK5gC,KAAKk5E,wBAAwB31E,IAGjCvD,KAAK4gC,MAAL,KACH5gC,KAAKqlB,MAAMpG,EAAOtD,kBAAmB,CACnC2J,GAAItlB,KAAKqmB,MAAM6X,kBAGZl+B,KAAK6jB,WAAWtgB,EAAM,WAC/B,KAAK,GAGH,OAFAA,EAAOvD,KAAK2jB,YACZ3jB,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,kBAE/B,KAAK,GACH,OAAOvD,KAAKm5E,QAAQn5E,KAAK2jB,aAAa,GAGxC,KAAK,GACL,KAAK,GAEH,OADA3jB,KAAK4mC,aACE5mC,KAAK8f,mBAAmB9f,KAAKqmB,MAAMziB,OAG5C,KAAK,IACH,OAAO5D,KAAK4gB,oBAAoB5gB,KAAKqmB,MAAMziB,OAE7C,KAAK,IACH,OAAO5D,KAAKmgB,mBAAmBngB,KAAKqmB,MAAMziB,OAE5C,KAAK,IACH,OAAO5D,KAAKwgB,oBAAoBxgB,KAAKqmB,MAAMziB,OAE7C,KAAK,IACH,OAAO5D,KAAK2gB,mBAAmB3gB,KAAKqmB,MAAMziB,OAE5C,KAAK,GACH,OAAO5D,KAAK6gB,mBAEd,KAAK,GACH,OAAO7gB,KAAK8gB,qBAAoB,GAClC,KAAK,GACH,OAAO9gB,KAAK8gB,qBAAoB,GAElC,KAAK,GAAW,CACd,MAAMoiC,EAAaljD,KAAKqmB,MAAM4W,mBAAqBj9B,KAAKqmB,MAAM5W,MAC9D,OAAOzP,KAAKijD,mCAAmCC,EAChD,CAED,KAAK,EACL,KAAK,EACH,OAAOljD,KAAKy/C,eACV,IAAAz/C,KAAKqmB,MAAMhgB,KAAX,KACmB,GACL,GAGlB,KAAK,EACH,OAAOrG,KAAKy/C,eAES,MACL,EACdh7B,GAGJ,KAAK,EACL,KAAK,EACH,OAAOzkB,KAAKomE,gBACV,IAAApmE,KAAKqmB,MAAMhgB,KAAX,KACgB,GACD,GAGnB,KAAK,EACH,OAAOrG,KAAKomE,gBAEM,MACD,EACf3hD,GAGJ,KAAK,GACH,OAAOzkB,KAAKo5E,8BAEd,KAAK,GACHp5E,KAAKq5E,kBAEP,KAAK,GAGH,OAFA91E,EAAOvD,KAAK2jB,YACZ3jB,KAAK6wE,eAAettE,GACbvD,KAAKqpE,WAAW9lE,GAAM,GAE/B,KAAK,GACH,OAAOvD,KAAKs5E,sBAEd,KAAK,GACL,KAAK,GACH,OAAOt5E,KAAK4kE,eAAc,GAI5B,KAAK,GAAgB,CACnBrhE,EAAOvD,KAAK2jB,YACZ3jB,KAAKu0B,OACLhxB,EAAK+M,OAAS,KACd,MAAMoV,EAAUniB,EAAKmiB,OAAS1lB,KAAKu4E,kBACnC,GAAoB,qBAAhB7yD,EAAOrf,KACT,OAAOrG,KAAK6jB,WAAWtgB,EAAM,kBAE7B,MAAMvD,KAAKqlB,MAAMpG,EAAOzD,gBAAiB,CAAE8J,GAAII,GAElD,CAED,KAAK,IAWH,OAJA1lB,KAAKqlB,MAAMpG,EAAOvF,oBAAqB,CACrC4L,GAAItlB,KAAKqmB,MAAM7B,SACf5U,eAAgB5P,KAAKqmB,MAAMziB,QAEtB5D,KAAK+iB,mBAGd,KAAK,GACH,OAAO/iB,KAAKu5E,kCAA6C,QAG3D,KAAK,GACH,OAAOv5E,KAAKu5E,kCAAiD,QAG/D,KAAK,GACL,KAAK,GACH,OAAOv5E,KAAKw5E,oBAAoB,QAGlC,KAAK,GACL,KAAK,GACL,KAAK,GAAS,CACZ,MAAMC,EAAez5E,KAAKgjB,gBACxB,mBACA,YAGF,GAAIy2D,EACF,OAAOz5E,KAAKw5E,oBAAoBC,GAEhC,MAAMz5E,KAAKmX,YAEd,CAED,KAAK,GAAO,CACV,MAAM4uB,EAAc/lC,KAAKi8B,MAAM+J,YAAYhmC,KAAK0jC,kBAChD,GACEtQ,GAAkB2S,IACF,KAAhBA,EACA,CACA/lC,KAAKsoC,gBAAgB,CAAC,MAAO,OAAQ,eACrC,KACD,CACC,MAAMtoC,KAAKmX,YAEd,CAED,QACE,GAAIqa,EAAkBnrB,GAAO,CAC3B,GACErG,KAAK+rC,aAAL,YACA/rC,KAAK6jC,sBACJ7jC,KAAKysC,wBAEN,OAAOzsC,KAAK05E,wBAEd,MAAMx2B,EAAaljD,KAAKqmB,MAAM4W,mBAAqBj9B,KAAKqmB,MAAM5W,MACxD6uB,EAAct+B,KAAKqmB,MAAMiY,YACzBnb,EAAKnjB,KAAKm1C,kBAEhB,IACG7W,GACW,UAAZnb,EAAG3a,OACFxI,KAAKusC,qBACN,CACA,MAAM,KAAElmC,GAASrG,KAAKqmB,MACtB,GAAa,KAAThgB,EAGF,OAFArG,KAAKo8B,kCAAkCjZ,GACvCnjB,KAAKu0B,OACEv0B,KAAK25E,cACV35E,KAAK0mB,gBAAgBvD,QACrBjV,GACA,GAEG,GAAIsjB,EAAkBnrB,GAI3B,OAAI,KAAArG,KAAK6jC,oBAIA7jC,KAAK45E,6BACV55E,KAAK0mB,gBAAgBvD,IAKhBA,EAEJ,GAAa,KAAT9c,EAET,OADArG,KAAKo8B,kCAAkCjZ,GAChCnjB,KAAKm5E,QAAQn5E,KAAK0mB,gBAAgBvD,IAAK,EAEjD,CAED,OACE+/B,GACAljD,KAAK4gC,MAAL,MACC5gC,KAAKusC,sBAENvsC,KAAKu0B,OACEv0B,KAAK2jD,qBACV3jD,KAAK0mB,gBAAgBvD,GACrB,CAACA,IACD,IAIGA,CACR,CACC,MAAMnjB,KAAKmX,aAGlB,CAYDoiE,kCACEM,EACAC,GAEA,MAAML,EAAez5E,KAAKgjB,gBAAgB,mBAAoB,YAE9D,GAAIy2D,EAeF,OAVAz5E,KAAKqmB,MAAMhgB,KAAOwzE,EAClB75E,KAAKqmB,MAAMziB,MAAQk2E,EAGnB95E,KAAKqmB,MAAM7H,MACXxe,KAAKqmB,MAAM3W,MAGX1P,KAAKqmB,MAAMU,OAASlX,EAA+B7P,KAAKqmB,MAAMU,QAAS,GAEhE/mB,KAAKw5E,oBAAoBC,GAEhC,MAAMz5E,KAAKmX,YAEd,CAQDqiE,oBAAoBC,GAClB,MAAMl2E,EAAOvD,KAAK2jB,YACZa,EAAWxkB,KAAKqmB,MAAM7B,SACtB4mD,EAAYprE,KAAKqmB,MAAMhgB,KAQ7B,OALArG,KAAKu0B,OAKEv0B,KAAK+5E,qBAAqBx2E,EAAMihB,EAAUi1D,EAAcrO,EAChE,CAeD2O,qBACEx2E,EACAihB,EACAi1D,EACArO,GAEA,GACEprE,KAAKg6E,gCAAgCP,EAAcj1D,EAAU4mD,GAC7D,CAMA,MAAMroE,EACa,UAAjB02E,EACI,gCAGA,iBAmBN,OAjBKz5E,KAAKi6E,2CACRj6E,KAAKqlB,MAIc,UAAjBo0D,EACIx6D,EAAOlB,uBAEPkB,EAAO3B,iBACX,CAAEgI,GAAId,IAMVxkB,KAAKk6E,yBAEEl6E,KAAK6jB,WAAWtgB,EAAMR,EAC9B,CAEC,MAAM/C,KAAKqlB,MAAMpG,EAAO1B,2BAA4B,CAClD+H,GAAId,EACJhH,MAAO+U,GAAe64C,IAG3B,CAWD4O,gCACEP,EACAj1D,EACA4mD,GAEA,OAAQqO,GACN,IAAK,OACH,OAAOz5E,KAAK4lB,UAAU,CACpB,mBACA,CAEEkgB,WAAYvT,GAAe64C,MAIjC,IAAK,QACH,YAAOA,EACT,QACE,MAAMprE,KAAKqlB,MAAMpG,EAAO5B,2BAA4B,CAAEiI,GAAId,IAE/D,CAGDo1D,6BAEEr2E,GAIAvD,KAAKsuC,UAAUzV,MAAM+S,IAAc,EAAM5rC,KAAKsuC,UAAU7C,WACxD,MAAM5pB,EAAS,CAAC7hB,KAAKm1C,mBASrB,OARAn1C,KAAKsuC,UAAUxV,OACX94B,KAAKwsC,yBACPxsC,KAAKqlB,MAAMpG,EAAOrH,0BAA2B,CAC3C0N,GAAItlB,KAAKqmB,MAAMwY,gBAGnB7+B,KAAK6sC,OAAL,IAEO7sC,KAAK2jD,qBAAqBpgD,EAAMse,GAAQ,EAChD,CAIDs3D,QAEE51E,EACAie,GAEAxhB,KAAKmlC,aAAa,iBACd3jB,GACFxhB,KAAKmlC,aAAa,sBAEpB5hC,EAAKi/C,MAAQhhC,EACbxhB,KAAKu0B,OACL,MAAMwZ,EAAY/tC,KAAKqmB,MAAM2X,OAa7B,OAZAh+B,KAAKqmB,MAAM2X,OAAS,GAChBxc,GAGFxhB,KAAKsuC,UAAUzV,MAAMqS,IACrB3nC,EAAKsB,KAAO7E,KAAKywE,aACjBzwE,KAAKsuC,UAAUxV,QAEfv1B,EAAKsB,KAAO7E,KAAKywE,aAGnBzwE,KAAKqmB,MAAM2X,OAAS+P,EACb/tC,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAGD01E,aACE,MAAM11E,EAAOvD,KAAK2jB,YAuBlB,OAtBA3jB,KAAKu0B,QAEHv0B,KAAK4gC,MACL,KAAC5gC,KAAK+4B,MAAMvV,kBACXxjB,KAAK4f,QAAQ+zD,wBAIb3zE,KAAK+4B,MAAMZ,YACXn4B,KAAK4f,QAAQ+zD,yBAEd3zE,KAAKqlB,MAAMpG,EAAO5D,gBAAiB,CAAEiK,GAAI/hB,IALzCvD,KAAKqlB,MAAMpG,EAAO9E,gBAAiB,CAAEmL,GAAI/hB,IASxCvD,KAAK4gC,MAAL,KACA5gC,KAAK4gC,MAAL,IACA5gC,KAAK4gC,MAAL,KAED5gC,KAAKqlB,MAAMpG,EAAOjD,iBAAkB,CAAEsJ,GAAI/hB,IAGrCvD,KAAK6jB,WAAWtgB,EAAM,QAC9B,CAEDwf,mBACE,MAAMxf,EAAOvD,KAAK2jB,YACZR,EAAKnjB,KAAKwvC,YACdxvC,KAAKqmB,MAAM5W,MAAQ,EAGnB,IAAIN,EACFnP,KAAKqmB,MAAMyW,QACX98B,KAAKqmB,MAAM5W,MAAQ,EAAIzP,KAAKqmB,MAAM0W,UAClC/8B,KAAKqmB,MAAM5W,MAAQ,IAGjBjH,EAAOxI,KAAKqmB,MAAMziB,MAGxB,OAFA5D,KAAKu0B,OACLhxB,EAAK4f,GAAKnjB,KAAKu7C,iBAAiBp4B,EAAI3a,GAC7BxI,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAED61E,8BAGE,MAAM71E,EAAOvD,KAAK2jB,YASlB,GAFA3jB,KAAKu0B,OAEDv0B,KAAKsuC,UAAU7C,UAAYzrC,KAAK4gC,MAAL,IAAoB,CACjD,MAAMu5C,EAAOn6E,KAAKu7C,iBAChBv7C,KAAK0mB,gBAA8BnjB,GACnC,YAUF,OARAvD,KAAKu0B,OAEDv0B,KAAK4gC,MAAL,KACF5gC,KAAKmlC,aAAa,gBACRnlC,KAAK4lB,UAAU,iBAEzB5lB,KAAKmX,aAEAnX,KAAKo6E,kBACV72E,EACA42E,EACA,OAEH,CACD,OAAOn6E,KAAK25E,cAAcp2E,EAC3B,CAED62E,kBACE72E,EACA42E,EACAngB,GAEAz2D,EAAK42E,KAAOA,EAEZ,MAAM77C,EAAct+B,KAAKqmB,MAAMiY,YAY/B,OAVA/6B,EAAKsqC,SAAW7tC,KAAKm1C,iBAAgB,IAEjC5xC,EAAKsqC,SAASrlC,OAASwxD,GAAgB17B,IACzCt+B,KAAKqlB,MAAMpG,EAAOrD,wBAAyB,CACzC0J,GAAI/hB,EAAKsqC,SACTriC,OAAQ2uE,EAAK3xE,KACbqT,sBAAuBm+C,IAIpBh6D,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAGD21E,wBAAwB31E,GACtB,MAAM4f,EAAKnjB,KAAKu7C,iBACdv7C,KAAK0mB,gBAA8BnjB,GACnC,UAWF,OATAvD,KAAKu0B,OAEDv0B,KAAK+rC,aAAL,OACG/rC,KAAK+zB,UACR/zB,KAAKqlB,MAAMpG,EAAOhO,wBAAyB,CAAEqU,GAAInC,IAEnDnjB,KAAK85B,mBAAoB,GAGpB95B,KAAKo6E,kBAAkB72E,EAAM4f,EAAI,OACzC,CAEDm4B,mBACE13C,EACAyC,EACA9C,GAMA,OAJAvD,KAAK8rC,SAASvoC,EAAM,WAAYK,GAChC5D,KAAK8rC,SAASvoC,EAAM,MAAOvD,KAAKi8B,MAAM+C,MAAMz7B,EAAKkM,MAAOzP,KAAKqmB,MAAM3W,MACnEnM,EAAKK,MAAQA,EACb5D,KAAKu0B,OACEv0B,KAAK6jB,WAActgB,EAAM8C,EACjC,CAEDqa,aAA+B9c,EAAYyC,GACzC,MAAM9C,EAAOvD,KAAK2jB,YAClB,OAAO3jB,KAAKs7C,mBAAmB13C,EAAOyC,EAAM9C,EAC7C,CAEDod,mBAAmB/c,GACjB,OAAO5D,KAAK0gB,aAA8B9c,EAAO,gBAClD,CAEDgd,oBAAoBhd,GAClB,OAAO5D,KAAK0gB,aAA+B9c,EAAO,iBACnD,CAEDuc,mBAAmBvc,GACjB,OAAO5D,KAAK0gB,aAA8B9c,EAAO,gBAClD,CAED4c,oBAAoB5c,GAClB,OAAO5D,KAAK0gB,aAA+B9c,EAAO,iBACnD,CAEDkc,mBAAmBlc,GAKjB,MAAML,EAAOvD,KAAK0gB,aAChB9c,EAAMA,MACN,iBAIF,OAFAL,EAAKwc,QAAUnc,EAAMmc,QACrBxc,EAAKyc,MAAQpc,EAAMoc,MACZzc,CACR,CAEDud,oBAAoBld,GAClB,MAAML,EAAOvD,KAAK2jB,YAGlB,OAFApgB,EAAKK,MAAQA,EACb5D,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAEDsd,mBACE,MAAMtd,EAAOvD,KAAK2jB,YAElB,OADA3jB,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAGD0/C,mCAEEC,GAEA,MAAM3+B,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAE5B,IAAIua,EACJ/+B,KAAKu0B,OACLv0B,KAAKwuC,gBAAgB3V,MAAMgS,MAE3B,MAAMi/B,EAA4B9pE,KAAKqmB,MAAM+W,uBACvCy7C,EAAgC74E,KAAKqmB,MAAM0X,2BACjD/9B,KAAKqmB,MAAM+W,wBAAyB,EACpCp9B,KAAKqmB,MAAM0X,4BAA6B,EAExC,MAAMs8C,EAAgBr6E,KAAKqmB,MAAM5W,MAC3B6qE,EAAgBt6E,KAAKqmB,MAAM7B,SAC3B66B,EAA2B,GAC3B56B,EAAsB,IAAImqB,GAChC,IACI2rC,EACAC,EAFAx/B,GAAQ,EAIZ,OAAQh7C,KAAK4gC,MAAL,IAAuB,CAC7B,GAAIoa,EACFA,GAAQ,OAQR,GANAh7C,KAAK6sC,OAAL,GAEgD,OAA9CpoB,EAAoBipB,sBAChB,KACAjpB,EAAoBipB,uBAEtB1tC,KAAK4gC,MAAL,IAAuB,CACzB45C,EAAwBx6E,KAAKqmB,MAAM7B,SACnC,KACD,CAGH,GAAIxkB,KAAK4gC,MAAL,IAAyB,CAC3B,MAAM65C,EAAqBz6E,KAAKqmB,MAAM5W,MAChCirE,EAAqB16E,KAAKqmB,MAAM7B,SAUtC,GATA+1D,EAAiBv6E,KAAKqmB,MAAM7B,SAC5B66B,EAAS55C,KACPzF,KAAKg+C,eACHh+C,KAAKo0E,mBACLqG,EACAC,KAIC16E,KAAKmuE,oBAAL,IACH,KAEH,MACC9uB,EAAS55C,KACPzF,KAAKu9C,wBACH94B,EACAzkB,KAAKg+C,gBAIZ,CAED,MAAM28B,EAAc36E,KAAKqmB,MAAMa,cAC/BlnB,KAAK6sC,OAAL,IAEA7sC,KAAKqmB,MAAM+W,uBAAyB0sC,EACpC9pE,KAAKqmB,MAAM0X,2BAA6B86C,EAExC,IAAI+B,EAAY56E,KAAKwvC,YACnBjrB,EACAC,GAEF,OACE0+B,GACAljD,KAAK4iD,iBAAiBvD,KACrBu7B,EAAY56E,KAAK2iD,WAAWi4B,KAE7B56E,KAAK2uC,0BAA0BlqB,GAC/BzkB,KAAKwuC,gBAAgB7D,oBACrB3qC,KAAKwuC,gBAAgB1V,OACrB94B,KAAK2jD,qBAAqBi3B,EAAWv7B,GAAU,GAExCu7B,IAET56E,KAAKwuC,gBAAgB1V,OAEhBumB,EAASh6C,QACZrF,KAAKmX,WAAWnX,KAAKqmB,MAAM6X,iBAEzBs8C,GAAuBx6E,KAAKmX,WAAWqjE,GACvCD,GAAgBv6E,KAAKmX,WAAWojE,GACpCv6E,KAAKqtC,sBAAsB5oB,GAAqB,GAEhDzkB,KAAKk0E,qBAAqB70B,GAAoC,GAC1DA,EAASh6C,OAAS,GACpB05B,EAAM/+B,KAAKwvC,YACT6qC,EACAC,GAEFv7C,EAAIotC,YAAc9sB,EAElBr/C,KAAK6jB,WAAWkb,EAAK,sBACrB/+B,KAAKinB,iBAAiB8X,EAAK47C,IAE3B57C,EAAMsgB,EAAS,GAGVr/C,KAAK66E,gBACVt2D,EACAC,EAEAua,GAEH,CAED87C,gBACEt2D,EACAC,EACAvD,GAEA,IAAKjhB,KAAK4f,QAAQrV,+BAUhB,OATAvK,KAAK8rC,SAAS7qB,EAAY,iBAAiB,GAC3CjhB,KAAK8rC,SAAS7qB,EAAY,aAAcsD,GAExCvkB,KAAKq8B,wBACHpb,EACAsD,EACAvkB,KAAKqmB,MAAMa,cAAc9lB,OAGpB6f,EAGT,MAAM65D,EAAkB96E,KAAKwvC,YAC3BjrB,EACAC,GAGF,OADAs2D,EAAgB75D,WAAaA,EACtBjhB,KAAK6jB,WAAWi3D,EAAiB,0BACzC,CAGDl4B,iBAAiB/gC,GACf,OAAQ7hB,KAAKusC,oBACd,CAEDoW,WACEp/C,GAEA,GAAIvD,KAAKojC,IAAL,IACF,OAAO7/B,CAEV,CAEDy6C,eACEz6C,EAEAghB,EAEAC,GAEA,OAAOjhB,CACR,CAED+1E,sBACE,MAAM/1E,EAAOvD,KAAK2jB,YAElB,GADA3jB,KAAKu0B,OACDv0B,KAAK4gC,MAAL,IAAoB,CAEtB,MAAMu5C,EAAOn6E,KAAKu7C,iBAChBv7C,KAAK0mB,gBAA8BnjB,GACnC,OAEFvD,KAAKu0B,OACL,MAAMwmD,EAAW/6E,KAAKo6E,kBACpB72E,EACA42E,EACA,UAOF,OAJKn6E,KAAK+4B,MAAMP,oBAAuBx4B,KAAK+4B,MAAMV,SAChDr4B,KAAKqlB,MAAMpG,EAAOhE,oBAAqB,CAAEqK,GAAIy1D,IAGxCA,CACR,CAED,OAAO/6E,KAAKg7E,SAASz3E,EACtB,CAQDy3E,SAAuBz3E,GAGrB,GAFAvD,KAAKyjD,eAAelgD,GAEhBvD,KAAKojC,IAAL,IAAqB,CACvB,MAAMx0B,EAAO5O,KAAKi7E,cAAlB,IACAj7E,KAAKs/C,iBAAiB1wC,GAEtBrL,EAAKtB,UAAY2M,CAClB,MACCrL,EAAKtB,UAAY,GAGnB,OAAOjC,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAEDkgD,eAA6BlgD,GAC3BA,EAAKmiB,OAAS1lB,KAAKu4E,kBACM,WAArBh1E,EAAKmiB,OAAOrf,KACdrG,KAAKqlB,MAAMpG,EAAOnJ,2BAA4B,CAAEwP,GAAI/hB,EAAKmiB,SAChD1lB,KAAK4mB,gBAAgBrjB,EAAKmiB,QACnC1lB,KAAKqlB,MAAMpG,EAAO7F,sBAAuB,CACvCkM,GAAItlB,KAAKqmB,MAAMa,gBAERlnB,KAAKojC,IAAL,KACTpjC,KAAKqlB,MAAMpG,EAAO7F,sBAAuB,CACvCkM,GAAItlB,KAAKqmB,MAAM7B,UAGpB,CAID02D,qBAAqBC,GACnB,MAAM,MAAE1rE,EAAF,SAAS+U,EAAT,IAAmB9U,EAAnB,MAAwB9L,GAAU5D,KAAKqmB,MACvC+0D,EAAY3rE,EAAQ,EACpB4rE,EAAOr7E,KAAKwvC,YAChB4rC,EACAvrE,EAA+B2U,EAAU,IAE7B,OAAV5gB,IACGu3E,GACHn7E,KAAKqlB,MAAMpG,EAAOxI,8BAA+B,CAE/C6O,GAAIzV,EACF7P,KAAKqmB,MAAMkY,8BACX,MAMR,MAAM+8C,EAASt7E,KAAK4gC,MAApB,IACMl5B,EAAY4zE,GAAU,GAAK,EAC3BC,EAAU7rE,EAAMhI,EACtB2zE,EAAKz3E,MAAQ,CACXsd,IAAKlhB,KAAKi8B,MAAM+C,MAAMo8C,EAAWG,GAASz0E,QAAQ,SAAU,MAC5D00E,OAAkB,OAAV53E,EAAiB,KAAOA,EAAMo7B,MAAM,EAAGt3B,IAEjD2zE,EAAKI,KAAOH,EACZt7E,KAAKu0B,OACL,MAAMwiD,EAAe/2E,KAAK6jB,WAAWw3D,EAAM,mBAK3C,OAJAr7E,KAAKinB,iBACH8vD,EACAlnE,EAA+B7P,KAAKqmB,MAAMa,cAAexf,IAEpDqvE,CACR,CAGDnS,cAA4BuW,GAC1B,MAAM53E,EAAOvD,KAAK2jB,YAClBpgB,EAAK4oE,YAAc,GACnB,IAAIuP,EAAS17E,KAAKk7E,qBAAqBC,GACvC53E,EAAKo4E,OAAS,CAACD,GACf,OAAQA,EAAOD,KACbl4E,EAAK4oE,YAAY1mE,KAAKzF,KAAK6kE,6BAC3B7kE,KAAK6nC,2BACLtkC,EAAKo4E,OAAOl2E,KAAMi2E,EAAS17E,KAAKk7E,qBAAqBC,IAEvD,OAAOn7E,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAGDshE,4BACE,OAAO7kE,KAAK60C,iBACb,CAsBDuxB,gBAEE1mB,EACAv7B,EACAuxD,EACAjxD,GAEIixD,GACF11E,KAAKmlC,aAAa,kBAEpB,MAAM0zC,EAAgC74E,KAAKqmB,MAAM0X,2BACjD/9B,KAAKqmB,MAAM0X,4BAA6B,EACxC,MAAM69C,EAAgBl4E,OAAOwrC,OAAO,MACpC,IAAI8L,GAAQ,EACZ,MAAMz3C,EAAOvD,KAAK2jB,YAIlBpgB,EAAKmN,WAAa,GAClB1Q,KAAKu0B,OAEL,OAAQv0B,KAAK4gC,MAAM8e,GAAQ,CACzB,GAAI1E,EACFA,GAAQ,OAGR,GADAh7C,KAAK6sC,OAAL,IACI7sC,KAAK4gC,MAAM8e,GAAQ,CACrB1/C,KAAK84E,4BAEHv1E,GAEF,KACD,CAGH,IAAI2gB,EACAC,EACFD,EAAOlkB,KAAK00E,wBAEZxwD,EAAOlkB,KAAK67E,wBAAwBp3D,GACpCzkB,KAAKy1E,WAAWvxD,EAAMwxD,EAAUkG,EAAUn3D,IAI1CixD,IACC11E,KAAK0hB,iBAAiBwC,IACT,kBAAdA,EAAK7d,MAELrG,KAAKqlB,MAAMpG,EAAO1H,sBAAuB,CAAE+N,GAAIpB,IAI7CA,EAAKG,WACPrkB,KAAK8rC,SAAS5nB,EAAM,aAAa,GAInC3gB,EAAKmN,WAAWjL,KAAKye,EACtB,CAEDlkB,KAAKu0B,OAELv0B,KAAKqmB,MAAM0X,2BAA6B86C,EACxC,IAAIxyE,EAAO,mBAOX,OANI8d,EACF9d,EAAO,gBACEqvE,IACTrvE,EAAO,oBAGFrG,KAAK6jB,WAAWtgB,EAAM8C,EAC9B,CAEDyyE,4BAA4Bv1E,GAC1BvD,KAAK8rC,SAASvoC,EAAM,gBAAiBvD,KAAKqmB,MAAM8X,cAChDn+B,KAAK8rC,SAASvoC,EAAM,mBAAoBvD,KAAKqmB,MAAM6X,iBAAiB,EACrE,CAKD49C,yBAAyB53D,GACvB,OACGA,EAAKN,UACY,eAAlBM,EAAK7iB,IAAIgF,OACRrG,KAAK4tC,yBACJ5tC,KAAK4gC,MAAL,IACA5gC,KAAK4gC,MAAL,IAEL,CAGDi7C,wBAEEp3D,GAEA,IAAI0lD,EAAa,GACjB,GAAInqE,KAAK4gC,MAAL,IAAmB,CACjB5gC,KAAK4lB,UAAU,eACjB5lB,KAAKqlB,MAAMpG,EAAOlD,6BAA8B,CAC9CuJ,GAAItlB,KAAKqmB,MAAM7B,WAMnB,MAAOxkB,KAAK4gC,MAAL,IACLupC,EAAW1kE,KAAKzF,KAAKw0E,iBAExB,CAED,MAAMtwD,EAAOlkB,KAAK2jB,YAClB,IAEIY,EACAC,EAHAhD,GAAU,EACV4C,GAAa,EAIjB,GAAIpkB,KAAK4gC,MAAL,IAEF,OADIupC,EAAW9kE,QAAQrF,KAAKmX,aACrBnX,KAAKm0E,cAGVhK,EAAW9kE,SACb6e,EAAKimD,WAAaA,EAClBA,EAAa,IAGfjmD,EAAKtC,QAAS,EAEV6C,IACFF,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,UAGxB,IAAI9B,EAAc1iB,KAAKojC,IAAvB,IACApjC,KAAKugD,gCAAgCr8B,GACrC,MAAMoa,EAAct+B,KAAKqmB,MAAMiY,YACzBj9B,EAAMrB,KAAKgjE,kBAAkB9+C,EAAMO,GAEzC,IAAK/B,IAAgB4b,GAAet+B,KAAK87E,yBAAyB53D,GAAO,CACvE,MAAMpZ,EAAUzJ,EAAImH,KAGJ,UAAZsC,GAAwB9K,KAAKwsC,0BAC/BhrB,GAAU,EACVxhB,KAAKo8B,kCAAkC/6B,GACvCqhB,EAAc1iB,KAAKojC,IAAnB,IACApjC,KAAKgjE,kBAAkB9+C,IAIT,QAAZpZ,GAAiC,QAAZA,IACvBsZ,GAAa,EACbpkB,KAAKo8B,kCAAkC/6B,GACvC6iB,EAAKpR,KAAOhI,EACR9K,KAAK4gC,MAAL,MACFle,GAAc,EACd1iB,KAAKqlB,MAAMpG,EAAOpM,oBAAqB,CACrCyS,GAAItlB,KAAKqmB,MAAMwY,cACf/rB,KAAMhI,IAER9K,KAAKu0B,QAEPv0B,KAAKgjE,kBAAkB9+C,GAE1B,CAED,OAAOlkB,KAAKwgD,kBACVt8B,EACAK,EACAC,EACA9B,EACAlB,GACA,EACA4C,EACAK,EAEH,CAED4pD,kCACEzsD,GAEA,MAAuB,QAAhBA,EAAO9O,KAAiB,EAAI,CACpC,CAGD6O,6BAA6BC,GAC3B,OAAOA,EAAOC,MACf,CAIDy+B,wBAAwB1+B,GAA8C,MACpE,MAAM64B,EAAaz6C,KAAKquE,kCAAkCzsD,GACpDC,EAAS7hB,KAAK2hB,6BAA6BC,GAE7CC,EAAOxc,SAAWo1C,GACpBz6C,KAAKqlB,MACa,QAAhBzD,EAAO9O,KAAiBmM,EAAO3L,eAAiB2L,EAAO1L,eACvD,CAAE+R,GAAI1D,IAKQ,QAAhBA,EAAO9O,MAC6B,iBAApC,SAAA+O,EAAOA,EAAOxc,OAAS,SAAvB,IAA2BgB,OAE3BrG,KAAKqlB,MAAMpG,EAAOzL,uBAAwB,CAAE8R,GAAI1D,GAEnD,CAGDqC,kBAEEC,EACAxB,EACAlB,EACA2C,EACAC,GAEA,GAAIA,EAAY,CAEd,MAAM23D,EAAe/7E,KAAK6iB,YACxBqB,EAGAxB,GACc,GACM,GACpB,EACA,gBAGF,OADA1iB,KAAKsgD,wBAAwBy7B,GACtBA,CACR,CAED,GAAIv6D,GAAWkB,GAAe1iB,KAAK4gC,MAAL,IAI5B,OAHIzc,GAAWnkB,KAAKmX,aACpB+M,EAAKpR,KAAO,SACZoR,EAAKtC,QAAS,EACP5hB,KAAK6iB,YACVqB,EACAxB,EACAlB,GACoB,GACpB,EACA,eAGL,CAID8C,oBAEEJ,EACAK,EACAC,EACAL,EACAM,GAIA,GAFAP,EAAKG,WAAY,EAEbrkB,KAAKojC,IAAL,IAKF,OAJAlf,EAAKtgB,MAAQugB,EACTnkB,KAAK0gD,kBAAkB1gD,KAAKqmB,MAAM5W,MAAOzP,KAAKqmB,MAAM7B,UACpDxkB,KAAKu9C,wBAAwB94B,GAE1BzkB,KAAK6jB,WAAWK,EAAM,kBAG/B,IAAKA,EAAKN,UAA8B,eAAlBM,EAAK7iB,IAAIgF,KAAuB,CAOpD,GAFArG,KAAK0hD,kBAAkBx9B,EAAK7iB,IAAImH,KAAM0b,EAAK7iB,IAAI+c,IAAI3O,OAAO,GAAM,GAE5D0U,EACFD,EAAKtgB,MAAQ5D,KAAK0gD,kBAChBn8B,EACAC,EACAwqB,GAAgB9qB,EAAK7iB,WAElB,GAAIrB,KAAK4gC,MAAL,IAAmB,CAC5B,MAAM2M,EAAqBvtC,KAAKqmB,MAAM7B,SACX,MAAvBC,EAC6C,OAA3CA,EAAoB8oB,qBACtB9oB,EAAoB8oB,mBAAqBA,GAG3CvtC,KAAKqlB,MAAMpG,EAAO7I,4BAA6B,CAC7CkP,GAAIioB,IAGRrpB,EAAKtgB,MAAQ5D,KAAK0gD,kBAChBn8B,EACAC,EACAwqB,GAAgB9qB,EAAK7iB,KAExB,MACC6iB,EAAKtgB,MAAQorC,GAAgB9qB,EAAK7iB,KAIpC,OAFA6iB,EAAKG,WAAY,EAEVrkB,KAAK6jB,WAAWK,EAAM,iBAC9B,CACF,CAEDs8B,kBAEEt8B,EACAK,EACAC,EACA9B,EACAlB,EACA2C,EACAC,EACAK,GAEA,MAAMlhB,EACJvD,KAAKikB,kBACHC,EACAxB,EACAlB,EACA2C,EACAC,IAEFpkB,KAAKskB,oBACHJ,EACAK,EACAC,EACAL,EACAM,GAKJ,OAFKlhB,GAAMvD,KAAKmX,aAET5T,CACR,CAKDy/D,kBAEE9+C,EAGAO,GAEA,GAAIzkB,KAAKojC,IAAL,GACDlf,EAAuCN,UAAW,EACnDM,EAAK7iB,IAAMrB,KAAKu9C,0BAChBv9C,KAAK6sC,OAAL,OACK,CAEL,MAAM,KAAExmC,EAAF,MAAQzC,GAAU5D,KAAKqmB,MAC7B,IAAIhlB,EAEJ,GAAIqwB,EAA2BrrB,GAC7BhF,EAAMrB,KAAKm1C,iBAAgB,QAE3B,OAAQ9uC,GACN,KAAK,IACHhF,EAAMrB,KAAK4gB,oBAAoBhd,GAC/B,MACF,KAAK,IACHvC,EAAMrB,KAAK2gB,mBAAmB/c,GAC9B,MACF,KAAK,IACHvC,EAAMrB,KAAKmgB,mBAAmBvc,GAC9B,MACF,KAAK,IACHvC,EAAMrB,KAAKwgB,oBAAoB5c,GAC/B,MACF,KAAK,IAAgB,CAEnB,MAAM6pC,EAAgBztC,KAAKqmB,MAAM7B,SACN,MAAvBC,EACwC,OAAtCA,EAAoBgpB,gBACtBhpB,EAAoBgpB,cAAgBA,GAGtCztC,KAAKqlB,MAAMpG,EAAO9D,uBAAwB,CACxCmK,GAAImoB,IAGRpsC,EAAMrB,KAAK+iB,mBACX,KACD,CACD,QACE,MAAM/iB,KAAKmX,aAGhB+M,EAAa7iB,IAAMA,EACP,MAATgF,IAEF6d,EAAKN,UAAW,EAEnB,CAED,OAAOM,EAAK7iB,GACb,CAIDkgB,aACEhe,EACAie,GAEAje,EAAK4f,GAAK,KACV5f,EAAKy4E,WAAY,EACjBz4E,EAAKi/C,QAAUhhC,CAChB,CAIDqB,YAEEtf,EACAmf,EACAlB,EACAmB,EACAa,EACAnd,EACAod,GAAwB,GAExBzjB,KAAKuhB,aAAahe,EAAMie,GACxBje,EAAKy4E,YAAct5D,EACnB,MAAMm/B,EAAiBl/B,EACvB3iB,KAAK+4B,MAAMF,MACThE,GACEG,IACCvR,EAAeyR,GAAc,IAC7B1R,EAAmByR,GAAqB,IAE7Cj1B,KAAKsuC,UAAUzV,MAAM+S,GAAcpqB,EAASje,EAAKy4E,YACjDh8E,KAAK4hD,oBAAoBr+C,EAAMs+C,GAC/B,MAAMk1B,EAAe/2E,KAAKq8C,2BAA2B94C,EAAM8C,GAAM,GAIjE,OAHArG,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,OAEJi+C,CACR,CAKDt3B,eAEEC,EACAC,EACAC,EACAn7B,GAEIm7B,GACF5/C,KAAKmlC,aAAa,kBAEpB,MAAM0zC,EAAgC74E,KAAKqmB,MAAM0X,2BACjD/9B,KAAKqmB,MAAM0X,4BAA6B,EACxC,MAAMx6B,EAAOvD,KAAK2jB,YAUlB,OATA3jB,KAAKu0B,OACLhxB,EAAKw3B,SAAW/6B,KAAKi7E,cACnBv7B,GACkBE,EAClBn7B,EAEAlhB,GAEFvD,KAAKqmB,MAAM0X,2BAA6B86C,EACjC74E,KAAK6jB,WACVtgB,EACAq8C,EAAU,kBAAoB,kBAEjC,CAKD+D,qBAEEpgD,EACAse,EACAL,EACAs8B,GAEA99C,KAAK+4B,MAAMF,MAAMhE,GAAiBC,IAClC,IAAI9U,EAAQ4rB,GAAcpqB,GAAS,IAI9BxhB,KAAK4gC,MAAL,IAAyB5gC,KAAKsuC,UAAU3C,QAC3C3rB,GAASorB,IAEXprC,KAAKsuC,UAAUzV,MAAM7Y,GACrBhgB,KAAKuhB,aAAahe,EAAMie,GACxB,MAAMsoD,EAA4B9pE,KAAKqmB,MAAM+W,uBAa7C,OAXIvb,IACF7hB,KAAKqmB,MAAM+W,wBAAyB,EACpCp9B,KAAK6iD,2BAA2Bt/C,EAAMse,EAAQi8B,IAEhD99C,KAAKqmB,MAAM+W,wBAAyB,EACpCp9B,KAAKqjB,kBAAkB9f,GAAM,GAE7BvD,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,OACX94B,KAAKqmB,MAAM+W,uBAAyB0sC,EAE7B9pE,KAAK6jB,WAAWtgB,EAAM,0BAC9B,CAEDs/C,2BACEt/C,EACAse,EACAi8B,GAEA99C,KAAK49C,iBAAiB/7B,EAAQi8B,GAAkB,GAChDv6C,EAAKse,OAASA,CACf,CAEDw6B,2BAME94C,EAAiB8C,EAAiBkd,GAAoB,GAGtD,OADAvjB,KAAKqjB,kBAAkB9f,GAAM,EAAOggB,GAC7BvjB,KAAK6jB,WAAWtgB,EAAM8C,EAC9B,CAGDgd,kBAEE9f,EACA+f,EACAC,GAAoB,GAEpB,MAAM04D,EAAe34D,IAAoBtjB,KAAK4gC,MAA9C,GAGA,GAFA5gC,KAAKwuC,gBAAgB3V,MAAMkS,MAEvBkxC,EAED14E,EAA2CsB,KAC1C7E,KAAKs9C,mBACPt9C,KAAK+9C,YAAYx6C,GAAM,EAAO+f,GAAiB,OAC1C,CACL,MAAMwtD,EAAY9wE,KAAKqmB,MAAMoN,OAGvBsa,EAAY/tC,KAAKqmB,MAAM2X,OAC7Bh+B,KAAKqmB,MAAM2X,OAAS,GAIpBh+B,KAAKsuC,UAAUzV,MACZ74B,KAAKsuC,UAAU/C,eAAiBJ,IAEnC5nC,EAAKsB,KAAO7E,KAAKywE,YACf,GACA,GAECyL,IACC,MAAMC,GAAan8E,KAAKo8E,kBAAkB74E,EAAKse,QAE3Cq6D,GAA0BC,GAE5Bn8E,KAAKqlB,MAAMpG,EAAO1J,6BAA8B,CAC9C+P,GAEiB,WAAd/hB,EAAKuP,MAAmC,gBAAdvP,EAAKuP,OAE9BvP,EAAKlC,IAGHkC,EADAA,EAAKlC,IAAI+c,IAAI1O,MAKvB,MAAMszC,GAAqB8tB,GAAa9wE,KAAKqmB,MAAMoN,OAInDzzB,KAAK+9C,YACHx6C,GACCvD,KAAKqmB,MAAMoN,SAAWnQ,IAAoBC,IAAa44D,EACxD74D,EACA0/B,GAIEhjD,KAAKqmB,MAAMoN,QAAUlwB,EAAK4f,IAC5BnjB,KAAKynE,gBAAgBlkE,EAAK4f,GAAIwT,GAAcqsB,EAC7C,IAGLhjD,KAAKsuC,UAAUxV,OACf94B,KAAKqmB,MAAM2X,OAAS+P,CACrB,CACD/tC,KAAKwuC,gBAAgB1V,MACtB,CAED0xC,kBAAkBjnE,GAChB,MAAqB,eAAdA,EAAK8C,IACb,CAED+1E,kBACEv6D,GAEA,IAAK,IAAIrR,EAAI,EAAGwwB,EAAMnf,EAAOxc,OAAQmL,EAAIwwB,EAAKxwB,IAC5C,IAAKxQ,KAAKwqE,kBAAkB3oD,EAAOrR,IAAK,OAAO,EAEjD,OAAO,CACR,CAEDutC,YACEx6C,EACAu/C,EAEAC,EACAC,GAA6B,GAE7B,MAAM8xB,GAAgBhyB,GAAmB,IAAI3lC,IAOvCk/D,EAAmB,CAAEh2E,KAAM,oBACjC,IAAK,MAAMy1C,KAASv4C,EAAKse,OACvB7hB,KAAK40E,UAAU94B,EAAO,CACpB+4B,GAAIwH,EACJz3D,QAASwR,GACT0+C,eACA9xB,qBAGL,CAQDi4B,cAEEv7B,EACA40B,EACA7vD,EACAm0D,GAEA,MAAMrE,EAAgC,GACtC,IAAIv5B,GAAQ,EAEZ,OAAQh7C,KAAKojC,IAAIsc,GAAQ,CACvB,GAAI1E,EACFA,GAAQ,OAGR,GADAh7C,KAAK6sC,OAAL,IACI7sC,KAAK4gC,MAAM8e,GAAQ,CACjBk5B,GACF54E,KAAK84E,4BAA4BF,GAEnC54E,KAAKu0B,OACL,KACD,CAGHggD,EAAK9uE,KAAKzF,KAAK+4E,kBAAkBzE,EAAY7vD,GAC9C,CACD,OAAO8vD,CACR,CAcDwE,kBAEEzE,EACA7vD,EACAk0D,GAEA,IAAItO,EACJ,GAAIrqE,KAAK4gC,MAAL,IACG0zC,GACHt0E,KAAKqlB,MAAMpG,EAAO3D,gBAAiB,CACjCgK,GAAItlB,KAAKqmB,MAAMwY,cACf1nB,WAAY,MAGhBkzD,EAAM,UACD,GAAIrqE,KAAK4gC,MAAL,IAAyB,CAClC,MAAM65C,EAAqBz6E,KAAKqmB,MAAM5W,MAChCirE,EAAqB16E,KAAKqmB,MAAM7B,SAEtC6lD,EAAMrqE,KAAKg+C,eACTh+C,KAAKm0E,YAAY1vD,GACjBg2D,EACAC,EAEH,MAAM,GAAI16E,KAAK4gC,MAAL,IAAyB,CAClC5gC,KAAKmlC,aAAa,sBACbwzC,GACH34E,KAAKqlB,MAAMpG,EAAOxE,8BAA+B,CAC/C6K,GAAItlB,KAAKqmB,MAAM7B,WAGnB,MAAMjhB,EAAOvD,KAAK2jB,YAClB3jB,KAAKu0B,OACL81C,EAAMrqE,KAAK6jB,WAAWtgB,EAAM,sBAC7B,MACC8mE,EAAMrqE,KAAKu9C,wBACT94B,EACAzkB,KAAKg+C,gBAGT,OAAOqsB,CACR,CAQDl1B,gBAAgB6C,GACd,MAAMz0C,EAAOvD,KAAK2jB,YACZnb,EAAOxI,KAAKyxE,oBAAoBluE,EAAKkM,MAAOuoC,GAElD,OAAOh4C,KAAKu7C,iBAAiBh4C,EAAMiF,EACpC,CAED+yC,iBACEh4C,EACAiF,GAKA,OAHAjF,EAAKiF,KAAOA,EACZjF,EAAK6a,IAAIxO,eAAiBpH,EAEnBxI,KAAK6jB,WAAWtgB,EAAM,aAC9B,CAEDkuE,oBAAoBjzD,EAAaw5B,GAC/B,IAAIxvC,EAEJ,MAAM,SAAEgc,EAAF,KAAYne,GAASrG,KAAKqmB,MAEhC,IAAIqL,EAA2BrrB,GAG7B,MAAMrG,KAAKmX,aAFX3O,EAAOxI,KAAKqmB,MAAMziB,MAKpB,MAAMquB,EAAiBR,EAAkCprB,GAczD,OAZI2xC,EAGE/lB,GACFjyB,KAAK+kC,aAAL,KAGF/kC,KAAK0hD,kBAAkBl5C,EAAMgc,EAAUyN,GAAgB,GAGzDjyB,KAAKu0B,OAEE/rB,CACR,CAEDk5C,kBACE5tB,EACAtP,EACAmnD,EACA7mD,GAGA,GAAIgP,EAAKzuB,OAAS,GAChB,OAIF,IAAKqvB,GAAkBZ,GACrB,OAGF,GAAa,UAATA,GACF,GAAI9zB,KAAKsuC,UAAU7C,SAEjB,YADAzrC,KAAKqlB,MAAMpG,EAAO3C,uBAAwB,CAAEgJ,GAAId,SAG7C,GAAa,UAATsP,EAAkB,CAC3B,GAAI9zB,KAAKsuC,UAAU9C,SAEjB,YADAxrC,KAAKqlB,MAAMpG,EAAOhM,uBAAwB,CAAEqS,GAAId,IAIlD,GAAIxkB,KAAK+4B,MAAMR,cAIb,YAHAv4B,KAAKqlB,MAAMpG,EAAO/L,oCAAqC,CACrDoS,GAAId,IAKRxkB,KAAKwuC,gBAAgB9D,gCAAgC,CAAEplB,GAAId,GAC5D,MAAM,GAAa,cAATsP,GACL9zB,KAAK+4B,MAAMT,gCAEb,YADAt4B,KAAKqlB,MAAMpG,EAAOlM,iBAAkB,CAAEuS,GAAId,IAK9C,GAAImnD,GAAiBv3C,GAAUN,GAK7B,YAJA9zB,KAAKqlB,MAAMpG,EAAOpE,kBAAmB,CACnCyK,GAAId,EACJ1J,QAASgZ,IAKb,MAAMwoD,EAAgBt8E,KAAKqmB,MAAMoN,OAE7B3O,EACAqP,GACAH,GAHAH,GAKAyoD,EAAaxoD,EAAM9zB,KAAK+zB,WAC1B/zB,KAAKqlB,MAAMpG,EAAO7D,uBAAwB,CACxCkK,GAAId,EACJ7N,aAAcmd,GAGnB,CAED6jD,iBACE,QAAI33E,KAAKsuC,UAAU9C,aACfxrC,KAAK4f,QAAQ4zD,2BAA8BxzE,KAAK+4B,MAAMd,WAI3D,CAID2/C,WAEErzD,EACAC,GAEA,MAAMjhB,EAAOvD,KAAKwvC,YAA+BjrB,EAAUC,GA0B3D,OAxBAxkB,KAAKwuC,gBAAgBjE,gCACnBtrB,EAAO9L,+BACP,CAEEmS,GAAI/hB,IAIJvD,KAAKojC,IAAL,KACFpjC,KAAKqlB,MAAMpG,EAAO9F,kBAAmB,CAAEmM,GAAI/hB,IAGxCvD,KAAK+4B,MAAMd,YAAej4B,KAAK4f,QAAQ4zD,4BACtCxzE,KAAKg4E,mBACPh4E,KAAK+5B,6BAA8B,EAEnC/5B,KAAK85B,mBAAoB,GAIxB95B,KAAKqmB,MAAMyX,YACdv6B,EAAKmb,SAAW1e,KAAKilE,gBAAgB,MAAM,IAGtCjlE,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAEDy0E,mBACE,GAAIh4E,KAAKwsC,wBAAyB,OAAO,EACzC,MAAM,KAAEnmC,GAASrG,KAAKqmB,MACtB,OAGE,KAAAhgB,GACS,KAATA,GADA,IAEAA,GACAqsB,GAAgBrsB,IAGP,MAATA,GANA,KAOAA,GAGCrG,KAAK4lB,UAAU,gBAblB,KAaoCvf,CAErC,CAID+vE,aACE,MAAM7yE,EAAOvD,KAAK2jB,YAElB3jB,KAAKwuC,gBAAgBjE,gCACnBtrB,EAAO1C,iBACP,CAEE+I,GAAI/hB,IAIRvD,KAAKu0B,OACL,IAAIgoD,GAAa,EACb79D,EAAgC,KACpC,IAAK1e,KAAKwsC,wBAER,OADA+vC,EAAav8E,KAAKojC,IAAlB,IACQpjC,KAAKqmB,MAAMhgB,MACjB,KAAK,GACL,KAAK,IACL,KAAK,EACL,KAAK,GACL,KAAK,EACL,KAAK,EACL,KAAK,GACL,KAAK,GAIH,IAAKk2E,EAAY,MAEnB,QACE79D,EAAW1e,KAAKs9C,mBAKtB,OAFA/5C,EAAKi5E,SAAWD,EAChBh5E,EAAKmb,SAAWA,EACT1e,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAKDozE,6BAA6Bv3B,EAAoBosB,GAC3CxrE,KAAK4lB,UAAU,CAAC,mBAAoB,CAAEigB,SAAU,YAChC,uBAAduZ,EAAK/4C,MAGPrG,KAAKqlB,MAAMpG,EAAOpB,+BAAgC,CAChDyH,GAAIkmD,GAIX,CAED2L,8BACEsF,EACAl4D,EACAC,GAEA,GAAIxkB,KAAK08E,kBAAkBD,GAAY,CACrC,MAAMnmC,EAAWt2C,KAAKwvC,YACpBjrB,EACAC,GAGF,OADA8xB,EAAS5wB,OAAS+2D,EACXz8E,KAAK6jB,WAAWyyB,EAAU,uBAClC,CAAM,CACL,MAAMA,EAAWt2C,KAAKwvC,YACpBjrB,EACAC,GAIF,OAFAxkB,KAAK28E,mCAAmCn4D,GACxC8xB,EAASr1B,WAAaw7D,EACfz8E,KAAK6jB,WAAWyyB,EAAU,0BAClC,CACF,CAEDomC,kBAAkBz7D,GAChB,OAAQA,EAAW5a,MACjB,IAAK,mBACH,OACG4a,EAAW2C,UAAY5jB,KAAK08E,kBAAkBz7D,EAAW3Q,QAE9D,IAAK,aACH,OAAO,EACT,QACE,OAAO,EAEZ,CAMDqsE,mCAAmCn4D,GAOjC,GAAIxkB,KAAK4gC,MAAL,IACF,MAAM5gC,KAAKqlB,MAAMpG,EAAOtB,oBAAqB,CAAE2H,GAAItlB,KAAKqmB,MAAM7B,WAI3DxkB,KAAKw3E,yCACRx3E,KAAKqlB,MAAMpG,EAAOnB,oBAAqB,CAAEwH,GAAId,GAEhD,CAQDyyD,wBAA2B7uE,GACzB,MAAMw0E,EAAyB58E,KAAKqmB,MAAMsX,aAC1C39B,KAAKqmB,MAAMsX,aAAe,CAExBC,yBAA0B,EAE1BC,cAAe,MAGjB,IACE,OAAOz1B,GAGR,CAJD,QAGEpI,KAAKqmB,MAAMsX,aAAei/C,CAC3B,CACF,CAUDC,mCAAsCz0E,GACpC,IAAIpI,KAAK4lB,UAAU,CAAC,mBAAoB,CAAEigB,SAAU,WAoBlD,OAAOz9B,IApBwD,CAE/D,MAAMw0E,EAAyB58E,KAAKqmB,MAAMsX,aAC1C39B,KAAKqmB,MAAMsX,aAAe,CAExBC,yBAA0B,EAE1BC,cAAe,MAGjB,IACE,OAAOz1B,GAGR,CAJD,QAGEpI,KAAKqmB,MAAMsX,aAAei/C,CAC3B,CACF,CAOF,CAEDvF,+BAAkCjvE,GAChC,MAAM00E,EAA6B98E,KAAKqmB,MAAMyX,UAC9C99B,KAAKqmB,MAAMyX,WAAY,EAEvB,IACE,OAAO11B,GAGR,CAJD,QAGEpI,KAAKqmB,MAAMyX,UAAYg/C,CACxB,CACF,CAED7G,WAAc7tE,GACZ,MAAM4X,EAAQhgB,KAAKsuC,UAAU/C,eACvBwxC,EAAiB3xC,IAAYprB,EACnC,GAAI+8D,EAAgB,CAClB/8E,KAAKsuC,UAAUzV,MAAM7Y,EAAQorB,IAC7B,IACE,OAAOhjC,GAGR,CAJD,QAGEpI,KAAKsuC,UAAUxV,MAChB,CACF,CACD,OAAO1wB,GACR,CAED2tE,cAAiB3tE,GACf,MAAM4X,EAAQhgB,KAAKsuC,UAAU/C,eACvByxC,EAAmB5xC,GAAWprB,EACpC,GAAIg9D,EAAkB,CACpBh9E,KAAKsuC,UAAUzV,MAAM7Y,GAASorB,IAC9B,IACE,OAAOhjC,GAGR,CAJD,QAGEpI,KAAKsuC,UAAUxV,MAChB,CACF,CACD,OAAO1wB,GACR,CAID8xE,yBACEl6E,KAAKqmB,MAAMsX,aAAaE,cAAgB,CACzC,CAEDo8C,0CACE,OAAOj6E,KAAKqmB,MAAMsX,aAAaC,0BAA4B,CAC5D,CAED45C,wCACE,OAC2C,MAAzCx3E,KAAKqmB,MAAMsX,aAAaE,eACxB79B,KAAKqmB,MAAMsX,aAAaE,eAAiB,CAE5C,CAEDy5C,wBAAsCZ,GACpC,MAAMnyD,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAE5BxkB,KAAKqmB,MAAM4W,iBAAmBj9B,KAAKqmB,MAAM5W,MACzC,MAAMopE,EAAgC74E,KAAKqmB,MAAM0X,2BACjD/9B,KAAKqmB,MAAM0X,4BAA6B,EAExC,MAAMk/C,EAAMj9E,KAAKsrE,YACftrE,KAAKw2E,2BACLjyD,EACAC,EACAkyD,GAKF,OAFA12E,KAAKqmB,MAAM0X,2BAA6B86C,EAEjCoE,CACR,CAGDvD,wBACE15E,KAAKmlC,aAAa,gBAClB,MAAM5hC,EAAOvD,KAAK2jB,YAClB3jB,KAAKu0B,OACLv0B,KAAK6sC,OAAL,GAEA,MAAMqwC,EAAel9E,KAAK8tC,kBAAiC,GAC3D9tC,KAAKyuC,qBAEL,MAAMoV,EAAU7jD,KAAK2jB,YACrB,IACEpgB,EAAKsB,KAAO7E,KAAKm9E,aAAat5B,EAAoB,WAGnD,CAJD,QAGEq5B,GACD,CAED,OADAl9E,KAAKojC,IAAL,GACOpjC,KAAK6jB,WAA+BtgB,EAAM,mBAClD,CAGDg9C,gCAEEr8B,GACO,EC5oGX,MAAMk5D,GAAY,CAAEtqE,KAAM,QACxBuqE,GAAc,CAAEvqE,KAAM,UAElBwqE,GAAgB,EACpBC,GAAiB,EACjBC,GAAyB,EACzBC,GAAmB,EAEfC,GAAgB,mBAEhBC,GAA4B,mBAYlC,SAASC,GAAmB/9D,EAA+Boc,GACzD,IAAK,IAAIzrB,EAAI,EAAGA,EAAIqP,EAAOxa,OAAQmL,IAAK,CACtC,MAAMgN,EAAQqC,EAAOrP,IACf,KAAEnK,GAASmX,EACjB,GAAoB,kBAATnX,EAAmB,CAE1B,GAAa,MAATA,EAAyB,CAC3B,MAAM,IAAE+X,EAAF,MAAO3O,EAAP,MAAc7L,EAAd,IAAqB8L,GAAQ8N,EAC7BqgE,EAAapuE,EAAQ,EACrBquE,EAAajuE,EAA+BuO,EAAI3O,MAAO,GAC7DoQ,EAAOkc,OACLvrB,EACA,EACA,IAAI+xB,GAAM,CAERl8B,KAAMssB,GAFE,IAGR/uB,MAAO,IACP6L,MAAOA,EACPC,IAAKmuE,EACLr5D,SAAUpG,EAAI3O,MACdsX,OAAQ+2D,IAEV,IAAIv7C,GAAM,CAERl8B,KAAMssB,GAFE,KAGR/uB,MAAOA,EACP6L,MAAOouE,EACPnuE,IAAKA,EACL8U,SAAUs5D,EACV/2D,OAAQ3I,EAAI1O,OAGhBc,IACA,QACD,CAED,GAAIkiB,GAAgBrsB,GAAO,CACzB,MAAM,IAAE+X,EAAF,MAAO3O,EAAP,MAAc7L,EAAd,IAAqB8L,GAAQ8N,EAC7BugE,EAAetuE,EAAQ,EACvBuuE,EAAkBnuE,EAA+BuO,EAAI3O,MAAO,GAClE,IAAIwuE,EAsBAC,EACFC,EACAC,EACAC,EAvBAJ,EADE,KAAAhiD,EAAMC,WAAWzsB,GACN,IAAI8yB,GAAM,CAErBl8B,KAAMssB,GAFe,IAGrB/uB,MAAO,IACP6L,MAAOA,EACPC,IAAKquE,EACLv5D,SAAUpG,EAAI3O,MACdsX,OAAQi3D,IAGG,IAAIz7C,GAAM,CAErBl8B,KAAMssB,GAFe,GAGrB/uB,MAAO,IACP6L,MAAOA,EACPC,IAAKquE,EACLv5D,SAAUpG,EAAI3O,MACdsX,OAAQi3D,IAOC,KAAT33E,GAEF83E,EAAqBzuE,EAAM,EAC3B0uE,EAAwBvuE,EAA+BuO,EAAI1O,KAAM,GACjEwuE,EAA0B,OAAVt6E,EAAiB,KAAOA,EAAMo7B,MAAM,GAAI,GACxDq/C,EAAW,IAAI97C,GAAM,CAEnBl8B,KAAMssB,GAFa,IAGnB/uB,MAAO,IACP6L,MAAO0uE,EACPzuE,IAAKA,EACL8U,SAAU45D,EACVr3D,OAAQ3I,EAAI1O,QAIdyuE,EAAqBzuE,EAAM,EAC3B0uE,EAAwBvuE,EAA+BuO,EAAI1O,KAAM,GACjEwuE,EAA0B,OAAVt6E,EAAiB,KAAOA,EAAMo7B,MAAM,GAAI,GACxDq/C,EAAW,IAAI97C,GAAM,CAEnBl8B,KAAMssB,GAFa,IAGnB/uB,MAAO,KACP6L,MAAO0uE,EACPzuE,IAAKA,EACL8U,SAAU45D,EACVr3D,OAAQ3I,EAAI1O,OAGhBmQ,EAAOkc,OACLvrB,EACA,EACAytE,EACA,IAAI17C,GAAM,CAERl8B,KAAMssB,GAFE,IAGR/uB,MAAOs6E,EACPzuE,MAAOsuE,EACPruE,IAAKyuE,EACL35D,SAAUw5D,EACVj3D,OAAQq3D,IAEVC,GAEF7tE,GAAK,EACL,QACD,CAGHgN,EAAMnX,KAAOssB,GAAiBtsB,EAC/B,CACF,CACD,OAAOwZ,CACR,CACc,MAAey+D,WAAwB9I,GAQpD5xB,cAA4BlkC,EAAcmkC,GAQxC,OAPAnkC,EAAKmkC,QAAU7jD,KAAKm9E,aAAat5B,GACjCnkC,EAAK6a,SAAWv6B,KAAKqmB,MAAMkU,SAEvBv6B,KAAK4f,QAAQC,SACfH,EAAKG,OAAS+9D,GAAmB59E,KAAK6f,OAAQ7f,KAAKi8B,QAG9Cj8B,KAAK6jB,WAAWnE,EAAM,OAC9B,CAEDy9D,aAEEt5B,EACAn0C,EAHU,IAIVrF,EAAyBrK,KAAK4f,QAAQvV,YAKtC,GAHAw5C,EAAQx5C,WAAaA,EACrBw5C,EAAQ06B,YAAcv+E,KAAKw+E,4BAC3Bx+E,KAAKgiB,eAAe6hC,GAAS,GAAM,EAAMn0C,GAEvC1P,KAAK+zB,WACJ/zB,KAAK4f,QAAQpV,wBACdxK,KAAK+4B,MAAMf,iBAAiBqO,KAAO,EAEnC,IAAK,MAAOrxB,EAAWsQ,KAAO1a,MAAMm+B,KAAK/oC,KAAK+4B,MAAMf,kBAClDh4B,KAAKqlB,MAAMpG,EAAOpG,sBAAuB,CAAEyM,KAAItQ,cAMnD,OAHY,MAARtF,GACF1P,KAAKu0B,OAEAv0B,KAAK6jB,WAAWggC,EAAS,UACjC,CAWD46B,gBAAgBp9D,GACd,MAAML,EAAYK,EAClBL,EAAU3a,KAAO,YACjB2a,EAAUpd,MAAQod,EAAUC,kBACrBD,EAAUC,WAEjB,MAAMy9D,EAAmB19D,EAAUpd,MAC7Bwd,EAAkBs9D,EAAiB96E,MACnCsd,EAAMlhB,KAAKi8B,MAAM+C,MAAM0/C,EAAiBjvE,MAAOivE,EAAiBhvE,KAChEqvB,EAAO2/C,EAAiB96E,MAAQsd,EAAI8d,MAAM,GAAI,GAQpD,OANAh/B,KAAK8rC,SAAS4yC,EAAkB,MAAOx9D,GACvClhB,KAAK8rC,SAAS4yC,EAAkB,WAAY3/C,GAC5C/+B,KAAK8rC,SAAS4yC,EAAkB,kBAAmBt9D,GAEnDs9D,EAAiBr4E,KAAO,mBAEjB2a,CACR,CAEDw9D,4BACE,IAAKx+E,KAAK4gC,MAAL,IACH,OAAO,KAGT,MAAMr9B,EAAOvD,KAAK2jB,YAGlB,OAFApgB,EAAKK,MAAQ5D,KAAKqmB,MAAMziB,MACxB5D,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,uBAC9B,CAEDkzC,MAAM5nC,GACJ,QAAK7O,KAAK+rC,aAAL,KAGE/rC,KAAK2+E,aAAa9vE,EAC1B,CAWD8vE,aAAa9vE,GACX,MAAM0lB,EAAOv0B,KAAK0jC,iBACZyI,EAASnsC,KAAK8jC,eAAevP,GAMnC,GACa,KAAX4X,GACW,KAAXA,EAEA,OAAO,EAET,GAAIt9B,EAAS,OAAO,EAEpB,GAAe,MAAXs9B,EAAqC,OAAO,EAEhD,GAAI/Y,GAAkB+Y,GAAS,CAE7B,GADAwxC,GAA0B/5C,UAAYrP,EAClCopD,GAA0BtqD,KAAKrzB,KAAKi8B,OAAQ,CAG9C,MAAM2iD,EAAQ5+E,KAAK8jC,eAAe65C,GAA0B/5C,WAC5D,IAAKrQ,GAAiBqrD,IAAoB,KAAVA,EAC9B,OAAO,CAEV,CACD,OAAO,CACR,CACD,OAAO,CACR,CAWDtiC,eAEEztC,EACAqT,GAKA,OAHIliB,KAAK4gC,MAAL,KACF5gC,KAAKq5E,iBAAgB,GAEhBr5E,KAAKqsE,sBAAsBx9D,EAASqT,EAC5C,CAEDmqD,sBAEEx9D,EACAqT,GAEA,IAAIgnD,EAAYlpE,KAAKqmB,MAAMhgB,KAC3B,MAAM9C,EAAOvD,KAAK2jB,YAClB,IAAI7Q,EAWJ,OATI9S,KAAKy2C,MAAM5nC,KACbq6D,EAAA,GACAp2D,EAAO,OAODo2D,GACN,KAAK,GACH,OAAOlpE,KAAK6+E,4BAA4Bt7E,GAAoB,GAC9D,KAAK,GACH,OAAOvD,KAAK6+E,4BAA4Bt7E,GAAoB,GAC9D,KAAK,GACH,OAAOvD,KAAK8+E,uBAAuBv7E,GACrC,KAAK,GACH,OAAOvD,KAAK++E,iBAAiBx7E,GAC/B,KAAK,GACH,OAAOvD,KAAKg/E,kBAAkBz7E,GAChC,KAAK,GACH,GAAI,KAAAvD,KAAK6jC,oBAAuC,MAQhD,OAPIh1B,IACE7O,KAAKqmB,MAAMoN,OACbzzB,KAAKqlB,MAAMpG,EAAOnC,eAAgB,CAAEwI,GAAItlB,KAAKqmB,MAAM7B,WAC9B,OAAZ3V,GAAgC,UAAZA,GAC7B7O,KAAKqlB,MAAMpG,EAAOhF,eAAgB,CAAEqL,GAAItlB,KAAKqmB,MAAM7B,YAGhDxkB,KAAKopE,uBACV7lE,GACA,GACCsL,GAGL,KAAK,GAEH,OADIA,GAAS7O,KAAKmX,aACXnX,KAAKqpE,WAAW9lE,GAAoC,GAE7D,KAAK,GACH,OAAOvD,KAAKi/E,iBAAiB17E,GAC/B,KAAK,GACH,OAAOvD,KAAKk/E,qBAAqB37E,GACnC,KAAK,GACH,OAAOvD,KAAKm/E,qBAAqB57E,GACnC,KAAK,GACH,OAAOvD,KAAKo/E,oBAAoB77E,GAClC,KAAK,GACH,OAAOvD,KAAKq/E,kBAAkB97E,GAEhC,KAAK,GACL,KAAK,GAOH,OANAuP,EAAOA,GAAQ9S,KAAKqmB,MAAMziB,MACtBiL,GAAoB,QAATiE,GACb9S,KAAKqlB,MAAMpG,EAAOjE,6BAA8B,CAC9CsK,GAAItlB,KAAKqmB,MAAM7B,WAGZxkB,KAAKspE,kBACV/lE,EACAuP,GAGJ,KAAK,GACH,OAAO9S,KAAKs/E,oBAAoB/7E,GAClC,KAAK,GACH,OAAOvD,KAAKu/E,mBAAmBh8E,GACjC,KAAK,EACH,OAAOvD,KAAKywE,aACd,KAAK,GACH,OAAOzwE,KAAKw/E,oBAAoBj8E,GAClC,KAAK,GAAY,CACf,MAAMk8E,EAAoBz/E,KAAK6jC,oBAC/B,GACwB,KAAtB47C,GACsB,KAAtBA,EAEA,KAEH,CAED,KAAK,GAAY,CASf,IAAIxzE,EAgCJ,OAxCKjM,KAAK4f,QAAQ8zD,6BAAgCxxD,GAChDliB,KAAKqlB,MAAMpG,EAAOrE,uBAAwB,CACxC0K,GAAItlB,KAAKqmB,MAAM7B,WAInBxkB,KAAKu0B,OAGa,KAAd20C,GACFj9D,EAASjM,KAAKu2C,YAAYhzC,GAGR,sBAAhB0I,EAAO5F,MACL4F,EAAOsnC,YAAoC,UAAtBtnC,EAAOsnC,aAE9BvzC,KAAK85B,mBAAoB,KAG3B7tB,EAASjM,KAAK+lB,YACZxiB,IAQiB,2BAAhB0I,EAAO5F,MACJ4F,EAAOyqC,YAAoC,UAAtBzqC,EAAOyqC,cACf,yBAAhBzqC,EAAO5F,MACJ4F,EAAOyqC,YAAoC,UAAtBzqC,EAAOyqC,aAChB,6BAAhBzqC,EAAO5F,OAEPrG,KAAK85B,mBAAoB,IAI7B95B,KAAKk+C,wBAAwBjyC,GAEtBA,CACR,CAED,QACE,GAAIjM,KAAK0/E,kBAOP,OANI7wE,GACF7O,KAAKqlB,MAAMpG,EAAOjM,sCAAuC,CACvDsS,GAAItlB,KAAKqmB,MAAM7B,WAGnBxkB,KAAKu0B,OACEv0B,KAAKopE,uBACV7lE,GACA,GACCsL,GAWT,MAAM8wE,EAAY3/E,KAAKqmB,MAAMziB,MACvB64C,EAAOz8C,KAAK60C,kBAElB,OACErjB,EAAkB03C,IACJ,eAAdzsB,EAAKp2C,MACLrG,KAAKojC,IAAL,IAEOpjC,KAAK4/E,sBACVr8E,EACAo8E,EAEAljC,EACA5tC,GAGK7O,KAAKw8C,yBACVj5C,EACAk5C,EAGL,CAEDyB,wBAAwB36C,GACjBvD,KAAK4f,QAAQ8zD,6BAAgC1zE,KAAK+zB,UACrD/zB,KAAKqlB,MAAMpG,EAAO/N,oBAAqB,CAAEoU,GAAI/hB,GAEhD,CAEDstE,eAAettE,GACb,MAAM4mE,EACJnqE,KAAKqmB,MAAM4X,eAAej+B,KAAKqmB,MAAM4X,eAAe54B,OAAS,GAC3D8kE,EAAW9kE,SACb9B,EAAK4mE,WAAaA,EAClBnqE,KAAKyvC,2BAA2BlsC,EAAM4mE,EAAW,IACjDnqE,KAAKqmB,MAAM4X,eAAej+B,KAAKqmB,MAAM4X,eAAe54B,OAAS,GAAK,GAErE,CAED+oE,0BACE,OAAOpuE,KAAK4gC,MAAZ,GACD,CAEDy4C,gBAA8BwG,GAC5B,MAAMC,EACJ9/E,KAAKqmB,MAAM4X,eAAej+B,KAAKqmB,MAAM4X,eAAe54B,OAAS,GAC/D,MAAOrF,KAAK4gC,MAAL,IAAmB,CACxB,MAAMm/C,EAAY//E,KAAKw0E,iBACvBsL,EAAyBr6E,KAAKs6E,EAC/B,CAED,GAAI//E,KAAK4gC,MAAL,IACGi/C,GACH7/E,KAAKmX,aAILnX,KAAK4lB,UAAU,gBACd5lB,KAAKgjB,gBAAgB,aAAc,2BAEpChjB,KAAKqlB,MAAMpG,EAAO/K,qBAAsB,CAAEoR,GAAItlB,KAAKqmB,MAAM7B,gBAEtD,IAAKxkB,KAAKouE,0BACf,MAAMpuE,KAAKqlB,MAAMpG,EAAOlE,2BAA4B,CAClDuK,GAAItlB,KAAKqmB,MAAM7B,UAGpB,CAEDgwD,iBACEx0E,KAAKsoC,gBAAgB,CAAC,aAAc,sBAEpC,MAAM/kC,EAAOvD,KAAK2jB,YAGlB,GAFA3jB,KAAKu0B,OAEDv0B,KAAK4lB,UAAU,cAAe,CAGhC5lB,KAAKqmB,MAAM4X,eAAex4B,KAAK,IAE/B,MAAM8e,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5B,IAAIi4B,EAEJ,GAAIz8C,KAAK4gC,MAAL,IAAuB,CACzB,MAAMrc,EAAWvkB,KAAKqmB,MAAM5W,MACtB+U,EAAWxkB,KAAKqmB,MAAM7B,SAC5BxkB,KAAKu0B,OACLkoB,EAAOz8C,KAAK60C,kBACZ70C,KAAK6sC,OAAL,IACA4P,EAAOz8C,KAAK66E,gBAAgBt2D,EAAUC,EAAUi4B,GAEhD,MAAMujC,EAAiBhgF,KAAKqmB,MAAM7B,SAClCjhB,EAAK0d,WAAajhB,KAAKkuE,6BAA6BzxB,IAGhD,IADFz8C,KAAKgjB,gBAAgB,aAAc,2BAEnCzf,EAAK0d,aAAew7B,GAEpBz8C,KAAKqlB,MAAMpG,EAAOlL,qCAAsC,CACtDuR,GAAI06D,GAGT,KAAM,CACLvjC,EAAOz8C,KAAKm1C,iBAAgB,GAE5B,MAAOn1C,KAAKojC,IAAL,IAAkB,CACvB,MAAM7/B,EAAOvD,KAAKwvC,YAAYjrB,EAAUC,GACxCjhB,EAAK+M,OAASmsC,EACVz8C,KAAK4gC,MAAL,MACF5gC,KAAKilB,WAAWC,eACdllB,KAAKqmB,MAAMziB,MACX5D,KAAKqmB,MAAM7B,UAEbjhB,EAAKsqC,SAAW7tC,KAAK+iB,oBAErBxf,EAAKsqC,SAAW7tC,KAAKm1C,iBAAgB,GAEvC5xC,EAAKqgB,UAAW,EAChB64B,EAAOz8C,KAAK6jB,WAAWtgB,EAAM,mBAC9B,CAEDA,EAAK0d,WAAajhB,KAAKkuE,6BAA6BzxB,EACrD,CAEDz8C,KAAKqmB,MAAM4X,eAAe14B,KAC3B,MACChC,EAAK0d,WAAajhB,KAAKk4E,sBAEzB,OAAOl4E,KAAK6jB,WAAWtgB,EAAM,YAC9B,CAED2qE,6BAA2CzxB,GACzC,GAAIz8C,KAAKojC,IAAL,IAAqB,CACvB,MAAM7/B,EAAOvD,KAAK0mB,gBAAgB+1B,GAIlC,OAHAl5C,EAAKmiB,OAAS+2B,EACdl5C,EAAKtB,UAAYjC,KAAKojD,6BAAL,IAA6C,GAC9DpjD,KAAKs/C,iBAAiB/7C,EAAKtB,WACpBjC,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAED,OAAOk5C,CACR,CAUDoiC,4BACEt7E,EACAitE,GAaA,OAXAxwE,KAAKu0B,OAEDv0B,KAAK0sC,mBACPnpC,EAAK2D,MAAQ,MAEb3D,EAAK2D,MAAQlH,KAAKm1C,kBAClBn1C,KAAK2sC,aAGP3sC,KAAKuwE,oBAAoBhtE,EAAMitE,GAExBxwE,KAAK6jB,WACVtgB,EACAitE,EAAU,iBAAmB,oBAEhC,CAEDD,oBACEhtE,EACAitE,GAEA,IAAIhgE,EACJ,IAAKA,EAAI,EAAGA,EAAIxQ,KAAKqmB,MAAM2X,OAAO34B,SAAUmL,EAAG,CAC7C,MAAMyvE,EAAMjgF,KAAKqmB,MAAM2X,OAAOxtB,GAC9B,GAAkB,MAAdjN,EAAK2D,OAAiB+4E,EAAIz3E,OAASjF,EAAK2D,MAAMsB,KAAM,CACtD,GAAgB,MAAZy3E,EAAIntE,OAAiB09D,GAAwB,SAAbyP,EAAIntE,MAAkB,MAC1D,GAAIvP,EAAK2D,OAASspE,EAAS,KAC5B,CACF,CACD,GAAIhgE,IAAMxQ,KAAKqmB,MAAM2X,OAAO34B,OAAQ,CAClC,MAAMgB,EAAOmqE,EAAU,iBAAmB,oBAC1CxwE,KAAKqlB,MAAMpG,EAAO3J,qBAAsB,CAAEgQ,GAAI/hB,EAAM8C,QACrD,CACF,CAEDy4E,uBACEv7E,GAIA,OAFAvD,KAAKu0B,OACLv0B,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED28E,wBACElgF,KAAK6sC,OAAL,IACA,MAAM9N,EAAM/+B,KAAK60C,kBAEjB,OADA70C,KAAK6sC,OAAL,IACO9N,CACR,CAEDggD,iBAEEx7E,GAoBA,OAlBAvD,KAAKu0B,OACLv0B,KAAKqmB,MAAM2X,OAAOv4B,KAAK23E,IAGvB75E,EAAKsB,KAIH7E,KAAK68E,oCAAmC,IAEtC78E,KAAKs8C,eAAe,QAGxBt8C,KAAKqmB,MAAM2X,OAAOz4B,MAElBvF,KAAK6sC,OAAL,IACAtpC,EAAK8vB,KAAOrzB,KAAKkgF,wBACjBlgF,KAAKojC,IAAL,IACOpjC,KAAK6jB,WAAWtgB,EAAM,mBAC9B,CAUDy7E,kBAEEz7E,GAEAvD,KAAKu0B,OACLv0B,KAAKqmB,MAAM2X,OAAOv4B,KAAK23E,IAEvB,IAAI+C,EAAU,KAQd,GANIngF,KAAK23E,kBAAoB33E,KAAKqsC,cAAL,MAC3B8zC,EAAUngF,KAAKqmB,MAAM6X,iBAEvBl+B,KAAK+4B,MAAMF,MAAMlE,IACjB30B,KAAK6sC,OAAL,IAEI7sC,KAAK4gC,MAAL,IAIF,OAHgB,OAAZu/C,GACFngF,KAAKmX,WAAWgpE,GAEXngF,KAAKogF,SAAS78E,EAAgC,MAGvD,MAAM88E,EAAgBrgF,KAAK+rC,aAA3B,IACM0K,EAAQ4pC,GAAiBrgF,KAAK2+E,eACpC,GAAI3+E,KAAK4gC,MAAkB,KAAA5gC,KAAK4gC,MAA5B,KAAgD6V,EAAO,CACzD,MAAM6pC,EAAWtgF,KAAK2jB,YAChB7Q,EAAO2jC,EAAQ,MAAQz2C,KAAKqmB,MAAMziB,MACxC5D,KAAKu0B,OACLv0B,KAAKugF,SAASD,GAAU,EAAMxtE,GAC9B,MAAM4rB,EAAO1+B,KAAK6jB,WAAWy8D,EAAU,uBAEvC,OACGtgF,KAAK4gC,MAAL,KAAsB5gC,KAAK+rC,aAAL,OACM,IAA7BrN,EAAKwtC,aAAa7mE,OAEXrF,KAAKwgF,WAAWj9E,EAA2Bm7B,EAAMyhD,IAE1C,OAAZA,GACFngF,KAAKmX,WAAWgpE,GAEXngF,KAAKogF,SAAS78E,EAAgCm7B,GACtD,CAID,MAAM+hD,EAAkBzgF,KAAK+rC,aAA7B,IAEMtnB,EAAsB,IAAImqB,GAC1BlQ,EAAO1+B,KAAK60C,iBAAgB,EAAMpwB,GAClCi8D,EAAU1gF,KAAK+rC,aAArB,KAoBA,GAnBI20C,IAEEL,GACFrgF,KAAKqlB,MAAMpG,EAAO7J,SAAU,CAAEkQ,GAAIoZ,IAKtB,OAAZyhD,GACAM,GACc,eAAd/hD,EAAKr4B,MAMLrG,KAAKqlB,MAAMpG,EAAO9J,WAAY,CAAEmQ,GAAIoZ,KAGpCgiD,GAAW1gF,KAAK4gC,MAAL,IAAoB,CACjC5gC,KAAK2uC,0BAA0BlqB,GAC/BzkB,KAAK+kB,aAAa2Z,GAAkB,GACpC,MAAMr4B,EAAOq6E,EAAU,iBAAmB,iBAE1C,OADA1gF,KAAK40E,UAAUl2C,EAAM,CAAEm2C,GAAI,CAAExuE,UACtBrG,KAAKwgF,WACVj9E,EAEAm7B,EACAyhD,EAEH,CAMD,OALEngF,KAAKqtC,sBAAsB5oB,GAAqB,GAElC,OAAZ07D,GACFngF,KAAKmX,WAAWgpE,GAEXngF,KAAKogF,SAAS78E,EAAgCm7B,EACtD,CAED0qC,uBAEE7lE,EACAie,EACAm/D,GAGA,OADA3gF,KAAKu0B,OACEv0B,KAAK25E,cACVp2E,EACAg6E,IAAkBoD,EAAsB,EAAInD,IAC5Ch8D,EAEH,CAEDy9D,iBAA+B17E,GAK7B,OAJAvD,KAAKu0B,OACLhxB,EAAK8vB,KAAOrzB,KAAKkgF,wBACjB38E,EAAKy5C,WAAah9C,KAAKs8C,eAAe,MACtC/4C,EAAK85C,UAAYr9C,KAAKojC,IAAL,IAAqBpjC,KAAKs8C,eAAe,MAAQ,KAC3Dt8C,KAAK6jB,WAAWtgB,EAAM,cAC9B,CAED27E,qBAAmC37E,GAkBjC,OAjBKvD,KAAKsuC,UAAU5C,WAAc1rC,KAAK4f,QAAQ6zD,4BAC7CzzE,KAAKqlB,MAAMpG,EAAOzJ,cAAe,CAAE8P,GAAItlB,KAAKqmB,MAAM7B,WAGpDxkB,KAAKu0B,OAMDv0B,KAAK0sC,mBACPnpC,EAAKmb,SAAW,MAEhBnb,EAAKmb,SAAW1e,KAAK60C,kBACrB70C,KAAK2sC,aAGA3sC,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAED47E,qBAAmC57E,GACjCvD,KAAKu0B,OACLhxB,EAAKq9E,aAAe5gF,KAAKkgF,wBACzB,MAAMW,EAAqCt9E,EAAKs9E,MAAQ,GASxD,IAAIC,EACKC,EAAT,IATA/gF,KAAK6sC,OAAL,GACA7sC,KAAKqmB,MAAM2X,OAAOv4B,KAAK43E,IACvBr9E,KAAK+4B,MAAMF,MAAMlE,KAOK30B,KAAK4gC,MAAL,IACpB,GAAI5gC,KAAK4gC,MAAL,KAAwB5gC,KAAK4gC,MAAL,IAAyB,CACnD,MAAMogD,EAAShhF,KAAK4gC,MAApB,IACIkgD,GAAK9gF,KAAK6jB,WAAWi9D,EAAK,cAE9BD,EAAMp7E,KAAMq7E,EAAM9gF,KAAK2jB,aACvBm9D,EAAI9jC,WAAa,GACjBh9C,KAAKu0B,OACDysD,EACFF,EAAIztD,KAAOrzB,KAAK60C,mBAEZksC,GACF/gF,KAAKqlB,MAAMpG,EAAOnG,yBAA0B,CAC1CwM,GAAItlB,KAAKqmB,MAAM6X,kBAGnB6iD,GAAa,EACbD,EAAIztD,KAAO,MAEbrzB,KAAK6sC,OAAL,GACD,MACKi0C,EACFA,EAAI9jC,WAAWv3C,KAAKzF,KAAKs8C,eAAe,OAExCt8C,KAAKmX,aAQX,OAJAnX,KAAK+4B,MAAMD,OACPgoD,GAAK9gF,KAAK6jB,WAAWi9D,EAAK,cAC9B9gF,KAAKu0B,OACLv0B,KAAKqmB,MAAM2X,OAAOz4B,MACXvF,KAAK6jB,WAAWtgB,EAAM,kBAC9B,CAED67E,oBAAkC77E,GAOhC,OANAvD,KAAKu0B,OACDv0B,KAAKwsC,yBACPxsC,KAAKqlB,MAAMpG,EAAOlG,kBAAmB,CAAEuM,GAAItlB,KAAKqmB,MAAMa,gBAExD3jB,EAAKmb,SAAW1e,KAAK60C,kBACrB70C,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAEDkrE,wBACE,MAAM3yB,EAAQ97C,KAAK2hD,mBAEbs/B,EAAwB,eAAfnlC,EAAMz1C,KAQrB,OAPArG,KAAK+4B,MAAMF,MAAMooD,EAASlsD,GAAqB,GAC/C/0B,KAAK40E,UAAU94B,EAAO,CACpB+4B,GAAI,CAAExuE,KAAM,eACZue,QAASuR,GACT4+C,0BAA0B,IAGrBj5B,CACR,CAEDujC,kBAEE97E,GAOA,GALAvD,KAAKu0B,OAELhxB,EAAK29E,MAAQlhF,KAAKywE,aAClBltE,EAAK49E,QAAU,KAEXnhF,KAAK4gC,MAAL,IAAuB,CACzB,MAAMwgD,EAASphF,KAAK2jB,YACpB3jB,KAAKu0B,OACDv0B,KAAK4gC,MAAL,KACF5gC,KAAK6sC,OAAL,IACAu0C,EAAOtlC,MAAQ97C,KAAKyuE,wBACpBzuE,KAAK6sC,OAAL,MAEAu0C,EAAOtlC,MAAQ,KACf97C,KAAK+4B,MAAMF,MAAMlE,KAInBysD,EAAOv8E,KAGL7E,KAAK68E,oCAAmC,IAEtC78E,KAAKywE,YAAW,GAAO,KAG3BzwE,KAAK+4B,MAAMD,OACXv1B,EAAK49E,QAAUnhF,KAAK6jB,WAAWu9D,EAAQ,cACxC,CAQD,OANA79E,EAAK89E,UAAYrhF,KAAKojC,IAAL,IAAwBpjC,KAAKywE,aAAe,KAExDltE,EAAK49E,SAAY59E,EAAK89E,WACzBrhF,KAAKqlB,MAAMpG,EAAOjG,iBAAkB,CAAEsM,GAAI/hB,IAGrCvD,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAED+lE,kBAEE/lE,EACAuP,EACAm5D,GAAmC,GAKnC,OAHAjsE,KAAKu0B,OACLv0B,KAAKugF,SAASh9E,GAAM,EAAOuP,EAAMm5D,GACjCjsE,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAED+7E,oBAEE/7E,GAkBA,OAhBAvD,KAAKu0B,OACLhxB,EAAK8vB,KAAOrzB,KAAKkgF,wBACjBlgF,KAAKqmB,MAAM2X,OAAOv4B,KAAK23E,IAGvB75E,EAAKsB,KAIH7E,KAAK68E,oCAAmC,IAEtC78E,KAAKs8C,eAAe,WAGxBt8C,KAAKqmB,MAAM2X,OAAOz4B,MAEXvF,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAEDg8E,mBAEEh8E,GAmBA,OAjBIvD,KAAKqmB,MAAMoN,QACbzzB,KAAKqlB,MAAMpG,EAAOhC,WAAY,CAAEqI,GAAItlB,KAAKqmB,MAAM7B,WAEjDxkB,KAAKu0B,OACLhxB,EAAK+M,OAAStQ,KAAKkgF,wBAGnB38E,EAAKsB,KAKH7E,KAAK68E,oCAAmC,IAEtC78E,KAAKs8C,eAAe,UAGjBt8C,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAEDi8E,oBAAoBj8E,GAElB,OADAvD,KAAKu0B,OACEv0B,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAEDq8E,sBAEEr8E,EACAo8E,EACAljC,EACA5tC,GAEA,IAAK,MAAM3H,KAASlH,KAAKqmB,MAAM2X,OACzB92B,EAAMsB,OAASm3E,GACjB3/E,KAAKqlB,MAAMpG,EAAOxH,mBAAoB,CACpC6N,GAAIm3B,EACJ/kC,UAAWioE,IAKjB,MAAM7sE,EAAOkf,GAAYhyB,KAAKqmB,MAAMhgB,MAChC,OACArG,KAAK4gC,MACL,aACA,KACJ,IAAK,IAAIpwB,EAAIxQ,KAAKqmB,MAAM2X,OAAO34B,OAAS,EAAGmL,GAAK,EAAGA,IAAK,CACtD,MAAMtJ,EAAQlH,KAAKqmB,MAAM2X,OAAOxtB,GAChC,GAAItJ,EAAMo6E,iBAAmB/9E,EAAKkM,MAIhC,MAHAvI,EAAMo6E,eAAiBthF,KAAKqmB,MAAM5W,MAClCvI,EAAM4L,KAAOA,CAIhB,CAiBD,OAfA9S,KAAKqmB,MAAM2X,OAAOv4B,KAAK,CACrB+C,KAAMm3E,EACN7sE,KAAMA,EACNwuE,eAAgBthF,KAAKqmB,MAAM5W,QAE7BlM,EAAKsB,KAAO7E,KAAKs8C,eACfztC,GACkC,IAA9BA,EAAQszB,QAAQ,SACdtzB,EAAU,QACVA,EACF,SAGN7O,KAAKqmB,MAAM2X,OAAOz4B,MAClBhC,EAAK2D,MAAQu1C,EACNz8C,KAAK6jB,WAAWtgB,EAAM,mBAC9B,CAEDi5C,yBACEj5C,EACAk5C,GAIA,OAFAl5C,EAAK0d,WAAaw7B,EAClBz8C,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,sBAC9B,CAMDktE,WAEExuD,GAA2B,EAC3ByuD,GAAiC,EACjCvuD,GAEA,MAAM5e,EAAOvD,KAAK2jB,YAmBlB,OAlBI1B,GACFjiB,KAAKqmB,MAAMmY,aAAa2F,QAE1BnkC,KAAK6sC,OAAL,GACI6jC,GACF1wE,KAAK+4B,MAAMF,MAAMlE,IAEnB30B,KAAKgiB,eACHze,EACA0e,GACA,EAHF,EAKEE,GAEFniB,KAAKu0B,OACDm8C,GACF1wE,KAAK+4B,MAAMD,OAEN94B,KAAK6jB,WAAWtgB,EAAM,iBAC9B,CAEDue,iBAAiBT,GACf,MACgB,wBAAdA,EAAKhb,MACoB,kBAAzBgb,EAAKJ,WAAW5a,OACfgb,EAAKJ,WAAWE,MAAMY,aAE1B,CAEDC,eAEEze,EACA0e,EACAC,EACAxS,EACAyS,GAEA,MAAMtd,EAAsCtB,EAAKsB,KAAO,GAClDwd,EAAkD9e,EAAK8e,WAC3D,GACFriB,KAAKooE,4BACHvjE,EACAod,EAAkBI,OAAanU,EAC/BgU,EACAxS,EACAyS,EAEH,CAKDimD,4BAEEvjE,EACAwd,EACAH,EACAxS,EACAyS,GAEA,MAAM2uD,EAAY9wE,KAAKqmB,MAAMoN,OAC7B,IAAIyoD,GAAyB,EACzBqF,GAAqB,EAEzB,OAAQvhF,KAAK4gC,MAAMlxB,GAAM,CACvB,MAAM2R,EAAOrhB,KAAKs8C,eAAe,KAAMp6B,GAEvC,GAAIG,IAAek/D,EAAoB,CACrC,GAAIvhF,KAAK8hB,iBAAiBT,GAAO,CAC/B,MAAML,EAAYhhB,KAAKy+E,gBAAgBp9D,GACvCgB,EAAW5c,KAAKub,GAGbk7D,GACyB,eAA1Bl7D,EAAUpd,MAAMA,QAEhBs4E,GAAyB,EACzBl8E,KAAKikC,WAAU,IAGjB,QACD,CACDs9C,GAAqB,EAErBvhF,KAAKqmB,MAAMmY,aAAa2F,OACzB,CACDt/B,EAAKY,KAAK4b,EACX,CAEGc,GACFA,EAAgBxU,KAAK3N,KAAMk8E,GAGxBpL,GACH9wE,KAAKikC,WAAU,EAElB,CAMDm8C,SAEE78E,EACAm7B,GAsBA,OApBAn7B,EAAKm7B,KAAOA,EACZ1+B,KAAK2sC,WAAyB,GAC9BppC,EAAK8vB,KAAOrzB,KAAK4gC,MAAL,IAAsB,KAAO5gC,KAAK60C,kBAC9C70C,KAAK2sC,WAAyB,GAC9BppC,EAAKs0E,OAAS73E,KAAK4gC,MAAL,IAAwB,KAAO5gC,KAAK60C,kBAClD70C,KAAK6sC,OAAL,IAGAtpC,EAAKsB,KAIH7E,KAAK68E,oCAAmC,IAEtC78E,KAAKs8C,eAAe,SAGxBt8C,KAAK+4B,MAAMD,OACX94B,KAAKqmB,MAAM2X,OAAOz4B,MAEXvF,KAAK6jB,WAAWtgB,EAAM,eAC9B,CAKDi9E,WAEEj9E,EACAm7B,EACAyhD,GAEA,MAAMqB,EAAUxhF,KAAK4gC,MAArB,IAiDA,OAhDA5gC,KAAKu0B,OAEDitD,EACc,OAAZrB,GAAkBngF,KAAKmX,WAAWgpE,GAEtC58E,EAAKk+E,MAAoB,OAAZtB,EAIC,wBAAdzhD,EAAKr4B,MACwB,MAA7Bq4B,EAAKwtC,aAAa,GAAGxtC,MACnB8iD,IACAxhF,KAAKqmB,MAAMoN,QACG,QAAdiL,EAAK5rB,MAC4B,eAAjC4rB,EAAKwtC,aAAa,GAAG/oD,GAAG9c,MAE1BrG,KAAKqlB,MAAMpG,EAAO/J,uBAAwB,CACxCoQ,GAAIoZ,EACJr4B,KAAMm7E,EAAU,iBAAmB,mBAIrB,sBAAd9iD,EAAKr4B,MACPrG,KAAKqlB,MAAMpG,EAAOpI,WAAY,CAC5ByO,GAAIoZ,EACJ5nB,SAAU,CAAEzQ,KAAM,kBAItB9C,EAAK67C,KAAO1gB,EACZn7B,EAAK00C,MAAQupC,EACTxhF,KAAK60C,kBACL70C,KAAKu9C,0BACTv9C,KAAK6sC,OAAL,IAGAtpC,EAAKsB,KAIH7E,KAAK68E,oCAAmC,IAEtC78E,KAAKs8C,eAAe,SAGxBt8C,KAAK+4B,MAAMD,OACX94B,KAAKqmB,MAAM2X,OAAOz4B,MAEXvF,KAAK6jB,WAAWtgB,EAAMi+E,EAAU,iBAAmB,iBAC3D,CAIDjB,SAEEh9E,EACAm+E,EACA5uE,EACAm5D,GAAmC,GAEnC,MAAMC,EAAwC3oE,EAAK2oE,aAAe,GAElE,IADA3oE,EAAKuP,KAAOA,IACH,CACP,MAAMqrC,EAAOn+C,KAAK2jB,YA4BlB,GA3BA3jB,KAAK8hD,WAAW3D,EAAMrrC,GACtBqrC,EAAKzf,KAAQ1+B,KAAKojC,IAAL,IAETs+C,EACA1hF,KAAKk2E,6BACLl2E,KAAKu9C,0BAHL,KAKc,OAAdY,EAAKzf,MAAkButC,IAEN,eAAjB9tB,EAAKh7B,GAAG9c,MACNq7E,IAAU1hF,KAAK4gC,MAAiB,KAAA5gC,KAAK+rC,aAAhC,MAOE,UAATj5B,GACE9S,KAAK4gC,MAAiB,KAAA5gC,KAAK+rC,aAAL,MAExB/rC,KAAKqlB,MAAMpG,EAAOnL,8BAA+B,CAC/CwR,GAAItlB,KAAKqmB,MAAMa,cACfpU,KAAM,UAVR9S,KAAKqlB,MAAMpG,EAAOnL,8BAA+B,CAC/CwR,GAAItlB,KAAKqmB,MAAMa,cACfpU,KAAM,mBAYZo5D,EAAazmE,KAAKzF,KAAK6jB,WAAWs6B,EAAM,wBACnCn+C,KAAKojC,IAAL,IAAoB,KAC1B,CACD,OAAO7/B,CACR,CAEDu+C,WAEE3D,EACArrC,GAEAqrC,EAAKh7B,GAAKnjB,KAAK2hD,mBACf3hD,KAAK40E,UAAUz2B,EAAKh7B,GAAI,CACtB0xD,GAAI,CAAExuE,KAAM,sBACZue,QAAkB,QAAT9R,EAAiBsjB,GAAWD,IAExC,CAKDwjD,cAEEp2E,EACAo+E,EAAoBrE,GACpB97D,GAAmB,GAEnB,MAAMo9B,EAAc+iC,EAAYpE,GAC1BqE,EAAqBD,EAAYnE,GACjC5M,IAAchyB,KAAiB+iC,EAAYlE,IAEjDz9E,KAAKuhB,aAAahe,EAAMie,GAEpBxhB,KAAK4gC,MAAkBghD,KAAAA,GACzB5hF,KAAKqlB,MAAMpG,EAAO5J,kCAAmC,CACnDiQ,GAAItlB,KAAKqmB,MAAM7B,WAGnBjhB,EAAKy4E,UAAYh8E,KAAKojC,IAAtB,IAEIwb,IACFr7C,EAAK4f,GAAKnjB,KAAK2wE,gBAAgBC,IAGjC,MAAM9G,EAA4B9pE,KAAKqmB,MAAM+W,uBAiC7C,OAhCAp9B,KAAKqmB,MAAM+W,wBAAyB,EACpCp9B,KAAK+4B,MAAMF,MAAMhE,IACjB70B,KAAKsuC,UAAUzV,MAAM+S,GAAcpqB,EAASje,EAAKy4E,YAE5Cp9B,IACHr7C,EAAK4f,GAAKnjB,KAAK2wE,mBAGjB3wE,KAAK4hD,oBAAoBr+C,GAA2B,GAKpDvD,KAAK68E,oCAAmC,KAEtC78E,KAAKq8C,2BACH94C,EACAq7C,EAAc,sBAAwB,qBAFxC,IAMF5+C,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,OAEP8lB,IAAgBgjC,GAIlB5hF,KAAK0qE,4BAA4BnnE,GAGnCvD,KAAKqmB,MAAM+W,uBAAyB0sC,EAC7BvmE,CACR,CAEDotE,gBAAgBC,GACd,OAAOA,GAAap/C,EAAkBxxB,KAAKqmB,MAAMhgB,MAC7CrG,KAAKm1C,kBACL,IACL,CAEDyM,oBAEEr+C,EACAs+C,GAEA7hD,KAAK6sC,OAAL,IACA7sC,KAAKwuC,gBAAgB3V,MAAM+R,MAC3BrnC,EAAKse,OAAS7hB,KAAKkiE,iBAGA,SACjBrgB,GAGF7hD,KAAKwuC,gBAAgB1V,MACtB,CAED4xC,4BAA4BnnE,GACrBA,EAAK4f,IAMVnjB,KAAK+4B,MAAMC,YACTz1B,EAAK4f,GAAG3a,KACRxI,KAAKqmB,MAAMoN,QAAUlwB,EAAKy4E,WAAaz4E,EAAKi/C,MACxCxiD,KAAK+4B,MAAMN,oBACTrC,GACAD,GACFE,GACJ9yB,EAAK4f,GAAG/E,IAAI3O,MAEf,CAKD45D,WAEE9lE,EACAq7C,EACAC,GAEA7+C,KAAKu0B,OACLv0B,KAAK6wE,eAAettE,GAGpB,MAAMutE,EAAY9wE,KAAKqmB,MAAMoN,OAQ7B,OAPAzzB,KAAKqmB,MAAMoN,QAAS,EAEpBzzB,KAAK2+C,aAAap7C,EAAMq7C,EAAaC,GACrC7+C,KAAKmgD,gBAAgB58C,GAErBA,EAAKsB,KAAO7E,KAAK+wE,iBAAiBxtE,EAAKic,WAAYsxD,GAE5C9wE,KAAK6jB,WACVtgB,EACAq7C,EAAc,mBAAqB,kBAEtC,CAEDmB,kBACE,OAAO//C,KAAK4gC,MAAgB,KAAA5gC,KAAK4gC,MAA1B,KAA4C5gC,KAAK4gC,MAAxD,EACD,CAEDkf,gBACE,OAAO9/C,KAAK4gC,MAAZ,GACD,CAEDof,uBAAuBp+B,GACrB,OACGA,EAAOgC,WACPhC,EAAOy3B,SACa,gBAApBz3B,EAAOvgB,IAAImH,MACW,gBAArBoZ,EAAOvgB,IAAIuC,MAEhB,CAGDmtE,eAEEpE,EACAmE,GAEA9wE,KAAKilB,WAAW4T,QAEhB,MAAMxS,EAAiC,CACrCw7D,gBAAgB,EAChBlV,iBAEF,IAAIxC,EAA4B,GAChC,MAAM1nD,EAAYziB,KAAK2jB,YAqDvB,GApDAlB,EAAU5d,KAAO,GAEjB7E,KAAK6sC,OAAL,GAIA7sC,KAAK68E,oCAAmC,KAEtC,OAAQ78E,KAAK4gC,MAAL,GAAuB,CAC7B,GAAI5gC,KAAKojC,IAAL,IAAmB,CACrB,GAAI+mC,EAAW9kE,OAAS,EACtB,MAAMrF,KAAKqlB,MAAMpG,EAAO9K,mBAAoB,CAC1CmR,GAAItlB,KAAKqmB,MAAMa,gBAGnB,QACD,CAED,GAAIlnB,KAAK4gC,MAAL,IAAmB,CACrBupC,EAAW1kE,KAAKzF,KAAKw0E,kBACrB,QACD,CAED,MAAMz1B,EAAS/+C,KAAK2jB,YAGhBwmD,EAAW9kE,SAEb05C,EAAOorB,WAAaA,EACpBnqE,KAAKyvC,2BAA2BsP,EAAQorB,EAAW,IACnDA,EAAa,IAGfnqE,KAAK8+C,iBAAiBr8B,EAAWs8B,EAAQ14B,GAIvB,gBAAhB04B,EAAOjsC,MAEPisC,EAAOorB,YAEPprB,EAAOorB,WAAW9kE,OAAS,GAE3BrF,KAAKqlB,MAAMpG,EAAOhL,qBAAsB,CAAEqR,GAAIy5B,GAEjD,KAGH/+C,KAAKqmB,MAAMoN,OAASq9C,EAEpB9wE,KAAKu0B,OAED41C,EAAW9kE,OACb,MAAMrF,KAAKqlB,MAAMpG,EAAO5E,kBAAmB,CAAEiL,GAAItlB,KAAKqmB,MAAM7B,WAK9D,OAFAxkB,KAAKilB,WAAW6T,OAET94B,KAAK6jB,WAAWpB,EAAW,YACnC,CAIDu8B,6BAEEv8B,EACAs8B,GAEA,MAAM19C,EAAMrB,KAAKm1C,iBAAgB,GAEjC,GAAIn1C,KAAK8/C,gBAAiB,CACxB,MAAMl+B,EAAwBm9B,EAe9B,OAZAn9B,EAAO9O,KAAO,SACd8O,EAAOgC,UAAW,EAClBhC,EAAOvgB,IAAMA,EACbugB,EAAOy3B,QAAS,EAChBr5C,KAAKwiB,gBACHC,EACAb,GACA,GACA,GACoB,GACpB,IAEK,CACR,CAAM,GAAI5hB,KAAK+/C,kBAAmB,CACjC,MAAM77B,EAAwB66B,EAO9B,OAJA76B,EAAKN,UAAW,EAChBM,EAAK7iB,IAAMA,EACX6iB,EAAKm1B,QAAS,EACd52B,EAAU5d,KAAKY,KAAKzF,KAAK8jB,mBAAmBI,KACrC,CACR,CAED,OADAlkB,KAAKo8B,kCAAkC/6B,IAChC,CACR,CAEDy9C,iBAEEr8B,EACAs8B,EACA14B,GAEA,MAAM+yB,EAAWp5C,KAAK+rC,aAAtB,KAEA,GAAIqN,EAAU,CACZ,GAAIp5C,KAAKg/C,6BAA6Bv8B,EAAWs8B,GAE/C,OAEF,GAAI/+C,KAAKojC,IAAL,GAEF,YADApjC,KAAKysE,sBAAsBhqD,EAAWs8B,EAGzC,CAED/+C,KAAK0sE,6BAA6BjqD,EAAWs8B,EAAQ14B,EAAO+yB,EAC7D,CAEDszB,6BAEEjqD,EACAs8B,EACA14B,EACA+yB,GAEA,MAAM0oC,EAAe/iC,EACfgjC,EAAgBhjC,EAChBijC,EAAajjC,EACbkjC,EAAcljC,EACdmjC,EAAenjC,EAEfn9B,EAAqDkgE,EACrDK,EAAwDL,EAK9D,GAHA/iC,EAAO1F,OAASD,EAChBp5C,KAAKugD,gCAAgCxB,GAEjC/+C,KAAKojC,IAAL,IAAmB,CAErBxhB,EAAO9O,KAAO,SACd,MAAMsQ,EAAgBpjB,KAAK4gC,MAA3B,KAGA,OAFA5gC,KAAKoiF,sBAAsBxgE,GAEvBwB,OAEFpjB,KAAKkgD,uBAAuBz9B,EAAWs/D,GAAe,GAAM,IAI1D/hF,KAAKggD,uBAAuB8hC,IAC9B9hF,KAAKqlB,MAAMpG,EAAOpL,uBAAwB,CACxCyR,GAAIw8D,EAAazgF,WAIrBrB,KAAKwiB,gBACHC,EACAq/D,GACA,GACA,GACoB,GACpB,GAIH,CAED,MAAM/1C,EACJva,EAAkBxxB,KAAKqmB,MAAMhgB,QAAUrG,KAAKqmB,MAAMiY,YAC9C+jD,EAAYriF,KAAK4gC,MAAvB,KACMv/B,EAAMrB,KAAKoiF,sBAAsBrjC,GACjCujC,EAA6BtiF,KAAKqmB,MAAM7B,SAI9C,GAFAxkB,KAAK4sE,6BAA6BuV,GAE9BniF,KAAK8/C,gBAAiB,CAGxB,GAFAl+B,EAAO9O,KAAO,SAEVuvE,EAEF,YADAriF,KAAKkgD,uBAAuBz9B,EAAWs/D,GAAe,GAAO,GAK/D,MAAMp/D,EAAgB3iB,KAAKggD,uBAAuB8hC,GAClD,IAAIl/D,GAAoB,EACpBD,IACFm/D,EAAahvE,KAAO,cAGhBuT,EAAMw7D,iBAAmB7hF,KAAK4lB,UAAU,eAC1C5lB,KAAKqlB,MAAMpG,EAAO1K,qBAAsB,CAAE+Q,GAAIjkB,IAE5CshB,GAAiB3iB,KAAK4lB,UAAU,eAAiBm5B,EAAOqrB,UAC1DpqE,KAAKqlB,MAAMpG,EAAO3F,sBAAuB,CAAEgM,GAAIjkB,IAEjDglB,EAAMw7D,gBAAiB,EACvBj/D,EAAoByD,EAAMsmD,eAG5B3sE,KAAKwiB,gBACHC,EACAq/D,GACA,GACA,EACAn/D,EACAC,EAEH,MAAM,GAAI5iB,KAAK+/C,kBACVsiC,EACFriF,KAAKuiF,yBAAyB9/D,EAAWw/D,GAEzCjiF,KAAKwiF,kBAAkB//D,EAAWu/D,QAE/B,GACLj2C,GACa,UAAb1qC,EAAImH,OACHxI,KAAK0sC,mBACN,CAEA1sC,KAAKo8B,kCAAkC/6B,GACvC,MAAMqhB,EAAc1iB,KAAKojC,IAAzB,IAEI++C,EAAa18D,UACfzlB,KAAKmX,WAAWmrE,GAGlB1gE,EAAO9O,KAAO,SAEd,MAAMuvE,EAAYriF,KAAK4gC,MAAvB,KACA5gC,KAAKoiF,sBAAsBxgE,GAC3B5hB,KAAK4sE,6BAA6BuV,GAE9BE,EAEFriF,KAAKkgD,uBACHz9B,EACAs/D,EACAr/D,GACA,IAGE1iB,KAAKggD,uBAAuB8hC,IAC9B9hF,KAAKqlB,MAAMpG,EAAOrL,mBAAoB,CAAE0R,GAAIw8D,EAAazgF,MAG3DrB,KAAKwiB,gBACHC,EACAq/D,EACAp/D,GACA,GACoB,GACpB,G,MAGC,IACLqpB,GACc,QAAb1qC,EAAImH,MAA+B,QAAbnH,EAAImH,MACzBxI,KAAK4gC,MAAL,KAAuB5gC,KAAK0sC,mBA4BzB,GACLX,GACa,aAAb1qC,EAAImH,OACHxI,KAAK0sC,mBACN,CACA1sC,KAAKmlC,aAAa,0BAClBnlC,KAAKo8B,kCAAkC/6B,GAGvC,MAAMghF,EAAYriF,KAAK4gC,MAAvB,KACA5gC,KAAKoiF,sBAAsBJ,GAC3BhiF,KAAKyiF,0BAA0BhgE,EAAWy/D,EAAcG,EACzD,MAAUriF,KAAK0sC,mBAEV21C,EACFriF,KAAKuiF,yBAAyB9/D,EAAWw/D,GAEzCjiF,KAAKwiF,kBAAkB//D,EAAWu/D,GAGpChiF,KAAKmX,iBA/CL,CAGAnX,KAAKo8B,kCAAkC/6B,GACvCugB,EAAO9O,KAAOzR,EAAImH,KAElB,MAAM65E,EAAYriF,KAAK4gC,MAAvB,KACA5gC,KAAKoiF,sBAAsBN,GAEvBO,EAEFriF,KAAKkgD,uBAAuBz9B,EAAWs/D,GAAe,GAAO,IAEzD/hF,KAAKggD,uBAAuB8hC,IAC9B9hF,KAAKqlB,MAAMpG,EAAOtL,sBAAuB,CAAE2R,GAAIw8D,EAAazgF,MAE9DrB,KAAKwiB,gBACHC,EACAq/D,GACA,GACA,GACoB,GACpB,IAIJ9hF,KAAKsgD,wBAAwBwhC,EAC9B,CAsBF,CAGDM,sBAEErjC,GAEA,MAAM,KAAE14C,EAAF,MAAQzC,GAAU5D,KAAKqmB,MAS7B,GAPG,MAAAhgB,GAAD,MAAqBA,IACrB04C,EAAO1F,QACG,cAAVz1C,GAEA5D,KAAKqlB,MAAMpG,EAAO/E,gBAAiB,CAAEoL,GAAItlB,KAAKqmB,MAAM7B,WAGzC,MAATne,EAAyB,CACb,gBAAVzC,GACF5D,KAAKqlB,MAAMpG,EAAOvL,6BAA8B,CAC9C4R,GAAItlB,KAAKqmB,MAAM7B,WAGnB,MAAMnjB,EAAMrB,KAAK+iB,mBAEjB,OADAg8B,EAAO19C,IAAMA,EACNA,CACR,CAED,OAAOrB,KAAKgjE,kBAAkBjkB,EAC/B,CAED0tB,sBAEEhqD,EACAs8B,GAKA,MAEA/+C,KAAK+4B,MAAMF,MAAM3D,GAAcC,GAAqBH,IAEpD,MAAM+Y,EAAY/tC,KAAKqmB,MAAM2X,OAC7Bh+B,KAAKqmB,MAAM2X,OAAS,GAGpBh+B,KAAKsuC,UAAUzV,MAAMmS,IACrB,MAAMnmC,EAAkBk6C,EAAOl6C,KAAO,GACtC7E,KAAKooE,4BAA4BvjE,OAAMqJ,GAAW,EAAlD,GACAlO,KAAKu0B,OACLv0B,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,OACX94B,KAAKqmB,MAAM2X,OAAS+P,EACpBtrB,EAAU5d,KAAKY,KAAKzF,KAAK6jB,WAA0Bk7B,EAAQ,gBACvD,OAAJ,EAAIA,EAAOorB,aAAP,EAAmB9kE,QACrBrF,KAAKqlB,MAAMpG,EAAO7K,qBAAsB,CAAEkR,GAAIy5B,GAEjD,CAEDyjC,kBAEE//D,EACAyB,GAGGA,EAAKN,UACa,gBAAlBM,EAAK7iB,IAAImH,MAA6C,gBAAnB0b,EAAK7iB,IAAIuC,OAI7C5D,KAAKqlB,MAAMpG,EAAOxL,sBAAuB,CAAE6R,GAAIpB,EAAK7iB,MAGtDohB,EAAU5d,KAAKY,KAAKzF,KAAK8jB,mBAAmBI,GAC7C,CAEDq+D,yBAEE9/D,EACAyB,GAEA,MAAM3gB,EAAOvD,KAAKgkB,0BAA0BE,GAC5CzB,EAAU5d,KAAKY,KAAKlC,GAEpBvD,KAAKilB,WAAW+jB,mBACdhpC,KAAKkjB,iBAAiB3f,EAAKlC,KAC3Bm2B,GACAj0B,EAAKlC,IAAI+c,IAAI3O,MAEhB,CAEDgzE,0BAEEhgE,EACAyB,EACAm+D,GAEA,IAAKA,IAAcn+D,EAAKN,SAAU,CAEhC,MAAMviB,EAAM6iB,EAAK7iB,IAEA,gBAAbA,EAAImH,MAAwC,gBAAdnH,EAAIuC,OAGpC5D,KAAKqlB,MAAMpG,EAAOxL,sBAAuB,CAAE6R,GAAIjkB,GAElD,CAED,MAAMkC,EAAOvD,KAAK0iF,2BAA2Bx+D,GAC7CzB,EAAU5d,KAAKY,KAAKlC,GAEhB8+E,GACFriF,KAAKilB,WAAW+jB,mBACdhpC,KAAKkjB,iBAAiB3f,EAAKlC,KAC3Bm2B,GACAj0B,EAAKlC,IAAI+c,IAAI3O,MAGlB,CAED+S,gBAEEC,EACAb,EACAc,EACAlB,EACAmB,EACAC,GAEAH,EAAU5d,KAAKY,KACbzF,KAAK6iB,YACHjB,EACAc,EACAlB,EACAmB,EACAC,EACA,eACA,GAGL,CAEDs9B,uBAEEz9B,EACAb,EACAc,EACAlB,GAEA,MAAMje,EAAOvD,KAAK6iB,YAChBjB,EACAc,EACAlB,GACoB,GACpB,EACA,sBACA,GAEFiB,EAAU5d,KAAKY,KAAKlC,GAEpB,MAAMuP,EACU,QAAdvP,EAAKuP,KACDvP,EAAK81C,OACHjiB,GACAE,GACY,QAAd/zB,EAAKuP,KACLvP,EAAK81C,OACHhiB,GACAE,GACFC,GACNx3B,KAAKktE,iCAAiC3pE,EAAMuP,EAC7C,CAEDo6D,iCACE3pE,EAGAuP,GAEA9S,KAAKilB,WAAW+jB,mBACdhpC,KAAKkjB,iBAAiB3f,EAAKlC,KAC3ByR,EACAvP,EAAKlC,IAAI+c,IAAI3O,MAEhB,CAGDm9D,6BAEEC,GACO,CAGT7oD,0BAEEzgB,GAIA,OAFAvD,KAAK2iF,iBAAiBp/E,GACtBvD,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,uBAC9B,CAGDugB,mBAAiCvgB,GAG/B,OAFAvD,KAAK2iF,iBAAiBp/E,GACtBvD,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,gBAC9B,CAEDm/E,2BAEEn/E,GAIA,OAFAvD,KAAK2iF,iBAAiBp/E,GACtBvD,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,wBAC9B,CAGDo/E,iBAEEp/E,GAIAvD,KAAK+4B,MAAMF,MAAM3D,GAAcF,IAC/Bh1B,KAAKwuC,gBAAgB3V,MAAMkS,MAC3B/qC,KAAKsuC,UAAUzV,MAAMmS,IACrBznC,EAAKK,MAAQ5D,KAAKojC,IAAL,IAAkBpjC,KAAKu9C,0BAA4B,KAChEv9C,KAAKwuC,gBAAgB1V,OACrB94B,KAAKsuC,UAAUxV,OACf94B,KAAK+4B,MAAMD,MACZ,CAED6lB,aACEp7C,EACAq7C,EACAC,EACA5lB,EAA4B/C,IAE5B,GAAI1E,EAAkBxxB,KAAKqmB,MAAMhgB,MAC/B9C,EAAK4f,GAAKnjB,KAAKm1C,kBACXyJ,GACF5+C,KAAKu1E,0BAA0BhyE,EAAK4f,GAAI8V,OAErC,CACL,IAAI4lB,GAAeD,EAGjB,MAAM5+C,KAAKqlB,MAAMpG,EAAOnH,iBAAkB,CAAEwN,GAAItlB,KAAKqmB,MAAM7B,WAF3DjhB,EAAK4f,GAAK,IAIb,CACF,CAGDg9B,gBAA8B58C,GAC5BA,EAAKic,WAAaxf,KAAKojC,IAAL,IAAwBpjC,KAAKk4E,sBAAwB,IACxE,CAKDnyD,YAEExiB,GAMA,MAAMq/E,EAAa5iF,KAAKixE,iCAEtB1tE,GAEIs/E,GAAqBD,GAAc5iF,KAAKojC,IAA9C,IACM0/C,EACJD,GACA7iF,KAAKw+C,cAEHj7C,GAEEm7C,EACJokC,GACA9iF,KAAKy+C,mCAEHl7C,GAEEw/E,EACJF,KAAuBnkC,GAAgB1+C,KAAKojC,IAAL,KACnC4/C,EAAiBJ,GAAcE,EAErC,GAAIA,IAAYpkC,EAId,OAHIkkC,GAAY5iF,KAAKmX,aACrBnX,KAAKu+C,gBAAgBh7C,GAA0C,GAExDvD,KAAK6jB,WAAWtgB,EAAM,wBAG/B,MAAM0/E,EAAgBjjF,KAAKkjF,gCAEzB3/E,GAGF,GACGq/E,GAAcC,IAAsBC,IAAYG,GAChDvkC,GAAgBqkC,IAAwBE,EAEzC,MAAMjjF,KAAKmX,WAAW,KAAtB,GAGF,IAAIgsE,EAaJ,GAZIH,GAAkBC,GACpBE,GAAiB,EACjBnjF,KAAKu+C,gBACHh7C,EACAy/E,IAGFG,EAAiBnjF,KAAKojF,4BACpB7/E,GAIAy/E,GAAkBC,GAAiBE,EAOrC,OANAnjF,KAAKkxE,YACH3tE,GACA,GACA,IACGA,EAA0CoiB,QAExC3lB,KAAK6jB,WAAWtgB,EAAM,0BAG/B,GAAIvD,KAAKojC,IAAL,IAMF,OAJC7/B,EAA4C8vC,YAC3CrzC,KAAK48C,+BACP58C,KAAKkxE,YAAY3tE,GAA4C,GAAM,GAE5DvD,KAAK6jB,WAAWtgB,EAAM,4BAG/B,MAAMvD,KAAKmX,WAAW,KAAtB,EACD,CAGDqnC,cAAcj7C,GACZ,OAAOvD,KAAKojC,IAAZ,GACD,CAED6tC,iCAAiC1tE,GAC/B,GAAIvD,KAAK28C,2BAA4B,CAEnC38C,KAAKmlC,aAAa,qBAClB,MAAM0b,EAAY7gD,KAAK2jB,YAGvB,OAFAk9B,EAAU76B,SAAWhmB,KAAKm1C,iBAAgB,GAC1C5xC,EAAK0iB,WAAa,CAACjmB,KAAK6jB,WAAWg9B,EAAW,4BACvC,CACR,CACD,OAAO,CACR,CAEDpC,mCAAmCl7C,GACjC,GAAIvD,KAAK+rC,aAAL,IAA2B,CACxBxoC,EAAK0iB,aAAY1iB,EAAK0iB,WAAa,IAExC,MAAM46B,EAAY7gD,KAAKwvC,YACrBxvC,KAAKqmB,MAAM8X,aACXn+B,KAAKqmB,MAAM6X,iBASb,OANAl+B,KAAKu0B,OAELssB,EAAU76B,SAAWhmB,KAAK6vE,wBAC1BtsE,EAAK0iB,WAAWxgB,KACdzF,KAAK6jB,WAAWg9B,EAAW,8BAEtB,CACR,CACD,OAAO,CACR,CAEDqiC,gCAAgC3/E,GAC9B,GAAIvD,KAAK4gC,MAAL,GAAuB,CACpBr9B,EAAK0iB,aAAY1iB,EAAK0iB,WAAa,IACxC,MAAMo9D,EAAmC,SAApB9/E,EAAKmzC,WAS1B,OARAnzC,EAAK0iB,WAAWxgB,QAAQzF,KAAKs+C,sBAAsB+kC,IAEnD9/E,EAAKoiB,OAAS,KACdpiB,EAAK8vC,YAAc,KACfrzC,KAAK4lB,UAAU,sBACjBriB,EAAK+/E,WAAa,KAGb,CACR,CACD,OAAO,CACR,CAEDF,4BAEE7/E,GAEA,QAAIvD,KAAK08C,iCACPn5C,EAAK0iB,WAAa,GAClB1iB,EAAKoiB,OAAS,KACV3lB,KAAK4lB,UAAU,sBACjBriB,EAAK+/E,WAAa,IAEpB//E,EAAK8vC,YAAcrzC,KAAKo+C,uBAAuB76C,IACxC,EAGV,CAEDm8E,kBACE,IAAK1/E,KAAK+rC,aAAV,IAAmC,OAAO,EAC1C,MAAMxX,EAAOv0B,KAAK0jC,iBAClB,OACGpH,GAAUjJ,KAAKrzB,KAAKi8B,MAAM+C,MAAMh/B,KAAKqmB,MAAM7H,IAAK+V,KACjDv0B,KAAKgsC,qBAAqBzX,EAAM,WAEnC,CAEDqoB,+BACE,MAAMH,EAAOz8C,KAAK2jB,YAEZnC,EAAUxhB,KAAK0/E,kBAErB,GAAI1/E,KAAK4gC,MAAuBpf,KAAAA,EAM9B,OALAxhB,KAAKu0B,OACD/S,GACFxhB,KAAKu0B,OAGAv0B,KAAK25E,cACVl9B,EACA8gC,GAAiBE,GACjBj8D,GAIJ,GAAIxhB,KAAK4gC,MAAL,IACF,OAAO5gC,KAAKqpE,WAAW5sB,GAAmC,GAAM,GAGlE,GAAIz8C,KAAK4gC,MAAL,IAQF,OANE5gC,KAAK4lB,UAAU,eACf5lB,KAAKgjB,gBAAgB,aAAc,2BAEnChjB,KAAKqlB,MAAMpG,EAAOjL,sBAAuB,CAAEsR,GAAItlB,KAAKqmB,MAAM7B,WAE5DxkB,KAAKq5E,iBAAgB,GACdr5E,KAAKqpE,WAAW5sB,GAAmC,GAAM,GAGlE,GAAIz8C,KAAK4gC,MAAL,KAAyB5gC,KAAK4gC,MAAL,KAAuB5gC,KAAKy2C,QACvD,MAAMz2C,KAAKqlB,MAAMpG,EAAOvD,yBAA0B,CAChD4J,GAAItlB,KAAKqmB,MAAM7B,WAInB,MAAM0b,EAAMlgC,KAAKu9C,0BAEjB,OADAv9C,KAAK2sC,YACEzM,CACR,CAEDke,uBAGE76C,GAEA,OAAOvD,KAAKs8C,eAAe,KAC5B,CAEDK,2BACE,MAAM,KAAEt2C,GAASrG,KAAKqmB,MACtB,GAAImL,EAAkBnrB,GAAO,CAC3B,GAAK,KAAAA,IAAuBrG,KAAKqmB,MAAMiY,aAAyB,KAATj4B,EACrD,OAAO,EAET,IACG,MAAAA,GAA8B,MAATA,KACrBrG,KAAKqmB,MAAMiY,YACZ,CACA,MAAQj4B,KAAMk9E,GAAavjF,KAAKujC,YAKhC,GACG/R,EAAkB+xD,IAAnB,KAAgCA,GACnB,IAAbA,EAGA,OADAvjF,KAAKsoC,gBAAgB,CAAC,OAAQ,gBACvB,CAEV,CACF,MAAM,IAAKtoC,KAAK4gC,MAAL,IACV,OAAO,EAGT,MAAMrM,EAAOv0B,KAAK0jC,iBACZ8/C,EAAUxjF,KAAKgsC,qBAAqBzX,EAAM,QAChD,GAEG/C,KADDxxB,KAAKi8B,MAAMC,WAAW3H,IACrB/C,EAAkBxxB,KAAKqmB,MAAMhgB,OAASm9E,EAEvC,OAAO,EAGT,GAAIxjF,KAAK4gC,MAAsB4iD,KAAAA,EAAS,CACtC,MAAMC,EAAgBzjF,KAAKi8B,MAAMC,WAC/Bl8B,KAAK2jC,oBAAoBpP,EAAO,IAElC,OACoB,KAAlBkvD,GADF,KAEEA,CAEH,CACD,OAAO,CACR,CAEDllC,gBAEEh7C,EACAspC,GAEA,GAAI7sC,KAAKqsC,cAAL,IAA8B,CAChC9oC,EAAKoiB,OAAS3lB,KAAKsxE,oBACnBtxE,KAAKkxE,YAAY3tE,GACjB,MAAM+/E,EAAatjF,KAAK0jF,6BACpBJ,IACF//E,EAAK+/E,WAAaA,EAClBtjF,KAAK2jF,sBAAsBpgF,G,MAEpBspC,GACT7sC,KAAKmX,aAGPnX,KAAK2sC,WACN,CAED+P,+BACE,MAAM,KAAEr2C,GAASrG,KAAKqmB,MACtB,GAAa,KAAThgB,IACFrG,KAAKsoC,gBAAgB,CAAC,aAAc,sBAChCtoC,KAAK4lB,UAAU,eAAe,CAChC,GAAI5lB,KAAKgjB,gBAAgB,aAAc,0BACrC,MAAMhjB,KAAKqlB,MAAMpG,EAAOjL,sBAAuB,CAC7CsR,GAAItlB,KAAKqmB,MAAM7B,WAInB,OAAO,CACR,CAGH,OACE,KAAAne,GAAA,KACAA,GADA,KAEAA,GACS,KAATA,GACArG,KAAKy2C,SACLz2C,KAAK0/E,iBAER,CAEDxO,YACE3tE,EACAqgF,EACAC,EACAC,GAEA,GAAIF,EAEF,GAAIC,GAGF,GADA7jF,KAAK4rE,sBAAsBroE,EAAM,WAC7BvD,KAAK4lB,UAAU,qBAAsB,OACvC,MAAMytB,EAAe9vC,EAClB8vC,YAEoB,eAArBA,EAAYhtC,MACS,SAArBgtC,EAAY7qC,MACZ6qC,EAAY3jC,IAAM2jC,EAAY5jC,QAAU,GACxC,SAAC4jC,EAAYlyB,QAAZ4iE,EAAmBhiE,eAEpB/hB,KAAKqlB,MAAMpG,EAAOhK,8BAA+B,CAC/CqQ,GAAI+tB,GAGT,OAEI,GAAI9vC,EAAK0iB,YAAc1iB,EAAK0iB,WAAW5gB,OAG5C,IAAK,MAAMw7C,KAAat9C,EAAK0iB,WAAY,CACvC,MAAM,SAAED,GAAa66B,EACfnsC,EACc,eAAlBsR,EAAS3f,KAAwB2f,EAASxd,KAAOwd,EAASpiB,MAE5D,GADA5D,KAAK4rE,sBAAsB/qB,EAAWnsC,IACjCovE,GAAUjjC,EAAUC,MAAO,CAC9B,MAAM,MAAEA,GAAUD,EACC,eAAfC,EAAMz6C,KACRrG,KAAKqlB,MAAMpG,EAAOlK,sBAAuB,CACvCuQ,GAAIu7B,EACJ7rC,UAAW8rC,EAAMl9C,MACjB8Q,gBAIF1U,KAAK0hD,kBAAkBZ,EAAMt4C,KAAMs4C,EAAM1iC,IAAI3O,OAAO,GAAM,GAE1DzP,KAAK+4B,MAAMS,iBAAiBsnB,GAE/B,CACF,MACI,GAAIv9C,EAAK8vC,YAEd,GAC4B,wBAA1B9vC,EAAK8vC,YAAYhtC,MACS,qBAA1B9C,EAAK8vC,YAAYhtC,KACjB,CACA,MAAM8c,EAAK5f,EAAK8vC,YAAYlwB,GAC5B,IAAKA,EAAI,MAAM,IAAI1c,MAAM,qBAEzBzG,KAAK4rE,sBAAsBroE,EAAM4f,EAAG3a,K,MAC/B,GAA8B,wBAA1BjF,EAAK8vC,YAAYhtC,KAC1B,IAAK,MAAMgtC,KAAe9vC,EAAK8vC,YAAY64B,aACzClsE,KAAKyhB,iBAAiB4xB,EAAYlwB,IAM1C,MAAM28D,EACJ9/E,KAAKqmB,MAAM4X,eAAej+B,KAAKqmB,MAAM4X,eAAe54B,OAAS,GAG/D,GAAIy6E,EAAyBz6E,OAC3B,MAAMrF,KAAKqlB,MAAMpG,EAAOxD,2BAA4B,CAAE6J,GAAI/hB,GAE7D,CAEDke,iBAAiBle,GACf,GAAkB,eAAdA,EAAK8C,KACPrG,KAAK4rE,sBAAsBroE,EAAMA,EAAKiF,WACjC,GAAkB,kBAAdjF,EAAK8C,KACd,IAAK,MAAM6d,KAAQ3gB,EAAKmN,WACtB1Q,KAAKyhB,iBAAiByC,QAEnB,GAAkB,iBAAd3gB,EAAK8C,KACd,IAAK,MAAMg1E,KAAQ93E,EAAKw3B,SAClBsgD,GACFr7E,KAAKyhB,iBAAiB45D,OAGH,mBAAd93E,EAAK8C,KAEdrG,KAAKyhB,iBAAiBle,EAAKK,OACJ,gBAAdL,EAAK8C,KACdrG,KAAKyhB,iBAAiBle,EAAKmb,UACJ,sBAAdnb,EAAK8C,MACdrG,KAAKyhB,iBAAiBle,EAAK67C,KAE9B,CAEDwsB,sBACEroE,EAOAmR,GAEI1U,KAAKiuC,oBAAoBha,IAAIvf,KACZ,YAAfA,EACF1U,KAAKqlB,MAAMpG,EAAOzK,uBAAwB,CAAE8Q,GAAI/hB,IAEhDvD,KAAKqlB,MAAMpG,EAAOxK,gBAAiB,CAAE6Q,GAAI/hB,EAAMmR,gBAGnD1U,KAAKiuC,oBAAoB9U,IAAIzkB,EAC9B,CAID4pC,sBAAsB2wB,GACpB,MAAM+U,EAAQ,GACd,IAAIhpC,GAAQ,EAGZh7C,KAAK6sC,OAAL,GAEA,OAAQ7sC,KAAKojC,IAAL,GAAqB,CAC3B,GAAI4X,EACFA,GAAQ,OAGR,GADAh7C,KAAK6sC,OAAL,IACI7sC,KAAKojC,IAAL,GAAqB,MAE3B,MAAMge,EAAkBphD,KAAK+rC,aAA7B,KACMijC,EAAWhvE,KAAK4gC,MAAtB,KACMr9B,EAAOvD,KAAK2jB,YAClBpgB,EAAKu9C,MAAQ9gD,KAAK6vE,wBAClBmU,EAAMv+E,KACJzF,KAAK+uE,qBACHxrE,EACAyrE,EACAC,EACA7tB,GAGL,CAED,OAAO4iC,CACR,CAEDjV,qBACExrE,EACAyrE,EAEAC,EACA7tB,GAUA,OAPIphD,KAAKqsC,cAAL,IACF9oC,EAAKyiB,SAAWhmB,KAAK6vE,wBACZb,EACTzrE,EAAKyiB,SAAWopB,GAAmB7rC,EAAKu9C,OAC9Bv9C,EAAKyiB,WACfziB,EAAKyiB,SAAWgpB,GAAgBzrC,EAAKu9C,QAEhC9gD,KAAK6jB,WAA8BtgB,EAAM,kBACjD,CAGDssE,wBACE,GAAI7vE,KAAK4gC,MAAL,KAAuB,CACzB,MAAM30B,EAASjM,KAAK2gB,mBAAmB3gB,KAAKqmB,MAAMziB,OAC5CqgF,EAAYh4E,EAAOrI,MAAMg9B,MAAM88C,IAOrC,OANIuG,GACFjkF,KAAKqlB,MAAMpG,EAAOvG,iCAAkC,CAClD4M,GAAIrZ,EACJ0M,kBAAmBsrE,EAAU,GAAG/nD,WAAW,KAGxCjwB,CACR,CACD,OAAOjM,KAAKm1C,iBAAgB,EAC7B,CAED+uC,mBACE3gF,GAIA,OAAuB,MAAnBA,EAAK+/E,YACA//E,EAAK+/E,WAAW96C,MAAK,EAAGnnC,MAAKuC,WAEhB,SAAhBA,EAAMA,QACQ,eAAbvC,EAAIgF,KACY,SAAbhF,EAAImH,KACU,SAAdnH,EAAIuC,QAKf,CAED+/E,sBACEpgF,GAKA,GAAIvD,KAAKkkF,mBAAmB3gF,IAAuB,yBAAdA,EAAK8C,KAAiC,CAEzE,MAAM,WAAE4f,GAAe1iB,EACvB,GAAkB,MAAd0iB,EAAoB,CAEtB,MAAMk+D,EAA2Bl+D,EAAWisD,MAAKrxB,IAC/C,IAAIS,EAMJ,GALuB,oBAAnBT,EAAUx6C,KACZi7C,EAAWT,EAAUC,MACO,oBAAnBD,EAAUx6C,OACnBi7C,EAAWT,EAAUS,eAENpzC,IAAbozC,EACF,MAAyB,eAAlBA,EAASj7C,KACM,YAAlBi7C,EAAS94C,KACU,YAAnB84C,EAAS19C,KACd,SAE8BsK,IAA7Bi2E,GACFnkF,KAAKqlB,MAAMpG,EAAOjJ,4BAA6B,CAC7CsP,GAAI6+D,EAAyB/lE,IAAI3O,OAGtC,CACF,CACF,CAKD8mC,YAA0BhzC,GAGxB,GADAA,EAAK0iB,WAAa,IACbjmB,KAAK4gC,MAAL,KAAuB,CAG1B,MAAMgiD,EAAa5iF,KAAKghD,iCAAiCz9C,GAOnD6gF,GAAaxB,GAAc5iF,KAAKojC,IAAtC,IAGM0/C,EAAUsB,GAAapkF,KAAKoxE,8BAA8B7tE,GAG5D6gF,IAActB,GAAS9iF,KAAKqxE,2BAA2B9tE,GAC3DvD,KAAKssC,iBAAL,GACD,CACD/oC,EAAKoiB,OAAS3lB,KAAKsxE,oBAInB,MAAMgS,EAAatjF,KAAK0jF,6BACxB,GAAIJ,EACF//E,EAAK+/E,WAAaA,MACsB,CACxC,MAAMz9D,EAAa7lB,KAAKqkF,6BACpBx+D,IAEFtiB,EAAKsiB,WAAaA,EAErB,CAID,OAHA7lB,KAAK2jF,sBAAsBpgF,GAE3BvD,KAAK2sC,YACE3sC,KAAK6jB,WAAWtgB,EAAM,oBAC9B,CAED+tE,oBAEE,OADKtxE,KAAK4gC,MAAV,MAA4B5gC,KAAKmX,aAC1BnX,KAAKq2C,eACb,CAGDsK,yBAAyBp9C,GACvB,OAAOiuB,EAAkBxxB,KAAKqmB,MAAMhgB,KACrC,CAEDu6C,0BAMEr9C,EACAs9C,EACAx6C,GAEAw6C,EAAUC,MAAQ9gD,KAAKm1C,kBACvB5xC,EAAK0iB,WAAWxgB,KAAKzF,KAAK+gD,sBAAsBF,EAAWx6C,GAC5D,CAED06C,sBAKEF,EAAsBx6C,EAAiB4yB,EAAc9C,IAMrD,OALAn2B,KAAK40E,UAAU/zB,EAAUC,MAAO,CAE9B+zB,GAAIh0B,EACJj8B,QAASqU,IAEJj5B,KAAK6jB,WAAWg9B,EAAWx6C,EACnC,CASDi+E,qBACE,MAAMnkF,EAAQ,GACRokF,EAAY,IAAIpnE,IAEtB,EAAG,CACD,GAAInd,KAAK4gC,MAAL,GACF,MAGF,MAAMr9B,EAAOvD,KAAK2jB,YAGZ7Y,EAAU9K,KAAKqmB,MAAMziB,MAkB3B,GAdI2gF,EAAUtwD,IAAInpB,IAChB9K,KAAKqlB,MAAMpG,EAAOxG,kCAAmC,CACnD6M,GAAItlB,KAAKqmB,MAAM7B,SACfnjB,IAAKyJ,IAGTy5E,EAAUprD,IAAIruB,GACV9K,KAAK4gC,MAAL,KACFr9B,EAAKlC,IAAMrB,KAAK2gB,mBAAmB7V,GAEnCvH,EAAKlC,IAAMrB,KAAKm1C,iBAAgB,GAElCn1C,KAAK6sC,OAAL,KAEK7sC,KAAK4gC,MAAL,KACH,MAAM5gC,KAAKqlB,MAAMpG,EAAOzG,4BAA6B,CACnD8M,GAAItlB,KAAKqmB,MAAM7B,WAGnBjhB,EAAKK,MAAQ5D,KAAK2gB,mBAAmB3gB,KAAKqmB,MAAMziB,OAChDzD,EAAMsF,KAAKzF,KAAK6jB,WAAWtgB,EAAM,mB,OAC1BvD,KAAKojC,IAjCd,KAmCA,OAAOjjC,CACR,CAQDkkF,6BACE,IAAIrkF,KAAK4gC,MAAL,KAAyB5gC,KAAKwsC,wBAIhC,OAAIxsC,KAAK4lB,UAAU,oBAA4B,GACxC,KAJP5lB,KAAKmlC,aAAa,oBAClBnlC,KAAKu0B,OAKP,MAAMp0B,EAAQ,GACR0lB,EAAa,IAAI1I,IACvB,EAAG,CACD,MAAM5Z,EAAOvD,KAAK2jB,YAiBlB,GAhBApgB,EAAKlC,IAAMrB,KAAKm1C,iBAAgB,GAEV,SAAlB5xC,EAAKlC,IAAImH,MACXxI,KAAKqlB,MAAMpG,EAAO1G,iCAAkC,CAClD+M,GAAI/hB,EAAKlC,MAITwkB,EAAWoO,IAAI1wB,EAAKlC,IAAImH,OAC1BxI,KAAKqlB,MAAMpG,EAAOxG,kCAAmC,CACnD6M,GAAI/hB,EAAKlC,IACTA,IAAKkC,EAAKlC,IAAImH,OAGlBqd,EAAWsT,IAAI51B,EAAKlC,IAAImH,MACxBxI,KAAK6sC,OAAL,KACK7sC,KAAK4gC,MAAL,KACH,MAAM5gC,KAAKqlB,MAAMpG,EAAOzG,4BAA6B,CACnD8M,GAAItlB,KAAKqmB,MAAM7B,WAGnBjhB,EAAKK,MAAQ5D,KAAK2gB,mBAAmB3gB,KAAKqmB,MAAMziB,OAChD5D,KAAK6jB,WAAWtgB,EAAM,mBACtBpD,EAAMsF,KAAKlC,E,OACJvD,KAAKojC,IA1Bd,KA4BA,OAAOjjC,CACR,CAEDujF,6BAEE,IAAI1jF,KAAK+rC,aAAL,KAAkC/rC,KAAKwsC,wBAIzC,OAAIxsC,KAAK4lB,UAAU,oBAA4B,GACxC,KAJP5lB,KAAKmlC,aAAa,oBAClBnlC,KAAKu0B,OAMPv0B,KAAKojC,IAAL,GACA,MAAMjjC,EAAQH,KAAKskF,qBAGnB,OAFAtkF,KAAKojC,IAAL,GAEOjjC,CACR,CAED6gD,iCAAiCz9C,GAC/B,QAAIvD,KAAK2gD,yBAAyBp9C,KAEhCvD,KAAK4gD,0BACHr9C,EACAvD,KAAK2jB,YACL,2BAEK,EAGV,CAEDytD,8BAA8B7tE,GAC5B,GAAIvD,KAAK4gC,MAAL,IAAqB,CACvB,MAAMigB,EAAY7gD,KAAK2jB,YASvB,OARA3jB,KAAKu0B,OACLv0B,KAAKssC,iBAAL,IAEAtsC,KAAK4gD,0BACHr9C,EACAs9C,EACA,6BAEK,CACR,CACD,OAAO,CACR,CAEDwwB,2BAA2B9tE,GACzB,IAAIy3C,GAAQ,EACZh7C,KAAK6sC,OAAL,GACA,OAAQ7sC,KAAKojC,IAAL,GAAqB,CAC3B,GAAI4X,EACFA,GAAQ,MACH,CAEL,GAAIh7C,KAAKojC,IAAL,IACF,MAAMpjC,KAAKqlB,MAAMpG,EAAO3K,uBAAwB,CAC9CgR,GAAItlB,KAAKqmB,MAAM7B,WAKnB,GADAxkB,KAAK6sC,OAAL,IACI7sC,KAAKojC,IAAL,GAAqB,KAC1B,CAED,MAAMyd,EAAY7gD,KAAK2jB,YACjBu9B,EAAmBlhD,KAAK4gC,MAA9B,KACMwgB,EAAkBphD,KAAK+rC,aAA7B,KACA8U,EAAUS,SAAWthD,KAAK6vE,wBAC1B,MAAM2U,EAAkBxkF,KAAKihD,qBAC3BJ,EACAK,EACoB,SAApB39C,EAAKgwC,YAA6C,WAApBhwC,EAAKgwC,WACnC6N,OACAlzC,GAEF3K,EAAK0iB,WAAWxgB,KAAK++E,EACtB,CACF,CAGDvjC,qBACEJ,EACAK,EAEAC,EACAC,EACAnoB,GAGA,GAAIj5B,KAAKqsC,cAAL,IACFwU,EAAUC,MAAQ9gD,KAAKm1C,sBAClB,CACL,MAAM,SAAEmM,GAAaT,EACrB,GAAIK,EACF,MAAMlhD,KAAKqlB,MAAMpG,EAAOxJ,sBAAuB,CAC7C6P,GAAIu7B,EACJnrC,WAAa4rC,EAA6B19C,QAG9C5D,KAAK0hD,kBACFJ,EAA0B94C,KAC3Bq4C,EAAUziC,IAAI3O,OACd,GACA,GAEGoxC,EAAUC,QACbD,EAAUC,MAAQ9R,GAAgBsS,GAErC,CACD,OAAOthD,KAAK+gD,sBACVF,EACA,kBACA5nB,EAEH,CAIDgnB,YACEnE,GAEA,MAAsB,eAAfA,EAAMz1C,MAAwC,SAAfy1C,EAAMtzC,IAC7C,ECl3FY,MAAMi8E,WAAenG,GAOlClvE,YAAYwQ,EAAqCqc,GAC/Crc,EAAUg0D,GAAWh0D,GACrBD,MAAMC,EAASqc,GAEfj8B,KAAK4f,QAAUA,EACf5f,KAAK8tC,mBACL9tC,KAAKyK,QAAUi6E,GAAW1kF,KAAK4f,QAAQnV,SACvCzK,KAAK2P,SAAWiQ,EAAQ2zD,cACzB,CAGDnlC,kBAGE,OAAOvW,EACR,CAEDpY,QACEzf,KAAKyuC,qBACL,MAAM/uB,EAAO1f,KAAK2jB,YACZkgC,EAAU7jD,KAAK2jB,YAKrB,OAJA3jB,KAAKmjC,YACLzjB,EAAKsd,OAAS,KACdh9B,KAAK4jD,cAAclkC,EAAMmkC,GACzBnkC,EAAKsd,OAASh9B,KAAKqmB,MAAM2W,OAClBtd,CACR,EAGH,SAASglE,GAAWj6E,GAClB,MAAMk6E,EAAwB,IAAIt8D,IAClC,IAAK,MAAM+R,KAAU3vB,EAAS,CAC5B,MAAOjC,EAAMoX,GAAWhV,MAAMC,QAAQuvB,GAAUA,EAAS,CAACA,EAAQ,CAAC,GAC9DuqD,EAAU1wD,IAAIzrB,IAAOm8E,EAAU/4E,IAAIpD,EAAMoX,GAAW,CAAC,EAC3D,CACD,OAAO+kE,CACR,CC/BM,SAASllE,GAAMwc,EAAerc,GAAyB,MAC5D,GAA4B,iBAAjB,OAAP,EAAAA,QAAA,IAASvV,YAuCX,OAAOu6E,GAAUhlE,EAASqc,GAAOxc,QAtCjCG,EAAU,OAAH,UACFA,GAEL,IACEA,EAAQvV,WAAa,SACrB,MAAMytB,EAAS8sD,GAAUhlE,EAASqc,GAC5B/xB,EAAM4tB,EAAOrY,QAEnB,GAAIqY,EAAOgC,kBACT,OAAO5vB,EAGT,GAAI4tB,EAAOiC,4BAMT,IAEE,OADAna,EAAQvV,WAAa,SACdu6E,GAAUhlE,EAASqc,GAAOxc,OAC1B,CAAP,SAAO,MAITvV,EAAI25C,QAAQx5C,WAAa,SAG3B,OAAOH,CAQR,CAPC,MAAO26E,GACP,IAEE,OADAjlE,EAAQvV,WAAa,SACdu6E,GAAUhlE,EAASqc,GAAOxc,OAC1B,CAAP,SAAO,CAET,MAAMolE,CACP,CAIJ,CAEM,SAAShwC,GAAgB5Y,EAAerc,GAC7C,MAAMkY,EAAS8sD,GAAUhlE,EAASqc,GAIlC,OAHInE,EAAOlY,QAAQtV,aACjBwtB,EAAOzR,MAAMoN,QAAS,GAEjBqE,EAAOg3C,eACf,CAED,SAASgW,GACPC,GAEA,MAAMr8D,EAAgD,CAAC,EACvD,IAAK,MAAM43C,KAAY58D,OAAO0M,KAAK20E,GACjCr8D,EAAW43C,GAAY3tC,GAAiBoyD,EAAmBzkB,IAE7D,OAAO53C,CACR,C,MAEYs8D,GAAWF,GAA2BC,GAEnD,SAASH,GAAUhlE,EAAqCqc,GACtD,IAAI+vC,EAAMyY,GAMV,OALA,MAAI7kE,GAAAA,EAASnV,UACX6nE,GAAgB1yD,EAAQnV,SACxBuhE,EAAMiZ,GAAerlE,EAAQnV,UAGxB,IAAIuhE,EAAIpsD,EAASqc,EACzB,CAED,MAAMipD,GAAsE,CAAC,EAG7E,SAASD,GAAeE,GAGtB,MAAMC,EAAa/R,GAAiBxiE,QAAOrI,GACzCod,GAAUu/D,EAAoB38E,KAG1BnH,EAAM+jF,EAAWjtE,KAAK,KAC5B,IAAI6zD,EAAMkZ,GAAiB7jF,GAC3B,IAAK2qE,EAAK,CACRA,EAAMyY,GACN,IAAK,MAAMrqD,KAAUgrD,EAEnBpZ,EAAM+G,GAAa34C,GAAQ4xC,GAE7BkZ,GAAiB7jF,GAAO2qE,CACzB,CACD,OAAOA,CACR,C","sources":["webpack://vue_project/./src/views/learn_ast_node/learn_ast_node.vue","webpack://vue_project/./src/views/learn_ast_node/node_list/node_list.vue","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree.vue","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree_node.vue","webpack://vue_project/./src/views/learn_ast_node/deal_ast.js","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree.js","webpack://vue_project/./src/views/learn_ast_node/node_list/div_to_input.js","webpack://vue_project/src/views/learn_ast_node/node_list/ast_tree_node.vue","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree_node.vue?6300","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree_node.vue?249c","webpack://vue_project/src/views/learn_ast_node/node_list/ast_tree.vue","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree.vue?67f6","webpack://vue_project/./src/views/learn_ast_node/node_list/ast_tree.vue?53b5","webpack://vue_project/src/views/learn_ast_node/node_list/node_list.vue","webpack://vue_project/./src/views/learn_ast_node/node_list/node_list.vue?974e","webpack://vue_project/./src/views/learn_ast_node/node_list/node_list.vue?f909","webpack://vue_project/./src/views/learn_ast_node/node_message/node_message.vue","webpack://vue_project/./src/views/learn_ast_node/node_message/message.vue","webpack://vue_project/./src/views/learn_ast_node/node_message/parse.js","webpack://vue_project/./src/views/learn_ast_node/node_message/json_tree_node.vue","webpack://vue_project/src/views/learn_ast_node/node_message/json_tree_node.vue","webpack://vue_project/./src/views/learn_ast_node/node_message/json_tree_node.vue?4f16","webpack://vue_project/./src/views/learn_ast_node/node_message/json_tree_node.vue?808f","webpack://vue_project/src/views/learn_ast_node/node_message/message.vue","webpack://vue_project/./src/views/learn_ast_node/node_message/message.vue?1af6","webpack://vue_project/./src/views/learn_ast_node/node_message/message.vue?0c14","webpack://vue_project/src/views/learn_ast_node/node_message/node_message.vue","webpack://vue_project/./src/views/learn_ast_node/node_message/node_message.vue?3d47","webpack://vue_project/./src/views/learn_ast_node/node_message/node_message.vue?2d29","webpack://vue_project/src/views/learn_ast_node/learn_ast_node.vue","webpack://vue_project/./src/views/learn_ast_node/learn_ast_node.vue?0308","webpack://vue_project/./src/views/learn_ast_node/learn_ast_node.vue?5d74","webpack://vue_project/./node_modules/core-js/internals/define-built-in-accessor.js","webpack://vue_project/./node_modules/core-js/internals/regexp-flags.js","webpack://vue_project/./node_modules/core-js/modules/es.regexp.flags.js","webpack://vue_project/./src/utils/timer/basic/now.js","webpack://vue_project/./src/utils/timer/debounce.js","webpack://vue_project/../src/util/location.ts","webpack://vue_project/../src/parse-error/credentials.ts","webpack://vue_project/../src/parse-error/module-errors.ts","webpack://vue_project/../src/parse-error/to-node-description.ts","webpack://vue_project/../src/parse-error/standard-errors.ts","webpack://vue_project/../src/parse-error/strict-mode-errors.ts","webpack://vue_project/../src/parse-error/pipeline-operator-errors.ts","webpack://vue_project/../src/parse-error.ts","webpack://vue_project/../src/plugins/estree.ts","webpack://vue_project/../src/tokenizer/context.ts","webpack://vue_project/../src/tokenizer/types.ts","webpack://vue_project/../../babel-helper-validator-identifier/src/identifier.ts","webpack://vue_project/../../babel-helper-validator-identifier/src/keyword.ts","webpack://vue_project/../src/util/identifier.ts","webpack://vue_project/../src/util/scopeflags.ts","webpack://vue_project/../src/util/scope.ts","webpack://vue_project/../src/plugins/flow/scope.ts","webpack://vue_project/../src/parser/base.ts","webpack://vue_project/../src/parser/comments.ts","webpack://vue_project/../src/util/whitespace.ts","webpack://vue_project/../src/tokenizer/state.ts","webpack://vue_project/../../babel-helper-string-parser/src/index.ts","webpack://vue_project/../src/tokenizer/index.ts","webpack://vue_project/../src/util/class-scope.ts","webpack://vue_project/../src/util/expression-scope.ts","webpack://vue_project/../src/util/production-parameter.ts","webpack://vue_project/../src/parser/util.ts","webpack://vue_project/../src/parser/node.ts","webpack://vue_project/../src/plugins/flow/index.ts","webpack://vue_project/../src/plugins/jsx/xhtml.ts","webpack://vue_project/../src/plugins/jsx/index.ts","webpack://vue_project/../src/plugins/typescript/scope.ts","webpack://vue_project/../src/plugins/typescript/index.ts","webpack://vue_project/../src/plugins/placeholders.ts","webpack://vue_project/../src/plugins/v8intrinsic.ts","webpack://vue_project/../src/plugin-utils.ts","webpack://vue_project/../src/options.ts","webpack://vue_project/../src/parser/lval.ts","webpack://vue_project/../src/parser/expression.ts","webpack://vue_project/../src/parser/statement.ts","webpack://vue_project/../src/parser/index.ts","webpack://vue_project/../src/index.ts"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"learnAstNode\"}},[_vm._m(0),_c('div',{staticClass:\"main\"},[_c('v-nodeList'),_c('v-nodeMessage')],1)])\n}\nvar staticRenderFns = [function (){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"header\"},[_c('div',{staticClass:\"title\"},[_c('div',{staticClass:\"iconfont icon-jiedianguanli\"}),_c('div',{staticClass:\"text\"},[_vm._v(\"Ast 节点学习\")])])])\n}]\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"learnAstNode-codeList\"}},[_c('div',{staticClass:\"operation\"},[_c('div',{staticClass:\"icon\"},[_c('div',{staticClass:\"iconfont icon-output\",attrs:{\"title\":\"导出节点\"},on:{\"mousedown\":_vm.outputAstMessage}})]),_c('div',{staticClass:\"icon\"},[_c('div',{staticClass:\"iconfont icon-add\",attrs:{\"title\":\"添加节点\"},on:{\"mousedown\":_vm.addAstNode}})])]),_c('div',{staticClass:\"tree\"},[_c('c-astTree')],1)])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"astTree\",staticClass:\"component-ast-node-container\",attrs:{\"data-move\":_vm.isMoving},on:{\"mousemove\":_vm.moveNode,\"mousedown\":_vm.endMoveNode,\"mouseleave\":_vm.endMoveNode}},_vm._l((_vm.astMessage.astTree.children),function(child,index){return _c('c-astTreeNode',{key:index,attrs:{\"index\":index,\"data\":child}})}),1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{ref:\"node\",staticClass:\"component-ast-node\"},[_c('div',{ref:\"content\",class:{\n\t\t\t'node-content': true,\n\t\t\t'move_in_top': ( _vm.moveInType === 0 ),\n\t\t\t'move_in_bottom': ( _vm.moveInType === 2 )\n\t\t},attrs:{\"data-selected\":_vm.data.selected},on:{\"mouseenter\":_vm.handleMouseenterContent,\"mouseleave\":_vm.handleMouseleaveContent,\"mousemove\":_vm.handleMousemoveContent,\"mousedown\":function($event){$event.stopPropagation();return _vm.handleMousedownContent.apply(null, arguments)}}},[_c('div',{class:{\n\t\t\t\texpand: true,\n\t\t\t\tleaf: _vm.isLeaf,\n\t\t\t\texpanded: _vm.isExpand && !_vm.isLeaf,\n\t\t\t},on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.handleExpand.apply(null, arguments)}}},[_vm._v(\" › \")]),_c('div',{staticClass:\"label\"},[_c('span',{ref:\"label\",class:{\n\t\t\t\t\t\tspan: true,\n\t\t\t\t\t\tmove_in: (_vm.moveInType === 1)\n\t\t\t\t\t},attrs:{\"contentEditable\":_vm.isEditing},on:{\"keydown\":function($event){return _vm.editKeydown($event)},\"paste\":_vm.editPaste,\"blur\":_vm.finishEdit}},[_vm._v(_vm._s(_vm.data.nodeType))])]),_c('div',{staticClass:\"btns\",attrs:{\"data-show\":_vm.isEditing || _vm.isMoving,\"data-position\":_vm.isEditing ? 'initial' : 'absolute'}},[_c('div',{staticClass:\"btn\"},[_c('div',{staticClass:\"iconfont icon-yidong move\",attrs:{\"data-selected\":_vm.isMoving},on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.startMoveNode.apply(null, arguments)}}}),_c('div',{staticClass:\"iconfont icon-bianji\",attrs:{\"data-selected\":_vm.isEditing},on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.editNode(_vm.data)}}}),_c('div',{staticClass:\"iconfont icon-add\",attrs:{\"title\":\"添加节点\"},on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.addChildNode(_vm.data)}}}),_c('div',{staticClass:\"iconfont icon-delete\",on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.deleteNode(_vm.data)}}})])])]),(!_vm.isLeaf)?_c('div',{ref:\"children\",staticClass:\"children\"},_vm._l((_vm.data.children),function(child,index){return _c('component-ast-node',{key:index,attrs:{\"index\":index,\"data\":child}})}),1):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","export function getNewNode(nodeType, parent){\n\tlet node = {\n\t\tnodeType,\n\t\tchildren: [],\n\t\tcode: '',\n\t\tselected: false,\n\t\tedit: false\n\t};\n\n\tObject.defineProperty(node, \"parent\", {\n\t\tvalue: parent,\n\t\tenumerable: false,\n\t\twritable: true\n\t});\n\n\treturn node;\n}\n\nexport function outputAstMessage(astMessage){\n\tlet\n\t\tdealedMessage = {\n\t\t\tastTree: astMessage.astTree\n\t\t},\n\t\teleLink = document.createElement('a');\n\n\teleLink.download = 'astMessage.json';\n\teleLink.style.display = 'none';\n\t\t// 字符内容转变成blob地址\n\tvar blob = new Blob([JSON.stringify(dealedMessage, null, 4)]);\n\teleLink.href = URL.createObjectURL(blob);\n\t// 触发点击\n\t// document.body.appendChild(eleLink);\n\tdocument.body.appendChild(eleLink);\n\teleLink.click();\n\t// 然后移除\n\tdocument.body.removeChild(eleLink);\n}\n\nexport function initAstMessageJson(json){\n\t// console.log('json:', json);\n\tjson.selectedAstNode = [];\n\n\t// 为每个树节点添加父节点\n\tlet \n\t\tstack = [json.astTree],\n\t\ttreeNode;\n\n\twhile(stack.length > 0){\n\t\tlet treeNode = stack.pop();\n\n\t\ttreeNode.children.forEach((child)=>{\n\n\t\t\tObject.defineProperty(child, \"parent\", {\n\t\t\t\tvalue: treeNode,\n\t\t\t\tenumerable: false,\n\t\t\t\twritable: true\n\t\t\t});\n\n\t\t\tstack.push(child);\n\n\t\t});\n\t}\n\n\treturn json;\n}","\n\nexport default {\n\troot: null,\n\n\tmovingTreeNode: null,\n\tcloneNode: null,\n\n\tmoveTargetTreeNode: null\n}\n","export function paste(div, e){\n\te.preventDefault();\n\tlet selection = document.getSelection(),\n\t\t\trange;\n\tif( selection.type !== 'None' ){\n\t\trange = selection.getRangeAt(0);\n\t}\n\n\tif( range ){\n\t\tif( range.startContainer !== range.endContainer ){\n\t\t\tthrow new Error('range 选择出错');\n\t\t}\n\t\tlet string = (e.clipboardData || window.clipboardData).getData('text');\n\t\tstring = string.replace(/\\n/g, ' ');\n\t\tif( range.startContainer === div ){\n\t\t\tlet text = document.createTextNode(string);\n\t\t\tthis.$refs.label.appendChild(text);\n\t\t\trange.setStart(text, text.length);\n\t\t\trange.setEnd(text, text.length);\n\t\t}else if( range.startContainer === div.childNodes[0] ){\n\t\t\tif( range.collapsed ){\n\t\t\t\trange.startContainer.insertData(range.startOffset, string);\n\t\t\t}else{\n\t\t\t\trange.startContainer.replaceData(range.startOffset, range.endOffset - range.startOffset ,string);\n\t\t\t}\n\t\t\tlet startOffset = range.startOffset;\n\t\t\trange.setStart(div.childNodes[0], startOffset + string.length);\n\t\t\trange.setEnd(div.childNodes[0], startOffset + string.length );\n\t\t}\n\t}\n}\n\n\nexport function startEdit(div){\n\tlet \n\t\tselection = document.getSelection(),\n\t\trange = document.createRange();\n\n\tif( div.childNodes.length > 0 ){\n\t\tif( div.childNodes.length === 1 && div.childNodes[0].nodeType === Node.TEXT_NODE ){\n\t\t\tlet text = div.childNodes[0]\n\t\t\trange.setStart(text, text.length);\n\t\t\trange.setEnd(text, text.length);\n\t\t\tselection.removeAllRanges();\n\t\t\tselection.addRange(range);\n\t\t}else{\n\t\t\tconsole.log('格式出错');\n\t\t}\n\t}else{\n\t\trange.setStart(div, 0);\n\t\trange.setEnd(div, 0);\n\t\tselection.removeAllRanges();\n\t\tselection.addRange(range);\n\t}\n}\n\nexport function keydown(div, e, callback){\n\tswitch( e.keyCode ){\n\t\tcase 13:\n\t\t\te.preventDefault();\n\t\t\tcallback.finishEdit();\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n\n}\n\nexport function getValue(div){\n\tif( div.childNodes.length === 0 ){\n\t\treturn '';\n\t}else if( div.childNodes.length === 1 && div.childNodes[0].nodeType === Node.TEXT_NODE ){\n\t\treturn div.childNodes[0].nodeValue;\n\t}\n}\n\n","<template>\n\t<div class=\"component-ast-node\"\n\t\tref=\"node\">\n\t\t<div :class=\"{\n\t\t\t\t'node-content': true,\n\t\t\t\t'move_in_top': ( moveInType === 0 ),\n\t\t\t\t'move_in_bottom': ( moveInType === 2 )\n\t\t\t}\"\n\t\t\tref=\"content\"\n\t\t\t:data-selected=\"data.selected\"\n\t\t\tv-on:mouseenter=\"handleMouseenterContent\"\n\t\t\tv-on:mouseleave=\"handleMouseleaveContent\"\n\t\t\tv-on:mousemove=\"handleMousemoveContent\"\n\t\t\tv-on:mousedown.stop=\"handleMousedownContent\">\n\t\t\t<div\n\t\t\t\t:class=\"{\n\t\t\t\t\texpand: true,\n\t\t\t\t\tleaf: isLeaf,\n\t\t\t\t\texpanded: isExpand && !isLeaf,\n\t\t\t\t}\"\n\t\t\t\tv-on:mousedown.stop=\"handleExpand\"> › </div>\n\t\t\t<div class=\"label\">\n\t\t\t\t\t<span ref=\"label\"\n\t\t\t\t\t\t:class=\"{\n\t\t\t\t\t\t\tspan: true,\n\t\t\t\t\t\t\tmove_in: (moveInType === 1)\n\t\t\t\t\t\t}\"\n\t\t\t\t\t\t:contentEditable=\"isEditing\"\n\t\t\t\t\t\tv-on:keydown=\"editKeydown($event)\"\n\t\t\t\t\t\tv-on:paste=\"editPaste\"\n\t\t\t\t\t\tv-on:blur=\"finishEdit\" >{{data.nodeType}}</span>\n\t\t\t</div>\n\t\t\t<div class=\"btns\"\n\t\t\t\t:data-show=\"isEditing || isMoving\"\n\t\t\t\t:data-position=\"isEditing ? 'initial' : 'absolute'\">\n\t\t\t\t<div class=\"btn\">\n\t\t\t\t\t<div class=\"iconfont icon-yidong move\"\n\t\t\t\t\t\t:data-selected=\"isMoving\"\n\t\t\t\t\t\tv-on:mousedown.stop=\"startMoveNode\"></div>\n\n\t\t\t\t\t<div class=\"iconfont icon-bianji\"\n\t\t\t\t\t\t:data-selected=\"isEditing\"\n\t\t\t\t\t\tv-on:mousedown.stop=\"editNode(data)\"></div>\n\n\t\t\t\t\t<div class=\"iconfont icon-add\"\n\t\t\t\t\t\ttitle=\"添加节点\"\n\t\t\t\t\t\tv-on:mousedown.stop=\"addChildNode(data)\"></div>\n\n\t\t\t\t\t<div class=\"iconfont icon-delete\"\n\t\t\t\t\t\tv-on:mousedown.stop=\"deleteNode(data)\"></div>\n\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"children\"\n\t\t\tref=\"children\"\n\t\t\tv-if=\"!isLeaf\">\n\t\t\t<component-ast-node \n\t\t\t\tv-for=\"(child, index) in data.children\"\n\t\t\t\t:key=\"index\"\n\t\t\t\t:index=\"index\"\n\t\t\t\t:data=\"child\"/>\n\t\t</div>\n\t</div>\n</template>\n\n\n<script>\n\timport ast from '../node_message/ast.json';\n\timport { getNewNode } from '../deal_ast.js';\n\timport astTreeMessage from './ast_tree.js';\n\timport { startEdit, paste, keydown, getValue } from './div_to_input.js';\n\n\texport default {\n\t\tname: 'component-ast-node',\n\t\tprops: {\n\t\t\tindex: {\n\t\t\t\ttype: Number,\n\t\t\t},\n\t\t\tdata: {\n\t\t\t\ttype: Object,\n\t\t\t}\n\t\t},\n\t\tinject: ['astMessage'],\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tisLeaf: !this.data.children || this.data.children.length === 0,\n\t\t\t\tisExpand: false,\n\t\t\t\tisEditing: false,\n\n\t\t\t\tisMoving: false,\n\t\t\t\tmoveInType: null,\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\t'data.children': function(newVal, oldVal){\n\t\t\t\tif( newVal.length > 0 && this.isLeaf ){\n\t\t\t\t\tthis.isLeaf = false;\n\t\t\t\t}else if( newVal.length === 0 && !this.isLeaf ){\n\t\t\t\t\tthis.isLeaf = true;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\thandleExpand(){\n\t\t\t\tif( this.isLeaf ){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.isExpand = !this.isExpand;\n\t\t\t\tlet height ;\n\t\t\t\tif( this.isExpand ){\n\t\t\t\t\tthis.$refs.children.style.height = null;\n\t\t\t\t\theight = this.$refs.children.clientHeight;\n\t\t\t\t\tthis.$refs.children.style.height = 0;\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tthis.$refs.children.style.height = `${height}px`;\n\t\t\t\t\t}, 0);\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tthis.$refs.children.style.height = null;//\t300 是 css transition 的数据\n\t\t\t\t\t}, 300);\n\t\t\t\t}else{\n\t\t\t\t\theight = this.$refs.children.clientHeight;\n\t\t\t\t\tthis.$refs.children.style.height = `${height}px`;\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tthis.$refs.children.style.height = 0;\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t},\n\t\t\tdeleteNode(node){\n\t\t\t\tif( this.data.selected ){\n\t\t\t\t\tlet indexOf = this.astMessage.selectedAstNode.indexOf(this.data);\n\t\t\t\t\tthis.astMessage.selectedAstNode.splice( indexOf, 1 );\n\t\t\t\t}\n\t\t\t\tlet parentChildren = node.parent.children;\n\t\t\t\tparentChildren.splice( this.index, 1 );\n\t\t\t},\n\n\t\t\teditNode(){\n\t\t\t\tif( this.isEditing ){\n\t\t\t\t\treturn; \n\t\t\t\t}\n\t\t\t\tthis.isEditing = true;\n\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\tstartEdit(this.$refs.label);\n\t\t\t\t});\n\t\t\t},\n\t\t\teditKeydown(e){\n\t\t\t\tkeydown(this.$refs.label, e, {\n\t\t\t\t\tfinishEdit: this.finishEdit\n\t\t\t\t});\n\t\t\t},\n\t\t\teditPaste(e){\n\t\t\t\tpaste(this.$refs.label, e);\n\t\t\t},\n\t\t\tfinishEdit(){\n\t\t\t\tthis.isEditing = false;\n\t\t\t\tdocument.getSelection().removeAllRanges();\n\t\t\t\tthis.data.nodeType = getValue(this.$refs.label);\n\t\t\t\t// console.log('this.data.nodeType:', this.data.nodeType);\n\t\t\t},\n\n\t\t\taddChildNode(node){\n\t\t\t\tnode.children.push(\n\t\t\t\t\tgetNewNode(`${node.nodeType}-${node.children.length + 1}`, node)\n\t\t\t\t);\n\t\t\t},\n\t\t\tstartMoveNode(e){\n\t\t\t\tastTreeMessage.root.$emit('startMoveNode', e, this);\n\t\t\t},\n\n\t\t\thandleMousedownContent(){\n\t\t\t\tif( astTreeMessage.movingTreeNode ){//\t正在移动\n\t\t\t\t\tastTreeMessage.root.$emit('endMoveNode');\n\t\t\t\t}else{\n\t\t\t\t\tif( ast[this.data.nodeType] ){\n\t\t\t\t\t\tthis.data.selected = !this.data.selected;\n\t\t\t\t\t\tif( this.data.selected ){\n\t\t\t\t\t\t\tthis.astMessage.selectedAstNode.push(this.data);\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tlet indexOf = this.astMessage.selectedAstNode.indexOf(this.data);\n\t\t\t\t\t\t\tthis.astMessage.selectedAstNode.splice( indexOf, 1 );\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.handleExpand();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleMouseenterContent(e){\n\t\t\t\tif( astTreeMessage.moveTargetTreeNode ){\n\t\t\t\t\tconsole.error('代码出错');\n\t\t\t\t}\n\t\t\t\tif( astTreeMessage.movingTreeNode && astTreeMessage.movingTreeNode !== this ){\n\t\t\t\t\tastTreeMessage.moveTargetTreeNode = this;\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleMouseleaveContent(e){\n\t\t\t\tif( astTreeMessage.movingTreeNode && astTreeMessage.moveTargetTreeNode === this ){\n\t\t\t\t\tastTreeMessage.moveTargetTreeNode.moveInType = null;\n\t\t\t\t\tastTreeMessage.moveTargetTreeNode = null;\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleMousemoveContent(e){\n\t\t\t\tif( astTreeMessage.moveTargetTreeNode === this ){\n\t\t\t\t\tif( e.offsetY < 8 ){\n\t\t\t\t\t\tastTreeMessage.root.$emit('showEndMoveTarget', 0);\n\n\t\t\t\t\t}else if( e.offsetY > this.$refs.content.clientHeight - 8 ){\n\t\t\t\t\t\tif( this.index === this.data.parent.children.length - 1 ){\n\t\t\t\t\t\t\tastTreeMessage.root.$emit('showEndMoveTarget', 2);\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tastTreeMessage.root.$emit('showEndMoveTarget', 1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\tcreated(){\n\t\t\tif( this.data.selected ){\n\t\t\t\tthis.astMessage.selectedAstNode.push(this.data);\n\t\t\t}\n\t\t},\n\t\tmounted(){\n\t\t\tif( !this.isExpand && !this.isLeaf){\n\t\t\t\tthis.$refs.children.style.height = 0;\n\t\t\t}\n\t\t},\n\t\tdestroyed(){\n\t\t\t// console.log(this.data.nodeType);\n\t\t}\n\t}\n\n</script>\n\n<style lang=\"less\">\n\t.component-ast-node{\n\t\twidth: 100%;\n\t\t>.node-content{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\twidth: 100%;\n\t\t\tline-height: 0.22rem;\n\t\t\tfont-size: 0.14rem;\n\t    color: #ffffff;\n\t    background-color: #494949;\n\t\t\ttransition: background-color .3s, height .3s;\n\t    cursor: pointer;\n\t    overflow: hidden;\n\t\t\tborder-bottom: 0.04rem solid rgba(0,0,0,0);\n\t\t\tborder-top: 0.04rem solid rgba(0,0,0,0);\n\t    >.expand{\n\t    \twidth: 0.22rem;\n\t    \theight: 0.22rem;\n\t\t    text-align: center;\n\t\t    overflow: hidden;\n        transition: transform .3s ease-in-out, opacity .3s ease-in-out, width .3s;\n\t    }\n\t    >.expand.expanded{\n\t\t    transform: rotate(90deg);\n\t    }\n\t    >.expand.leaf{\n\t    \t//width: 0.14rem;\n\t    \topacity: 0;\n\t    \tpointer-events: none;\n\t\t    transform: rotate(90deg);\n\t    }\n\t    >.label{\n\t    \tflex: 1;\n\t    \twidth: 0;\n\t\t\t\tword-break: break-word;\n\t\t\t\t>.span{\n\t\t\t\t\twidth: fit-content;\n\t\t\t\t\tline-height: 0.22rem;\n\t\t\t\t\ttransition: background-color .3s;\n\t\t\t\t}\n\t\t\t\t>.span.move_in{\n\t\t\t\t\tdisplay: block;\n\t\t\t\t\tbackground-color: #9b9b9b;\n\t\t\t\t}\n\t    }\n\t    >.btns{\n\t    \t//position: absolute;\n\t    \tright: 0;\n\t    \ttop: 0;\n\t    \tpadding: 0 0.1rem;\n\t    \theight: 0.22rem;\n\t\t    background-color: #494949;\n\t\t    opacity: 0;\n\t    \ttransition: opacity .3s ,background-color .3s;\n\t    \t>.btn{\n\t    \t\theight: 100%;\n    \t\t\tdisplay: flex;\n\t\t\t\t\talign-items: center;\n\n\t    \t\t>.iconfont{\n\t    \t\t\twidth: 0.2rem;\n\t\t\t\t    height: 0.2rem;\n\t\t\t\t    line-height: 0.2rem;\n\t\t\t\t    font-size: 0.12rem;\n\t\t\t\t    text-align: center;\n\t\t\t\t    cursor: pointer;\n\t\t\t\t    border-radius: 0.04rem;\n\t\t\t\t    color: #ffffff;\n\t\t\t    \ttransition: background-color  .3s;\n\t\t\t\t\t\t&:hover{\n\t\t\t\t\t\t\tbackground-color: #696969;\n\t\t\t\t\t\t}\n\t    \t\t}\n\t    \t\t>.iconfont[data-selected=\"true\"]{\n\t\t\t\t\t\t\tbackground-color: #000000;\n\t    \t\t}\n\t    \t\t>.move{\n\t    \t\t\tcursor: move;\n\t    \t\t}\n\n\t    \t}\n\t    }\n\t    >.btns[data-show=\"true\"]{\n\t    \topacity: 1;\n\t    }\n\t    >.btns[data-position=\"initial\"]{\n\t    \tposition: initial;\n\t    }\n\t    >.btns[data-position=\"absolute\"]{\n\t    \tposition: absolute;\n\t    }\n\t    &:hover{\n\t    \tbackground-color: #333333;\n\t\t    >.btns{\n\t\t    \topacity: 1;\n\t\t    \tbackground-color: #333333;\n\t\t    }\n\t    }\n\n\t\t}\n\t\t>.node-content.move_in_top{\n\t\t\tborder-top: 0.04rem solid #9b9b9b;\n\t\t}\n\t\t>.node-content.move_in_bottom{\n\t\t\tborder-bottom: 0.04rem solid #9b9b9b;\n\t\t}\n\t\t>.node-content[data-selected=\"true\"]{\n\t\t\tbackground-color: #272727;\n\t    >.btns{\n\t    \tbackground-color: #272727;\n\t    }\n\t\t}\n\t\t>.node-content[data-hide=\"true\"]{\n\n\t\t\theight: 0;\n\t\t}\n\t\t>.children{\n\t\t\tmargin: 0 0 0 0.16rem;\n\t\t\toverflow: hidden;\n\t\t\ttransition: height .3s;\n\t    border-left: 0.01rem solid #666666;\n\t\t}\n\t}\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ast_tree_node.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ast_tree_node.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ast_tree_node.vue?vue&type=template&id=07320ee1&\"\nimport script from \"./ast_tree_node.vue?vue&type=script&lang=js&\"\nexport * from \"./ast_tree_node.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ast_tree_node.vue?vue&type=style&index=0&id=07320ee1&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\t<div class=\"component-ast-node-container\"\n\t\tref=\"astTree\"\n\t\t:data-move=\"isMoving\"\n\t\tv-on:mousemove=\"moveNode\"\n\t\tv-on:mousedown=\"endMoveNode\"\n\t\tv-on:mouseleave=\"endMoveNode\">\n\t\t<c-astTreeNode\n\t\t\tv-for=\"(child, index) in astMessage.astTree.children\"\n\t\t\t:key=\"index\"\n\t\t\t:index=\"index\"\n\t\t\t:data=\"child\"/>\n\t</div>\n</template>\n\n<script>\n\timport astTreeNode from './ast_tree_node.vue';\n\timport astTreeMessage from './ast_tree.js';\n\n\texport default {\n\t\tcomponents: {\n\t\t\t'c-astTreeNode': astTreeNode,\n\t\t},\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tisMoving: false,\n\t\t\t\tx: null,\n\t\t\t\ty: null,\n\t\t\t\toffsetY: null,\n\t\t\t}\n\t\t},\n\t\tinject: ['astMessage'],\n\t\tmethods: {\n\t\t\tmoveNode(e){\n\t\t\t\tif( astTreeMessage.movingTreeNode ){\n\t\t\t\t\tastTreeMessage.cloneNode.style.top = `${e.clientY - this.y - this.offsetY + this.$refs.astTree.scrollTop}px`;\n\t\t\t\t\tastTreeMessage.cloneNode.style.left = `${e.clientX - this.x}px`;\n\t\t\t\t}\n\t\t\t},\n\t\t\tendMoveNode(e){\n\t\t\t\t// console.log(\"e:\", e.type);\n\t\t\t\tthis.$emit('endMoveNode');\n\t\t\t}\n\t\t},\n\t\tcreated(){\n\t\t\tastTreeMessage.root = this;\n\n\t\t\tthis.$on('startMoveNode', function(e, treeNode){\n\t\t\t\t// console.log('startMoveNode e:', e);\n\t\t\t\tif( astTreeMessage.movingTreeNode ){\n\t\t\t\t\tif( astTreeMessage.movingTreeNode === treeNode ){\n\t\t\t\t\t\tthis.isMoving = treeNode.$data.isMoving = false;\n\t\t\t\t\t\tthis.$el.removeChild(astTreeMessage.cloneNode);\n\n\t\t\t\t\t\tastTreeMessage.movingTreeNode = astTreeMessage.cloneNode = null;\n\t\t\t\t\t}else{\n\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\t// console.log(\"treeNode.$refs.node:\", treeNode.$refs.node);\n\t\t\t\t\tastTreeMessage.movingTreeNode = treeNode;\n\t\t\t\t\tlet cloneNode = astTreeMessage.cloneNode = treeNode.$refs.node.cloneNode(true);\n\n\t\t\t\t\tcloneNode.classList.add('moving');\n\n\t\t\t\t\t// console.log(this.$refs.astTree.clientTop);\n\t\t\t\t\t// console.log(e.clientY);\n\n\t\t\t\t\tthis.x = e.clientX;\n\t\t\t\t\tthis.offsetY = e.offsetY;\n\n\t\t\t\t\tcloneNode.style.top = `${e.clientY - this.y - this.offsetY + this.$refs.astTree.scrollTop}px`;\n\t\t\t\t\tcloneNode.style.left = `${e.clientX - this.x}px`;\n\t\t\t\t\tthis.isMoving = astTreeMessage.movingTreeNode.$data.isMoving = true;\n\t\t\t\t\tthis.$el.appendChild(cloneNode);\n\t\t\t\t}\n\n\t\t\t});\n\n\t\t\tthis.$on('showEndMoveTarget', function(type){\n\t\t\t\tlet { movingTreeNode , moveTargetTreeNode } = astTreeMessage,\n\t\t\t\t\t\t{ index, data } = movingTreeNode;\n\n\t\t\t\tswitch(type){\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tif( data.parent.children[index + 1] === moveTargetTreeNode.data ){\n\t\t\t\t\t\t\t// console.log('目标节点的下一个节点就是移动节点');\n\t\t\t\t\t\t\tmoveTargetTreeNode.moveInType = null;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tmoveTargetTreeNode.moveInType = type;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tif( movingTreeNode.data.parent === moveTargetTreeNode.data ){\n\t\t\t\t\t\t\t// console.log('移动节点的父节点就是目标节点');\n\t\t\t\t\t\t\tmoveTargetTreeNode.moveInType = null;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tmoveTargetTreeNode.moveInType = type;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tmoveTargetTreeNode.moveInType = null;\n\t\t\t\t\t\tif( data.parent.children[index - 1] === moveTargetTreeNode.data ){\n\t\t\t\t\t\t\t// console.log('目标节点的上一个节点就是移动节点');\n\t\t\t\t\t\t\tmoveTargetTreeNode.moveInType = null;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tmoveTargetTreeNode.moveInType = type;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis.$on('endMoveNode', function(){\n\t\t\t\tif( astTreeMessage.movingTreeNode ){\n\t\t\t\t\t// console.log(\"endMoveNode\");\n\n\t\t\t\t\tthis.$el.removeChild(astTreeMessage.cloneNode);\n\n\t\t\t\t\tif( astTreeMessage.moveTargetTreeNode ){\n\t\t\t\t\t\tlet moveNode = astTreeMessage.movingTreeNode.data,\n\t\t\t\t\t\t\t\tmoveNodeIndex = astTreeMessage.movingTreeNode.index,\n\t\t\t\t\t\t\t\tendNode = astTreeMessage.moveTargetTreeNode.data,\n\t\t\t\t\t\t\t\tendNodeIndex = astTreeMessage.moveTargetTreeNode.index,\n\t\t\t\t\t\t\t\tmoveInType = astTreeMessage.moveTargetTreeNode.moveInType;\n\n\t\t\t\t\t\t\n\t\t\t\t\t\tastTreeMessage.moveTargetTreeNode.moveInType = null;\n\t\t\t\t\t\tthis.isMoving = astTreeMessage.movingTreeNode.isMoving = false;\n\n\t\t\t\t\t\tastTreeMessage.cloneNode = \n\t\t\t\t\t\tastTreeMessage.movingTreeNode = \n\t\t\t\t\t\tastTreeMessage.moveTargetTreeNode = null;\n\n\t\t\t\t\t\tlet \n\t\t\t\t\t\t\tmoveNodeparentChildren = moveNode.parent.children,\n\t\t\t\t\t\t\tendNodeParentChildren = endNode.parent.children;\n\n\n\t\t\t\t\t\tswitch( moveInType ){\n\t\t\t\t\t\t\tcase 0:\n\t\t\t\t\t\t\t\tmoveNodeparentChildren.splice( moveNodeIndex, 1 );\n\t\t\t\t\t\t\t\tmoveNode.parent = endNode.parent;\n\t\t\t\t\t\t\t\tendNodeParentChildren.splice( endNodeIndex, 0, moveNode );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tmoveNodeparentChildren.splice( moveNodeIndex, 1 );\n\t\t\t\t\t\t\t\tmoveNode.parent = endNode;\n\t\t\t\t\t\t\t\tendNode.children.push(moveNode);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\tmoveNodeparentChildren.splice( moveNodeIndex, 1 );\n\t\t\t\t\t\t\t\tmoveNode.parent = endNode.parent;\n\t\t\t\t\t\t\t\tendNodeParentChildren.splice( endNodeIndex + 1, 0, moveNode );\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}else{\n\t\t\t\t\t\tthis.isMoving = astTreeMessage.movingTreeNode.isMoving = false;\n\t\t\t\t\t\tastTreeMessage.movingTreeNode = astTreeMessage.cloneNode = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t});\n\t\t},\n\t\tmounted(){\n\t\t\tthis.y = this.$refs.astTree.getBoundingClientRect().y;\n\t\t}\n\t}\n</script>\n\n<style lang=\"less\">\n\t.component-ast-node-container{\n    position: relative;\n\t\tpadding: 0.1rem 0 0 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\toverflow-y: auto;\n\t\toverflow-x: visible;\n\t\t>.component-ast-node.moving{\n\t\t\tposition: absolute;\n\t\t\topacity: 0.3;\n\t\t\tpointer-events: none;\n\t\t\t>.node-content{\n\t\t\t\tbackground-color: #000000;\n\t\t\t\tpointer-events: none;\n\t\t\t}\n\t\t}\n\t}\n\t.component-ast-node-container[data-move=\"true\"]{\n\t\tcursor: move;\n\t\t.component-ast-node{\n\t\t\t>.node-content{\n\t\t    >.btns{\n\t\t    \tpointer-events: none;\n\t\t    \topacity: 0;\n\t\t    }\n\t\t\t}\n\t\t}\n\t}\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ast_tree.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./ast_tree.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ast_tree.vue?vue&type=template&id=62c21b70&\"\nimport script from \"./ast_tree.vue?vue&type=script&lang=js&\"\nexport * from \"./ast_tree.vue?vue&type=script&lang=js&\"\nimport style0 from \"./ast_tree.vue?vue&type=style&index=0&id=62c21b70&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\t<div id=\"learnAstNode-codeList\">\n\t\t<div class=\"operation\">\n\t\t\t<div class=\"icon\">\n\t\t\t\t<div class=\"iconfont icon-output\"\n\t\t\t\t\ttitle=\"导出节点\"\n\t\t\t\t\tv-on:mousedown=\"outputAstMessage\"></div>\n\t\t\t</div>\n\t\t\t<div class=\"icon\">\n\t\t\t\t<div class=\"iconfont icon-add\"\n\t\t\t\t\ttitle=\"添加节点\"\n\t\t\t\t\tv-on:mousedown=\"addAstNode\"></div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"tree\">\n\t\t\t<c-astTree />\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport astTree from './ast_tree.vue';\n\timport { getNewNode, outputAstMessage } from '../deal_ast.js';\n\n\texport default {\n\t\tcomponents: {\n\t\t\t'c-astTree': astTree,\n\t\t},\n\t\tinject: ['astMessage'],\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tastMessage: this.astMessage,\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\toutputAstMessage(){\n\t\t\t\toutputAstMessage(this.astMessage)\n\t\t\t},\n\t\t\taddAstNode(){\n\t\t\t\tlet astTree = this.astMessage.astTree;\n\t\t\t\tastTree.children.push(\n\t\t\t\t\tgetNewNode(`ast节点-${astTree.children.length + 1}`, astTree)\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n</script>\n\n<style lang=\"less\">\n\t#learnAstNode-codeList{\n\t\twidth: 2.5rem;\n\t\theight: 100%;\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\tbackground-color: #494949;\n    border-right: 0.02rem solid #000000;\n\t\t>.operation{\n\t\t\tdisplay: flex;\n\t\t\tflex-direction: row-reverse;\n\t    padding: 0.04rem 0.1rem;\n\t\t\twidth: 100%;\n\t\t\theight: 0.4rem;\n\t\t\t>.icon{\n\t\t\t\tdisplay: flex;\n\t\t\t\tpadding-left: 0.04rem;\n\t\t\t\theight: 100%;\n\t\t\t\tjustify-content: center;\n\t\t\t\talign-items: center;\n\t\t\t\t>.iconfont{\n\t\t\t\t\twidth: 0.26rem;\n\t\t\t\t\theight: 0.26rem;\n\t\t\t\t\tline-height: 0.26rem;\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\tcursor: pointer;\n\t\t\t\t\tborder-radius: 0.04rem;\n\t\t\t\t\tcolor: #ffffff;\n\t\t\t\t\ttransition: background-color .3s;\n\t\t\t\t\t&:hover{\n\t\t\t\t\t\tbackground-color: #333333;\n\t\t\t\t\t}\t\n\t\t\t\t}\n\t\t\t\t>.iconfont[data-selected=\"true\"]{\n\t\t\t\t\tbackground-color: #000000;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t>.tree{\n\t\t\tflex: 1;\n\t\t\twidth: 100%;\n\t\t\theight: 0;\n\t\t\tborder-top: 0.02rem solid #000000;\n\t\t}\n\t}\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./node_list.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./node_list.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./node_list.vue?vue&type=template&id=2bbe0f58&\"\nimport script from \"./node_list.vue?vue&type=script&lang=js&\"\nexport * from \"./node_list.vue?vue&type=script&lang=js&\"\nimport style0 from \"./node_list.vue?vue&type=style&index=0&id=2bbe0f58&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{attrs:{\"id\":\"learnAstNode-nodeMessages\"}},_vm._l((_vm.astMessage.selectedAstNode),function(message,index){return _c('c-message',{key:message.nodeType,attrs:{\"message\":message}})}),1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"node_message_container\"},[_c('div',{staticClass:\"node_message\"},[_c('div',{staticClass:\"header\"},[_c('div',{staticClass:\"title\"},[_vm._v(_vm._s(_vm.message.nodeType))]),_c('div',{staticClass:\"icon\"},[_c('div',{staticClass:\"iconfont icon-guanbi\",on:{\"mousedown\":function($event){return _vm.unselectAstNode(_vm.message)}}}),_c('div',{staticClass:\"iconfont icon-bianji\",on:{\"mousedown\":function($event){return _vm.editAstNode(_vm.message)}}})])]),_c('div',{staticClass:\"content\"},[(_vm.message.code || _vm.message.edit)?_c('div',{staticClass:\"code\"},[_c('textarea',{ref:\"code\",on:{\"input\":_vm.changeCodeDebounce}})]):_vm._e(),_c('div',{staticClass:\"json_tree_container\"},[_c('div',{staticClass:\"json_tree\"},[(_vm.ast)?_c('c-jsonTreeNode',{attrs:{\"data\":_vm.ast}}):_vm._e()],1)])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as babelParser from '@babel/parser';\n\n// console.log('babelParser:', babelParser);\n\nexport default function getAst(code){\n\treturn babelParser.parse(code, {\n\t\tsourceType: 'module',\n\t\tstrictMode: false,\n\t\tcreateParenthesizedExpressions: true,\n\t\tallowUndeclaredExports: true,\n\t\tplugins: [\n\t\t\t'decimal',\n\t\t\t'decorators-legacy',\n\t\t\t'recordAndTuple',\n\t\t\t'partialApplication',\n\t\t\t'functionBind',\n\t\t\t'doExpressions',\n\t\t\t'moduleBlocks',\n\t\t\t'flow',\n\t\t\t'importAssertions'\n\n\n\t\t\t// 'syntaxType'\n\n\t\t\t// 'classProperties',\n\t\t\t// 'objectRestSpread',\n\t\t\t// 'jsx',\n\t\t\t// 'typescript',\n\t\t\t// 'asyncGenerators',\n\t\t\t// 'dynamicImport',\n\t\t\t// 'exportDefaultFrom',\n\t\t\t// 'exportNamespaceFrom'\n\t\t]\n\t});\n}","var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"component-json-node\"},[_c('div',{staticClass:\"node-content\"},[_c('div',{class:{\n\t\t\t\texpand: true,\n\t\t\t\tleaf: _vm.isLeaf,\n\t\t\t\texpanded: _vm.isExpand && !_vm.isLeaf,\n\t\t\t},on:{\"mousedown\":function($event){$event.stopPropagation();return _vm.handleExpand.apply(null, arguments)}}},[_vm._v(\" › \")]),_c('div',{staticClass:\"label\",on:{\"mousedown\":_vm.copyKeyName}},[_vm._v(\" \"+_vm._s(_vm.getLabel())+\" \")])]),(!_vm.isLeaf)?_c('div',{ref:\"children\",staticClass:\"children\"},_vm._l((_vm.data),function(child,name){return ((typeof _vm.data === 'object' && !Array.isArray(_vm.data) && \n\t\t\t\t_vm.data.type && _vm.ast[_vm.data.type] ?\n\t\t\t\t_vm.ast[_vm.data.type][name] : true))?_c('component-json-node',{key:name,attrs:{\"data\":child,\"keyName\":name}}):_vm._e()}),1):_vm._e()])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\n\t<div class=\"component-json-node\">\n\t\t<div class=\"node-content\" >\n\t\t\t<div :class=\"{\n\t\t\t\t\texpand: true,\n\t\t\t\t\tleaf: isLeaf,\n\t\t\t\t\texpanded: isExpand && !isLeaf,\n\t\t\t\t}\"\n\t\t\t\tv-on:mousedown.stop=\"handleExpand\"> › </div>\n\t\t\t<div class=\"label\"\n\t\t\t\tv-on:mousedown=\"copyKeyName\">\n\t\t\t\t{{ getLabel() }}\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"children\"\n\t\t\tref=\"children\"\n\t\t\tv-if=\"!isLeaf\">\n\t\t\t<component-json-node\n\t\t\t\tv-for=\"(child, name) in data\"\n\t\t\t\tv-if=\"(typeof data === 'object' && !Array.isArray(data) && \n\t\t\t\t\tdata.type && ast[data.type] ?\n\t\t\t\t\tast[data.type][name] : true)\"\n\t\t\t\t:key=\"name\"\n\t\t\t\t:data = \"child\"\n\t\t\t\t:keyName=\"name\"\n\t\t\t\t/>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport ast from './ast.json';\n\n\texport default {\n\t\tname: 'component-json-node',\n\t\tprops: {\n\t\t\tdata: {\n\t\t\t\ttype: [Object, Array, String, Number, Boolean],\n\t\t\t},\n\t\t\tkeyName: {\n\t\t\t\ttype: [String, Number],\n\t\t\t\tdefault: '',\n\t\t\t}\n\t\t},\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tast,\n\t\t\t\t// isLeaf: null,\n\t\t\t\tisLeaf: this.getIsLeaf(),\n\t\t\t\tisExpand: true,\n\t\t\t}\n\t\t},\n\t\twatch: {\n\t\t\tdata(){\n\t\t\t\tthis.isLeaf = this.getIsLeaf();\n\t\t\t}\n\t\t},\n\t\tmethods: {\n\t\t\thandleExpand(){\n\t\t\t\tif( this.isLeaf ){\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.isExpand = !this.isExpand;\n\t\t\t\tlet height ;\n\t\t\t\tif( this.isExpand ){\n\t\t\t\t\tthis.$refs.children.style.height = null;\n\t\t\t\t\theight = this.$refs.children.clientHeight;\n\t\t\t\t\tthis.$refs.children.style.height = 0;\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tthis.$refs.children.style.height = `${height}px`;\n\t\t\t\t\t}, 0);\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tthis.$refs.children.style.height = null;//\t300 是 css transition 的数据\n\t\t\t\t\t}, 300);\n\t\t\t\t}else{\n\t\t\t\t\theight = this.$refs.children.clientHeight;\n\t\t\t\t\tthis.$refs.children.style.height = `${height}px`;\n\t\t\t\t\tsetTimeout(()=>{\n\t\t\t\t\t\tthis.$refs.children.style.height = 0;\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t},\n\t\t\tgetLabel(){\n\t\t\t\tlet dataLabel = \"\",\n\t\t\t\t\t\tdataType = \"\";\n\t\t\t\t\n\n\t\t\t\tif( typeof this.keyName === \"string\" ){\n\t\t\t\t\tdataLabel = this.keyName;\n\t\t\t\t\tif( this.data && this.data.type ){\n\t\t\t\t\t\tdataLabel += ': ' + this.data.type;\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tdataLabel = this.data.type;\n\t\t\t\t}\n\n\t\t\t\tthis.data === null ? dataType = ': null' :\n\t\t\t\tthis.data === void 0 ? dataType = ': undefined' : \n\t\t\t\tArray.isArray(this.data) ? dataType = `-Array [${this.data.length}]` :\n\t\t\t\ttypeof this.data === 'object' ? dataType = `-Object {${Object.keys(this.data).length}}` :\n\t\t\t\tdataType = `: ${this.data}`\n\n\t\t\t\treturn `${dataLabel}${dataType}`;\n\t\t\t},\n\t\t\tcopyKeyName(){\n\t\t\t\tconsole.log('this.data:', this.data);\n\t\t\t\tconsole.log('this.keyName:', this.keyName);\n\t\t\t\tconsole.log('this.data.type:', this.data.type);\n\t\t\t\tlet textarea = document.createElement('textarea');\n\t\t\t\ttextarea.style.position = 'absolute';\n\t\t\t\ttextarea.style.opacity = 0;\n\n\t\t\t\tdocument.body.appendChild(textarea);\n\t\t    textarea.value = this.keyName;\n\t\t    textarea.select();\t\t// 选择对象\n\t\t    document.execCommand(\"Copy\");\t// 执行浏览器复制命令\n\n\t\t\t\tdocument.body.removeChild(textarea);\n\t\t\t},\n\t\t\tgetIsLeaf(){\n\t\t\t\treturn Array.isArray(this.data) ? this.data.length === 0 :\n\t\t\t\t\t\t\t\t((typeof this.data) === \"object\" && this.data !== null) ? Object.keys(this.data) === 0 :\n\t\t\t\t\t\t\t\ttrue\n\t\t\t}\n\t\t},\n\t\tcreated(){\n\t\t\t\t// console.log('data:', this.data);\n\t\t\t// console.log(JSON.stringify(this.data, null, 4))\n\t\t\t// console.log('this.keyName:', this.keyName);\n\t\t\t// console.log('this.data:', this.data);\n\t\t\t// for( let key in this.data ){\n\t\t\t// \tconsole.log(`this.data[${key}]:`, this.data[key]);\n\t\t\t// \tconsole.log(`ast[${this.data.type}][${key}]`, ast[this.data.type][key]);\n\t\t\t// }\n\t\t\t// console.log((typeof this.data) !== \"object\");\n\t\t\t// console.log('this.data:', this.data);\n\t\t\t// console.log('this.keyName:', this.keyName);\n\t\t}\n\t}\n</script>\n\n<style lang=\"less\">\n\t.component-json-node{\n\t\t>.node-content{\n\t\t\tposition: relative;\n\t\t\tdisplay: flex;\n\t\t\theight: 0.3rem;\n\t\t\tline-height: 0.3rem;\n\t\t\tfont-size: 0.14rem;\n\t\t\ttransition: background-color .3s, height .3s;\n\t    cursor: pointer;\n\t    >.expand{\n\t    \twidth: 0.3rem;\n\t    \theight: 0.3rem;\n\t\t    text-align: center;\n        transition: transform .3s ease-in-out, opacity .3s ease-in-out, width .3s;\n\t    }\n\t    >.expand.expanded{\n\t\t    transform: rotate(90deg);\n\t    }\n\t    >.expand.leaf{\n\t    \topacity: 0;\n\t    \tpointer-events: none;\n\t\t    transform: rotate(90deg);\n\t    }\n\t    >.label{\n\t\t\t\tline-height: 0.3rem;\n\t\t\t\twhite-space:nowrap;\n\t    }\n\t\t}\n\t\t>.node-content[data-selected=\"true\"]{\n\t\t\tbackground-color: #272727;\n\t    >.btns{\n\t    \tbackground-color: #272727;\n\t    }\n\t\t}\n\t\t>.node-content[data-hide=\"true\"]{\n\n\t\t\theight: 0;\n\t\t}\n\t\t>.children{\n\t\t\tmargin: 0 0 0 0.16rem;\n\t\t\ttransition: height .3s;\n\t    border-left: 0.01rem solid #666666;\n\t    overflow-y: hidden;\n\t    overflow-x: initial;\n\t\t}\n\t}\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./json_tree_node.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./json_tree_node.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./json_tree_node.vue?vue&type=template&id=e0bf74d6&\"\nimport script from \"./json_tree_node.vue?vue&type=script&lang=js&\"\nexport * from \"./json_tree_node.vue?vue&type=script&lang=js&\"\nimport style0 from \"./json_tree_node.vue?vue&type=style&index=0&id=e0bf74d6&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\t<div class=\"node_message_container\">\n\t\t<div class=\"node_message\">\n\t\t\t<div class=\"header\">\n\t\t\t\t<div class=\"title\">{{message.nodeType}}</div>\n\t\t\t\t<div class=\"icon\">\n\t\t\t\t\t<div class=\"iconfont icon-guanbi\"\n\t\t\t\t\t\tv-on:mousedown=\"unselectAstNode(message)\"></div>\n\t\t\t\t\t<div class=\"iconfont icon-bianji\"\n\t\t\t\t\t\tv-on:mousedown=\"editAstNode(message)\"></div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"content\">\n\t\t\t\t<div class=\"code\"\n\t\t\t\t\tv-if=\"message.code || message.edit\">\n\t\t\t\t\t<textarea ref=\"code\"\n\t\t\t\t\t\tv-on:input=\"changeCodeDebounce\"></textarea>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"json_tree_container\">\n\t\t\t\t\t<div class=\"json_tree\">\n\t\t\t\t\t\t<c-jsonTreeNode\n\t\t\t\t\t\t\tv-if=\"ast\"\n\t\t\t\t\t\t\t:data=\"ast\"/>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\timport getAst from './parse.js';\n\timport jsonTreeNode from './json_tree_node.vue';\n\timport debounce from '../../../utils/timer/debounce.js';\n\n\texport default {\n\t\tcomponents: {\n\t\t\t'c-jsonTreeNode': jsonTreeNode,\n\t\t},\n\t\tinject: ['astMessage'],\n\t\tdata(){\n\t\t\treturn {\n\t\t\t\tast: null,\n\t\t\t}\n\t\t},\n\t\tprops: {\n\t\t\tmessage: {\n\t\t\t\ttype: Object\n\t\t\t},\n\t\t},\n\t\tmethods: {\n\t\t\tchangeCodeDebounce: debounce(function(){\n\t\t\t\tthis.message.code = this.$refs.code.value;\n\t\t\t\ttry{\n\t\t\t\t\tthis.ast = getAst(this.message.code);\n\t\t\t\t\t// console.info('ast:', JSON.stringify(this.ast, null, 4));\n\t\t\t\t}catch(e){\n\t\t\t\t\tthis.ast = null;\n\t\t\t\t\tconsole.error(e);\n\t\t\t\t}\n\t\t\t}, 2000),\n\t\t\tunselectAstNode(node){\n\t\t\t\t// console.log(\"unselectAstNode\");\n\t\t\t\tlet index = this.astMessage.selectedAstNode.indexOf(node);\n\t\t\t\tthis.astMessage.selectedAstNode.splice(index, 1);\n\t\t\t\tnode.selected = false;\n\t\t\t\t// console.log('index:', index);\n\t\t\t},\n\t\t\teditAstNode(node){\n\t\t\t\t// console.log(\"editAstNode\");\n\t\t\t\t// this.$set(node, 'edit', !node.edit);\n\t\t\t\tif(!node.code){\n\t\t\t\t\tnode.edit = !node.edit;\n\t\t\t\t}\n\t\t\t\t// console.log('edit:', node.edit);\n\t\t\t}\n\t\t},\n\t\tmounted(){\n\t\t\t// console.log('message:', this.message);\n\t\t\tif( this.message.code ){\n\t\t\t\tthis.$refs.code.value = this.message.code;\n\t\t\t}\n\t\t\tthis.ast = getAst(this.message.code);\n\t\t}\n\t}\n</script>\n\n<style lang=\"less\">\n\t.node_message_container{\n\t\tpadding: 0.18rem;\n\t\twidth: 100%;\n\t\tmin-width: 5rem;\n\t\t>.node_message{\n\t\t\tpadding: 0.04rem 0.1rem;\n\t\t\twidth: 100%;\n\t\t\tborder-radius: 0.04rem;\n\t\t\tbox-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\n\t\t\t>.header{\n\t\t\t\tposition: relative;\n\t\t\t\tdisplay: flex;\n\t\t\t\twidth: 100%;\n\t\t\t\theight: 0.3rem;\n\t\t\t\t>.title{\n\t\t\t\t\theight: 100%;\n\t\t\t\t\tline-height: 0.3rem;\n\t\t\t\t\tfont-size: 0.16rem;\n\t\t\t\t}\n\t\t\t\t>.icon{\n\t\t\t\t\tposition: absolute;\n\t\t\t\t\ttop: 0;\n\t\t\t\t\tright: 0;\n\t\t\t\t\tdisplay: flex;\n\t\t\t\t\talign-items: center;\n\t\t\t\t\tflex-direction: row-reverse;\n\t\t\t\t\theight: 0.3rem;\n\t\t\t\t\tline-height: 0.3rem;\n\t\t\t\t\t>.iconfont{\n\t\t\t\t\t\tdisplay: flex;\n\t\t\t\t\t\talign-items: center;\n\t\t\t\t\t\tmargin: 0 0 0 0.06rem;\n\t\t\t\t\t\twidth: 0.2rem;\n\t\t\t\t\t\theight: 0.2rem;\n\t\t\t\t\t\tcursor: pointer;\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\t\t\t>.content{\n\t\t\t\tdisplay: flex;\n\t\t\t\twidth: 100%;\n\t\t\t\tborder-top: 0.01rem solid #b6b6b6;\n\t\t\t\theight: fit-content;\n\t\t\t\t//transition: height .3s;\n\t\t\t\t>.code{\n\t\t\t\t\tpadding: 0.1rem;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\t//height: 100%;\n\t\t\t    min-height: 100%;\n\t\t\t\t\t>textarea{\n\t\t\t\t\t\tpadding: 0.1rem;\n\t\t\t\t\t\twidth: 100%;\n\t\t\t\t\t\theight: 100%;\n\t\t\t\t\t\tresize: none;\n\t\t\t\t\t\tborder-width: 0.02rem;\n\t\t\t\t\t\tborder-style: dashed;\n\t\t\t\t\t\tborder-color: #434343;\n\t\t\t\t\t\tborder-radius: 0.04rem;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t>.json_tree_container{\n\t\t\t\t\tpadding: 0.1rem;\n\t\t\t\t\twidth: 50%;\n\t\t\t\t\toverflow: auto;\n\t\t\t\t\t>.json_tree{\n\t\t\t\t\t\twidth: fit-content;\n\t\t\t\t\t\tmin-width: 100%;\n\t\t\t\t\t\theight: fit-content;\n\t\t\t\t\t\tmax-height: 3rem;\n\t\t\t\t\t\toverflow: auto;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./message.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./message.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./message.vue?vue&type=template&id=7e026043&\"\nimport script from \"./message.vue?vue&type=script&lang=js&\"\nexport * from \"./message.vue?vue&type=script&lang=js&\"\nimport style0 from \"./message.vue?vue&type=style&index=0&id=7e026043&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\t<div id=\"learnAstNode-nodeMessages\">\n\t\t<c-message \n\t\t\tv-for=\"(message, index) in astMessage.selectedAstNode\"\n\t\t\t:key=\"message.nodeType\"\n\t\t\t:message=\"message\"/>\n\t</div>\n</template>\n\n<script>\n\timport message from './message.vue';\n\n\texport default {\n\t\tcomponents: {\n\t\t\t\"c-message\": message,\n\t\t},\n\t\tinject: ['astMessage'],\n\t}\n\n</script>\n\n<style lang=\"less\">\n\t#learnAstNode-nodeMessages{\n\t\tdisplay: flex;\n\t\tflex-wrap: wrap;\n    justify-content: flex-start;\n    align-content: flex-start;\n\t\tflex: 1;\n\t\twidth: 0;\n\t\theight: 100%;\n\t\toverflow-y: auto;\n\t\t>.node_message_container{\n\n\t\t}\n\t}\n</style>","import mod from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./node_message.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./node_message.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./node_message.vue?vue&type=template&id=2632c970&\"\nimport script from \"./node_message.vue?vue&type=script&lang=js&\"\nexport * from \"./node_message.vue?vue&type=script&lang=js&\"\nimport style0 from \"./node_message.vue?vue&type=style&index=0&id=2632c970&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","<template>\n\t<div id=\"learnAstNode\">\n\t\t<div class=\"header\">\n\t\t\t<div class=\"title\">\n\t\t\t\t<div class=\"iconfont icon-jiedianguanli\"></div>\n\t\t\t\t<div class=\"text\" >Ast 节点学习</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"main\">\n\t\t\t<v-nodeList/>\n\t\t\t<v-nodeMessage/>\n\t\t</div>\n\t</div>\n</template>\n\n<script>\n\t// import getAst from './node_message/parse.js';\n\timport nodeList from './node_list/node_list.vue';\n\timport nodeMessage from './node_message/node_message.vue';\n\n\timport astMessage from './astMessage.json';\n\timport { initAstMessageJson } from './deal_ast.js';\n\n\texport default {\n\t\tcomponents: {\n\t\t\t\"v-nodeList\": nodeList,\n\t\t\t\"v-nodeMessage\": nodeMessage,\n\t\t},\n\t\tprovide: {\n\t\t\tastMessage: initAstMessageJson(astMessage)\n\t\t},\n\t}\n</script>\n\n<style lang=\"less\">\n\t#learnAstNode{\n\t\tdisplay: flex;\n\t\tflex-direction: column;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\t>.header{\n\t\t\tdisplay: flex;\n\t\t\theight: 0.5rem;\n\t\t\tbackground-color: #24292f;\n\t\t\t>.title{\n\t\t\t\tdisplay: flex;\n\t\t\t\tpadding-left: 0.1rem;\n\t\t\t\tflex: 1;\n\t\t\t\theight: 100%;\n\t\t\t\t>div{\n\t\t\t\t\tcolor: #ffffff;\n\t\t\t\t\tline-height: 0.5rem;\n\t\t\t\t}\n\t\t\t\t>.iconfont{\n\t\t\t\t\tfont-size: 0.16rem;\n\t\t\t\t}\n\t\t\t\t>.text{\n\t\t\t\t\tpadding-left: 0.08rem;\n\t\t\t\t\tfont-size: 0.14rem;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t>.main{\n\t\t\tdisplay: flex;\n\t\t\theight: 0;\n\t\t\tflex: 1;\n\t\t\t>.item{\n\t\t\t\theight: 100%;\n\t\t\t}\n\n\t\t}\n\n\t}\n</style>","import mod from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./learn_ast_node.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./learn_ast_node.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./learn_ast_node.vue?vue&type=template&id=5430b222&\"\nimport script from \"./learn_ast_node.vue?vue&type=script&lang=js&\"\nexport * from \"./learn_ast_node.vue?vue&type=script&lang=js&\"\nimport style0 from \"./learn_ast_node.vue?vue&type=style&index=0&id=5430b222&prod&lang=less&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","var makeBuiltIn = require('../internals/make-built-in');\nvar defineProperty = require('../internals/object-define-property');\n\nmodule.exports = function (target, name, descriptor) {\n  if (descriptor.get) makeBuiltIn(descriptor.get, name, { getter: true });\n  if (descriptor.set) makeBuiltIn(descriptor.set, name, { setter: true });\n  return defineProperty.f(target, name, descriptor);\n};\n","'use strict';\nvar anObject = require('../internals/an-object');\n\n// `RegExp.prototype.flags` getter implementation\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.hasIndices) result += 'd';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.dotAll) result += 's';\n  if (that.unicode) result += 'u';\n  if (that.unicodeSets) result += 'v';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","var global = require('../internals/global');\nvar DESCRIPTORS = require('../internals/descriptors');\nvar defineBuiltInAccessor = require('../internals/define-built-in-accessor');\nvar regExpFlags = require('../internals/regexp-flags');\nvar fails = require('../internals/fails');\n\n// babel-minify and Closure Compiler transpiles RegExp('.', 'd') -> /./d and it causes SyntaxError\nvar RegExp = global.RegExp;\nvar RegExpPrototype = RegExp.prototype;\n\nvar FORCED = DESCRIPTORS && fails(function () {\n  var INDICES_SUPPORT = true;\n  try {\n    RegExp('.', 'd');\n  } catch (error) {\n    INDICES_SUPPORT = false;\n  }\n\n  var O = {};\n  // modern V8 bug\n  var calls = '';\n  var expected = INDICES_SUPPORT ? 'dgimsy' : 'gimsy';\n\n  var addGetter = function (key, chr) {\n    // eslint-disable-next-line es/no-object-defineproperty -- safe\n    Object.defineProperty(O, key, { get: function () {\n      calls += chr;\n      return true;\n    } });\n  };\n\n  var pairs = {\n    dotAll: 's',\n    global: 'g',\n    ignoreCase: 'i',\n    multiline: 'm',\n    sticky: 'y'\n  };\n\n  if (INDICES_SUPPORT) pairs.hasIndices = 'd';\n\n  for (var key in pairs) addGetter(key, pairs[key]);\n\n  // eslint-disable-next-line es/no-object-getownpropertydescriptor -- safe\n  var result = Object.getOwnPropertyDescriptor(RegExpPrototype, 'flags').get.call(O);\n\n  return result !== expected || calls !== expected;\n});\n\n// `RegExp.prototype.flags` getter\n// https://tc39.es/ecma262/#sec-get-regexp.prototype.flags\nif (FORCED) defineBuiltInAccessor(RegExpPrototype, 'flags', {\n  configurable: true,\n  get: regExpFlags\n});\n","// 抄自 https://github.com/tweenjs/tween.js/blob/master/src/Now.ts\nlet now;\n\nif (typeof self === 'undefined' && typeof process !== 'undefined' && process.hrtime) {\n\tnow = function () {\n\t\t// eslint-disable-next-line\n\t\t// @ts-ignore\n\t\tvar time = process.hrtime();\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use self.performance.now if it is available.\nelse if (typeof self !== 'undefined' && self.performance !== undefined && self.performance.now !== undefined) {\n\t// This must be bound, because directly assigning this function\n\t// leads to an invocation exception in Chrome.\n\tnow = self.performance.now.bind(self.performance);\n}\n// Use Date.now if it is available.\nelse if (Date.now !== undefined) {\n\tnow = Date.now;\n}\n// Otherwise, use 'new Date().getTime()'.\nelse {\n\tnow = function () {\n\t\treturn new Date().getTime();\n\t};\n}\n\nexport default now","import getNow from './basic/now.js';\n/**\n * underscore 防抖函数，返回函数连续调用时，空闲时间必须大于或等于 wait，func 才会执行\n *\n * @param  {function} func        回调函数\n * @param  {number}   wait        表示时间窗口的间隔\n * @param  {boolean}  immediate   设置为ture时，是否立即调用函数\n * @return {function}             返回客户调用函数\n */\nexport default function debounce(func, wait, immediate = false) {\n\tlet timeout, args, context, timestamp, result;\n \n \tfunction run() {\n\t\t// 现在和上一次时间戳比较\n\t\tlet last = getNow() - timestamp;\n\t\t// 如果当前间隔时间少于设定时间且大于0就重新设置定时器\n\t\tif (last < wait && last >= 0) {\n\t\t\ttimeout = setTimeout(run, wait - last);\n\t\t} else {\n\t\t\t// 否则的话就是时间到了执行回调函数\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) {\n\t\t\t\tresult = func.apply(context, args);\n\t\t\t\tcontext = args = null;\n\t\t\t}\n\t\t}\n\t};\n \n\tfunction debounce() {\n\t\tcontext = this;\n\t\targs = arguments;\n\t\t// 设置最近一次函数触发的时间戳\n\t\ttimestamp = getNow();\n\t\t// 如果定时器不存在且立即执行函数\n\t\tlet callNow = immediate && !timeout;\n\t\t// 如果定时器不存在就创建一个\n\t\tif (!timeout) {\n\t\t\ttimeout = setTimeout(run, wait);\n\t\t}\n\t\tif (callNow) {\n\t\t\t// 如果需要立即执行函数的话 通过 apply 执行\n\t\t\tresult = func.apply(context, args);\n\t\t\tcontext = args = null;\n\t\t}\n\t\treturn result;\n\t};\n\n\treturn debounce;\n};","export type Pos = {\n  start: number;\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n  index: number;\n\n  constructor(line: number, col: number, index: number) {\n    this.line = line;\n    this.column = col;\n    this.index = index;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: string | undefined | null;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column, index } = position;\n  return new Position(line, column + columnOffset, index + columnOffset);\n}\n","export const enum ParseErrorCode {\n  SyntaxError = \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError = \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n}\n\nexport type SyntaxPlugin =\n  | \"flow\"\n  | \"typescript\"\n  | \"jsx\"\n  | \"pipelineOperator\"\n  | \"placeholders\";\n\nexport type ToMessage<ErrorDetails> = (self: ErrorDetails) => string;\n\nexport type ParseErrorCredentials<ErrorDetails> = {\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  toMessage: ToMessage<ErrorDetails>;\n};\n\nconst reflect = (keys: string[], last = keys.length - 1) => ({\n  get(this: unknown): unknown {\n    return keys.reduce(\n      (object, key) =>\n        // @ts-expect-error key should index object\n        object[key],\n      this,\n    );\n  },\n  set(this: unknown, value: unknown) {\n    keys.reduce(\n      // @ts-expect-error key should index item\n      (item, key, i) => (i === last ? (item[key] = value) : item[key]),\n      this,\n    );\n  },\n});\n\nconst instantiate = <T>(\n  constructor: new () => T,\n  properties: any,\n  descriptors: any,\n) =>\n  Object.keys(descriptors)\n    .map(key => [key, descriptors[key]])\n    .filter(([, descriptor]) => !!descriptor)\n    .map(([key, descriptor]) => [\n      key,\n      typeof descriptor === \"function\"\n        ? { value: descriptor, enumerable: false }\n        : typeof descriptor.reflect === \"string\"\n        ? { ...descriptor, ...reflect(descriptor.reflect.split(\".\")) }\n        : descriptor,\n    ])\n    .reduce(\n      (instance, [key, descriptor]) =>\n        Object.defineProperty(instance, key, {\n          configurable: true,\n          ...descriptor,\n        }),\n      Object.assign(new constructor(), properties),\n    );\n\nexport { instantiate };\n","import { ParseErrorCode } from \"../parse-error\";\n\nexport default {\n  ImportMetaOutsideModule: {\n    message: `import.meta may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n  ImportOutsideModule: {\n    message: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n    code: ParseErrorCode.SourceTypeModuleError,\n  },\n};\n","const NodeDescriptions = {\n  ArrayPattern: \"array destructuring pattern\",\n  AssignmentExpression: \"assignment expression\",\n  AssignmentPattern: \"assignment expression\",\n  ArrowFunctionExpression: \"arrow function expression\",\n  ConditionalExpression: \"conditional expression\",\n  CatchClause: \"catch clause\",\n  ForOfStatement: \"for-of statement\",\n  ForInStatement: \"for-in statement\",\n  ForStatement: \"for-loop\",\n  FormalParameters: \"function parameter list\",\n  Identifier: \"identifier\",\n  ImportSpecifier: \"import specifier\",\n  ImportDefaultSpecifier: \"import default specifier\",\n  ImportNamespaceSpecifier: \"import namespace specifier\",\n  ObjectPattern: \"object destructuring pattern\",\n  ParenthesizedExpression: \"parenthesized expression\",\n  RestElement: \"rest element\",\n  UpdateExpression: {\n    true: \"prefix operation\",\n    false: \"postfix operation\",\n  },\n  VariableDeclarator: \"variable declaration\",\n  YieldExpression: \"yield expression\",\n};\n\ntype NodeTypesWithDescriptions = keyof Omit<\n  typeof NodeDescriptions,\n  \"UpdateExpression\"\n>;\n\ntype NodeWithDescription =\n  | {\n      type: \"UpdateExpression\";\n      prefix: boolean;\n    }\n  | {\n      type: NodeTypesWithDescriptions;\n    };\n\n// @ts-expect-error prefix is specified only when type is UpdateExpression\n// eslint-disable-next-line no-confusing-arrow\nconst toNodeDescription = ({ type, prefix }: NodeWithDescription) =>\n  type === \"UpdateExpression\"\n    ? NodeDescriptions.UpdateExpression[String(prefix) as \"true\" | \"false\"]\n    : NodeDescriptions[type];\n\nexport default toNodeDescription;\n","import toNodeDescription from \"./to-node-description\";\n\nexport type LValAncestor =\n  | { type: \"UpdateExpression\"; prefix: boolean }\n  | {\n      type:\n        | \"ArrayPattern\"\n        | \"AssignmentExpression\"\n        | \"CatchClause\"\n        | \"ForOfStatement\"\n        | \"FormalParameters\"\n        | \"ForInStatement\"\n        | \"ForStatement\"\n        | \"ImportSpecifier\"\n        | \"ImportNamespaceSpecifier\"\n        | \"ImportDefaultSpecifier\"\n        | \"ObjectPattern\"\n        | \"RestElement\"\n        | \"VariableDeclarator\";\n    };\n\nexport default {\n  AccessorIsGenerator: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `A ${kind}ter cannot be a generator.`,\n  ArgumentsInClass:\n    \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext:\n    \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier:\n    \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock:\n    \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter:\n    \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext:\n    \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter:\n    \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField:\n    \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: ({\n    kind,\n  }: {\n    kind: \"const\" | \"destructuring\";\n  }) => `Missing initializer in ${kind} declaration.`,\n  DecoratorArgumentsOutsideParentheses:\n    \"Decorator arguments must be moved inside parentheses: use '@(decorator(args))' instead of '@(decorator)(args)'.\",\n  DecoratorBeforeExport:\n    \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor:\n    \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass:\n    \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport:\n    \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: ({ exportName }: { exportName: string }) =>\n    `\\`${exportName}\\` has already been exported. Exported identifiers must be unique.`,\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: ({\n    localName,\n    exportName,\n  }: {\n    localName: string;\n    exportName: string;\n  }) =>\n    `A string literal cannot be used as an exported binding without \\`from\\`.\\n- Did you mean \\`export { '${localName}' as '${exportName}' } from 'some-module'\\`?`,\n  ExportDefaultFromAsIdentifier:\n    \"'from' is not allowed as an identifier after 'export default'.\",\n\n  ForInOfLoopInitializer: ({\n    type,\n  }: {\n    type: \"ForInStatement\" | \"ForOfStatement\";\n  }) =>\n    `'${\n      type === \"ForInStatement\" ? \"for-in\" : \"for-of\"\n    }' loop variable declaration may not have an initializer.`,\n\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext:\n    \"Generators can only be declared at the top level or inside a block.\",\n\n  IllegalBreakContinue: ({\n    type,\n  }: {\n    type: \"BreakStatement\" | \"ContinueStatement\";\n  }) => `Unsyntactic ${type === \"BreakStatement\" ? \"break\" : \"continue\"}.`,\n\n  IllegalLanguageModeDirective:\n    \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: ({ importName }: { importName: string }) =>\n    `A string literal cannot be used as an imported binding.\\n- Did you mean \\`import { \"${importName}\" as foo }\\`?`,\n  ImportCallArgumentTrailingComma:\n    \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: ({ maxArgumentCount }: { maxArgumentCount: 1 | 2 }) =>\n    `\\`import()\\` requires exactly ${\n      maxArgumentCount === 1 ? \"one argument\" : \"one or two arguments\"\n    }.`,\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  ImportJSONBindingNotDefault:\n    \"A JSON module can only be imported with `default`.\",\n  IncompatibleRegExpUVFlags:\n    \"The 'u' and 'v' regular expression flags cannot be enabled at the same time.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: ({ radix }: { radix: number }) =>\n    `Expected number in radix ${radix}.`,\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Escape sequence in keyword ${reservedWord}.`,\n  InvalidIdentifier: ({ identifierName }: { identifierName: string }) =>\n    `Invalid identifier ${identifierName}.`,\n  InvalidLhs: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidLhsBinding: ({ ancestor }: { ancestor: LValAncestor }) =>\n    `Binding invalid left-hand side in ${toNodeDescription(ancestor)}.`,\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent:\n    \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: ({ unexpected }: { unexpected: string }) =>\n    `Unexpected character '${unexpected}'.`,\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: ({\n    identifierName,\n  }: {\n    identifierName: string;\n  }) => `Private name #${identifierName} is not defined.`,\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty:\n    \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: ({ labelName }: { labelName: string }) =>\n    `Label '${labelName}' is already declared.`,\n  LetInLexicalBinding:\n    \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment:\n    \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingPlugin: ({ missingPlugin }: { missingPlugin: [string] }) =>\n    `This experimental syntax requires enabling the parser plugin: ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  // FIXME: Would be nice to make this \"missingPlugins\" instead.\n  // Also, seems like we can drop the \"(s)\" from the message and just make it \"s\".\n  MissingOneOfPlugins: ({ missingPlugin }: { missingPlugin: string[] }) =>\n    `This experimental syntax requires enabling one of the following parser plugin(s): ${missingPlugin\n      .map(name => JSON.stringify(name))\n      .join(\", \")}.`,\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical:\n    \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType:\n    \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue:\n    \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: ({ key }: { key: string }) =>\n    `Duplicate key \"${key}\" is not allowed in module attributes.`,\n  ModuleExportNameHasLoneSurrogate: ({\n    surrogateCharCode,\n  }: {\n    surrogateCharCode: number;\n  }) =>\n    `An export name cannot include a lone surrogate, found '\\\\u${surrogateCharCode.toString(\n      16,\n    )}'.`,\n  ModuleExportUndefined: ({ localName }: { localName: string }) =>\n    `Export '${localName}' is not defined.`,\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence:\n    \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar:\n    \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew:\n    \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate:\n    \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor:\n    \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PrivateInExpectedIn: ({ identifierName }: { identifierName: string }) =>\n    `Private names are only allowed in property accesses (\\`obj.#${identifierName}\\`) or in \\`in\\` expressions (\\`#${identifierName} in obj\\`).`,\n  PrivateNameRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Duplicate private name #${identifierName}.`,\n  RecordExpressionBarIncorrectEndSyntaxType:\n    \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType:\n    \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType:\n    \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction:\n    \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  SuperNotAllowed:\n    \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType:\n    \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType:\n    \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody:\n    'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport:\n    \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: ({ keyword }: { keyword: string }) =>\n    `Unexpected keyword '${keyword}'.`,\n  UnexpectedLeadingDecorator:\n    \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration:\n    \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget:\n    \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator:\n    \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: ({ reservedWord }: { reservedWord: string }) =>\n    `Unexpected reserved word '${reservedWord}'.`,\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: ({\n    expected,\n    unexpected,\n  }: {\n    expected?: string | null;\n    unexpected?: string | null;\n  }) =>\n    `Unexpected token${unexpected ? ` '${unexpected}'.` : \"\"}${\n      expected ? `, expected \"${expected}\"` : \"\"\n    }`,\n  UnexpectedTokenUnaryExponentiation:\n    \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport:\n    \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport:\n    \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport:\n    \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: ({\n    target,\n    onlyValidPropertyName,\n  }: {\n    target: string;\n    onlyValidPropertyName: string;\n  }) =>\n    `The only valid meta property for ${target} is ${target}.${onlyValidPropertyName}.`,\n  UnsupportedParameterDecorator:\n    \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator:\n    \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper:\n    \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: ({ identifierName }: { identifierName: string }) =>\n    `Identifier '${identifierName}' has already been declared.`,\n  YieldBindingIdentifier:\n    \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator:\n    \"Numeric separator can not be used after leading 0.\",\n};\n","export default {\n  StrictDelete: \"Deleting local variable in strict mode.\",\n\n  // `referenceName` is the StringValue[1] of an IdentifierReference[2], which\n  // is represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-IdentifierReference\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArguments: ({ referenceName }: { referenceName: string }) =>\n    `Assigning to '${referenceName}' in strict mode.`,\n\n  // `bindingName` is the StringValue[1] of a BindingIdentifier[2], which is\n  // represented as just an `Identifier`[3] in the Babel AST.\n  // 1. https://tc39.es/ecma262/#sec-static-semantics-stringvalue\n  // 2. https://tc39.es/ecma262/#prod-BindingIdentifier\n  // 3. https://github.com/babel/babel/blob/main/packages/babel-parser/ast/spec.md#identifier\n  StrictEvalArgumentsBinding: ({ bindingName }: { bindingName: string }) =>\n    `Binding '${bindingName}' in strict mode.`,\n\n  StrictFunction:\n    \"In strict mode code, functions can only be declared at top level or inside a block.\",\n\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n\n  StrictWith: \"'with' in strict mode.\",\n};\n","import toNodeDescription from \"./to-node-description\";\n\nexport const UnparenthesizedPipeBodyDescriptions = new Set([\n  \"ArrowFunctionExpression\",\n  \"AssignmentExpression\",\n  \"ConditionalExpression\",\n  \"YieldExpression\",\n] as const);\n\ntype GetSetMemberType<T extends Set<any>> = T extends Set<infer M>\n  ? M\n  : unknown;\n\ntype UnparanthesizedPipeBodyTypes = GetSetMemberType<\n  typeof UnparenthesizedPipeBodyDescriptions\n>;\n\nexport default {\n  // This error is only used by the smart-mix proposal\n  PipeBodyIsTighter:\n    \"Unexpected yield after pipeline body; any yield expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound:\n    \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: ({ token }: { token: string }) =>\n    `Invalid topic token ${token}. In order to use ${token} as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"${token}\" }.`,\n  PipeTopicUnused:\n    \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: ({ type }: { type: UnparanthesizedPipeBodyTypes }) =>\n    `Hack-style pipe body cannot be an unparenthesized ${toNodeDescription({\n      type,\n    })}; please wrap it in parentheses.`,\n\n  // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n  // are retained for backwards compatibility\n  // with the deprecated smart-mix pipe operator proposal plugin.\n  // They are subject to removal in a future major version.\n  PipelineBodyNoArrow:\n    'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression:\n    \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression:\n    \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused:\n    \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed:\n    \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline:\n    'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n};\n","import { Position } from \"./util/location\";\nimport {\n  instantiate,\n  ParseErrorCode,\n  type ParseErrorCredentials,\n  type ToMessage,\n  type SyntaxPlugin,\n} from \"./parse-error/credentials\";\nimport type { Undone } from \"./parser/node\";\nimport type { Node } from \"./types\";\n\n// Babel uses \"normal\" SyntaxErrors for it's errors, but adds some extra\n// functionality. This functionality is defined in the\n// `ParseErrorSpecification` interface below. We may choose to change to someday\n// give our errors their own full-blown class, but until then this allow us to\n// keep all the desirable properties of SyntaxErrors (like their name in stack\n// traces, etc.), and also allows us to punt on any publicly facing\n// class-hierarchy decisions until Babel 8.\ninterface ParseErrorSpecification<ErrorDetails> {\n  // Look, these *could* be readonly, but then Flow complains when we initially\n  // set them. We could do a whole dance and make a special interface that's not\n  // readonly for when we create the error, then cast it to the readonly\n  // interface for public use, but the previous implementation didn't have them\n  // as readonly, so let's just not worry about it for now.\n  code: ParseErrorCode;\n  reasonCode: string;\n  syntaxPlugin?: SyntaxPlugin;\n  missingPlugin?: string | string[];\n  loc: Position;\n  details: ErrorDetails;\n\n  // We should consider removing this as it now just contains the same\n  // information as `loc.index`.\n  // pos: number;\n}\n\nexport type ParseError<ErrorDetails> = SyntaxError &\n  ParseErrorSpecification<ErrorDetails>;\n\n// By `ParseErrorConstructor`, we mean something like the new-less style\n// `ErrorConstructor`[1], since `ParseError`'s are not themselves actually\n// separate classes from `SyntaxError`'s.\n//\n// 1. https://github.com/microsoft/TypeScript/blob/v4.5.5/lib/lib.es5.d.ts#L1027\nexport type ParseErrorConstructor<ErrorDetails> = (a: {\n  loc: Position;\n  details: ErrorDetails;\n}) => ParseError<ErrorDetails>;\n\nfunction toParseErrorConstructor<ErrorDetails>({\n  toMessage,\n  ...properties\n}: ParseErrorCredentials<ErrorDetails>): ParseErrorConstructor<ErrorDetails> {\n  type ConstructorArgument = {\n    loc: Position;\n    details: ErrorDetails;\n  };\n\n  return function constructor({ loc, details }: ConstructorArgument) {\n    return instantiate(\n      SyntaxError,\n      { ...properties, loc },\n      {\n        clone(\n          overrides: {\n            loc?: Position;\n            details?: ErrorDetails;\n          } = {},\n        ) {\n          const loc = (overrides.loc || {}) as Partial<Position>;\n          return constructor({\n            loc: new Position(\n              \"line\" in loc ? loc.line : this.loc.line,\n              \"column\" in loc ? loc.column : this.loc.column,\n              \"index\" in loc ? loc.index : this.loc.index,\n            ),\n            details: { ...this.details, ...overrides.details },\n          });\n        },\n        details: { value: details, enumerable: false },\n        message: {\n          get(this: ConstructorArgument): string {\n            return `${toMessage(this.details)} (${this.loc.line}:${\n              this.loc.column\n            })`;\n          },\n          set(value: string) {\n            Object.defineProperty(this, \"message\", { value });\n          },\n        },\n        pos: { reflect: \"loc.index\", enumerable: true },\n        missingPlugin: \"missingPlugin\" in details && {\n          reflect: \"details.missingPlugin\",\n          enumerable: true,\n        },\n      },\n    ) as ParseError<ErrorDetails>;\n  };\n}\n\ntype ParseErrorTemplate =\n  | string\n  | ToMessage<any>\n  | { message: string | ToMessage<any> };\n\ntype ParseErrorTemplates = { [reasonCode: string]: ParseErrorTemplate };\n\n// This is the templated form of `ParseErrorEnum`.\n//\n// Note: We could factor out the return type calculation into something like\n// `ParseErrorConstructor<T extends ParseErrorTemplates>`, and then we could\n// reuse it in the non-templated form of `ParseErrorEnum`, but TypeScript\n// doesn't seem to drill down that far when showing you the computed type of\n// an object in an editor, so we'll leave it inlined for now.\nexport function ParseErrorEnum(a: TemplateStringsArray): <\n  T extends ParseErrorTemplates,\n>(\n  parseErrorTemplates: T,\n) => {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\nexport function ParseErrorEnum<T extends ParseErrorTemplates>(\n  parseErrorTemplates: T,\n  syntaxPlugin?: SyntaxPlugin,\n): {\n  [K in keyof T]: ParseErrorConstructor<\n    T[K] extends { message: string | ToMessage<any> }\n      ? T[K][\"message\"] extends ToMessage<any>\n        ? Parameters<T[K][\"message\"]>[0]\n        : {}\n      : T[K] extends ToMessage<any>\n      ? Parameters<T[K]>[0]\n      : {}\n  >;\n};\n\n// You call `ParseErrorEnum` with a mapping from `ReasonCode`'s to either:\n//\n// 1. a static error message,\n// 2. `toMessage` functions that define additional necessary `details` needed by\n//    the `ParseError`, or\n// 3. Objects that contain a `message` of one of the above and overridden `code`\n//    and/or `reasonCode`:\n//\n// ParseErrorEnum `optionalSyntaxPlugin` ({\n//   ErrorWithStaticMessage: \"message\",\n//   ErrorWithDynamicMessage: ({ type } : { type: string }) => `${type}`),\n//   ErrorWithOverriddenCodeAndOrReasonCode: {\n//     message: ({ type }: { type: string }) => `${type}`),\n//     code: ParseErrorCode.SourceTypeModuleError,\n//     ...(BABEL_8_BREAKING ? { } : { reasonCode: \"CustomErrorReasonCode\" })\n//   }\n// });\n//\nexport function ParseErrorEnum(\n  argument: TemplateStringsArray | ParseErrorTemplates,\n  syntaxPlugin?: SyntaxPlugin,\n) {\n  // If the first parameter is an array, that means we were called with a tagged\n  // template literal. Extract the syntaxPlugin from this, and call again in\n  // the \"normalized\" form.\n  if (Array.isArray(argument)) {\n    return (parseErrorTemplates: ParseErrorTemplates) =>\n      ParseErrorEnum(parseErrorTemplates, argument[0]);\n  }\n\n  const ParseErrorConstructors = {} as Record<\n    string,\n    ParseErrorConstructor<unknown>\n  >;\n\n  for (const reasonCode of Object.keys(argument)) {\n    const template = (argument as ParseErrorTemplates)[reasonCode];\n    const { message, ...rest } =\n      typeof template === \"string\"\n        ? { message: () => template }\n        : typeof template === \"function\"\n        ? { message: template }\n        : template;\n    const toMessage = typeof message === \"string\" ? () => message : message;\n\n    ParseErrorConstructors[reasonCode] = toParseErrorConstructor({\n      code: ParseErrorCode.SyntaxError,\n      reasonCode,\n      toMessage,\n      ...(syntaxPlugin ? { syntaxPlugin } : {}),\n      ...rest,\n    });\n  }\n\n  return ParseErrorConstructors;\n}\n\nexport type RaiseProperties<ErrorDetails> = {\n  at: Position | Undone<Node>;\n} & ErrorDetails;\n\nimport ModuleErrors from \"./parse-error/module-errors\";\nimport StandardErrors from \"./parse-error/standard-errors\";\nimport StrictModeErrors from \"./parse-error/strict-mode-errors\";\nimport PipelineOperatorErrors from \"./parse-error/pipeline-operator-errors\";\n\nexport const Errors = {\n  ...ParseErrorEnum(ModuleErrors),\n  ...ParseErrorEnum(StandardErrors),\n  ...ParseErrorEnum(StrictModeErrors),\n  ...ParseErrorEnum`pipelineOperator`(PipelineOperatorErrors),\n};\n\nexport type { LValAncestor } from \"./parse-error/standard-errors\";\n\nexport * from \"./parse-error/credentials\";\n","import { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type * as N from \"../types\";\nimport type { Node as NodeType, NodeBase, File } from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { BindingTypes } from \"../util/scopeflags\";\n\nconst { defineProperty } = Object;\nconst toUnenumerable = (object: any, key: string) =>\n  defineProperty(object, key, { enumerable: false, value: object[key] });\n\nfunction toESTreeLocation(node: any) {\n  node.loc.start && toUnenumerable(node.loc.start, \"index\");\n  node.loc.end && toUnenumerable(node.loc.end, \"index\");\n\n  return node;\n}\n\nexport default (superClass: typeof Parser) =>\n  class ESTreeParserMixin extends superClass implements Parser {\n    parse(): File {\n      const file = toESTreeLocation(super.parse());\n\n      if (this.options.tokens) {\n        file.tokens = file.tokens.map(toESTreeLocation);\n      }\n\n      return file;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseRegExpLiteral({ pattern, flags }): N.EstreeRegExpLiteral {\n      let regex: RegExp | null = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt: BigInt | null;\n      try {\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal: null = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T extends N.Node>(value: any) {\n      // @ts-expect-error ESTree plugin changes node types\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    // @ts-expect-error ESTree plugin changes node types\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    // Cast a Directive to an ExpressionStatement. Mutates the input Directive.\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const expression = directive.value as any as N.EstreeLiteral;\n      delete directive.value;\n\n      expression.type = \"Literal\";\n      // @ts-expect-error N.EstreeLiteral.raw is not defined.\n      expression.raw = expression.extra.raw;\n      expression.value = expression.extra.expressionValue;\n\n      const stmt = directive as any as N.ExpressionStatement;\n      stmt.type = \"ExpressionStatement\";\n      stmt.expression = expression;\n      // @ts-expect-error N.ExpressionStatement.directive is not defined\n      stmt.directive = expression.extra.rawValue;\n\n      delete expression.extra;\n\n      return stmt;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync?: boolean | null,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        // @ts-expect-error plugin typings\n        this.checkDeclaration((node as unknown as N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return (method as any as N.EstreeProperty | N.EstreeMethodDefinition)\n        .value.params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      allowDirectives: boolean | undefined | null,\n      topLevel: boolean,\n      end: TokenType,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): void {\n      super.parseBlockBody(\n        node,\n        allowDirectives,\n        topLevel,\n        end,\n        afterBlockParse,\n      );\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      // @ts-expect-error estree plugin typings\n      node.body = directiveStatements.concat(node.body);\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // @ts-expect-error mutate AST types\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = node as any;\n      delete node.id;\n      // @ts-expect-error mutate AST types\n      node.name = name;\n      // @ts-expect-error mutate AST types\n      node.type = \"PrivateIdentifier\";\n      return node as unknown as N.EstreePrivateIdentifier;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseLiteral<T extends N.Literal>(value: any, type: T[\"type\"]): T {\n      const node = super.parseLiteral<T>(value, type);\n      // @ts-expect-error mutating AST types\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    // @ts-expect-error plugin may override interfaces\n    parseMethod<\n      T extends N.ClassPrivateMethod | N.ObjectMethod | N.ClassMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope: boolean = false,\n    ): N.EstreeMethodDefinition {\n      let funcNode = this.startNode<N.MethodLike>();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        // @ts-expect-error todo(flow->ts)\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error mutate AST types\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // @ts-expect-error mutate AST types\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        node.computed = false;\n      }\n      return this.finishNode(\n        // @ts-expect-error cast methods to estree types\n        node as Undone<N.EstreeMethodDefinition>,\n        \"MethodDefinition\",\n      );\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = super.parseClassProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = super.parseClassPrivateProperty(...args) as any;\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return propertyNode as N.EstreePropertyDefinition;\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return propertyNode as N.EstreePropertyDefinition;\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): N.ObjectMethod | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) as any;\n\n      if (node) {\n        node.type = \"Property\";\n        if ((node as any as N.ClassMethod).kind === \"method\") {\n          node.kind = \"init\";\n        }\n        node.shorthand = false;\n      }\n\n      return node as any;\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isPattern: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectProperty | undefined | null {\n      const node: N.EstreeProperty = super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ) as any;\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return node as any;\n    }\n\n    isValidLVal(\n      type: string,\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return type === \"Property\"\n        ? \"value\"\n        : super.isValidLVal(type, isUnparenthesizedInAssign, binding);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (node != null && this.isObjectProperty(node)) {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableObjectExpressionProp(\n      prop: N.Node,\n      isLast: boolean,\n      isLHS: boolean,\n    ) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(Errors.PatternHasAccessor, { at: prop.key });\n      } else if (prop.method) {\n        this.raise(Errors.PatternHasMethod, { at: prop.key });\n      } else {\n        super.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n      }\n    }\n\n    finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n      unfinished: Undone<T>,\n      optional: boolean,\n    ): T {\n      const node = super.finishCallExpression(unfinished, optional);\n\n      if (node.callee.type === \"Import\") {\n        (node as N.Node as N.EstreeImportExpression).type = \"ImportExpression\";\n        (node as N.Node as N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          (node as N.Node as N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // arguments isn't optional in the type definition\n        delete node.arguments;\n        // callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(unfinished: Undone<N.AnyExport>) {\n      const node = super.parseExport(unfinished);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          // @ts-expect-error mutating AST types\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            // @ts-expect-error mutating AST types\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            // @ts-expect-error mutating AST types\n            node.type = \"ExportAllDeclaration\";\n            // @ts-expect-error mutating AST types\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node as N.AnyExport;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    // @ts-expect-error override interfaces\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n\n    finishNodeAt<T extends NodeType>(\n      node: Undone<T>,\n      type: T[\"type\"],\n      endLoc: Position,\n    ): T {\n      return toESTreeLocation(super.finishNodeAt(node, type, endLoc));\n    }\n\n    resetStartLocation(node: N.Node, start: number, startLoc: Position) {\n      super.resetStartLocation(node, start, startLoc);\n      toESTreeLocation(node);\n    }\n\n    resetEndLocation(\n      node: NodeBase,\n      endLoc: Position = this.state.lastTokEndLoc,\n    ): void {\n      super.resetEndLocation(node, endLoc);\n      toESTreeLocation(node);\n    }\n  };\n","// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext;\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX opening tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","import { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string;\n  beforeExpr?: boolean;\n  startsExpr?: boolean;\n  rightAssociative?: boolean;\n  isLoop?: boolean;\n  isAssign?: boolean;\n  prefix?: boolean;\n  postfix?: boolean;\n  binop?: number | null;\n};\n\n// Internally the tokenizer stores token as a number\nexport type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: string | undefined | null;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: number | undefined | null;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext:\n    | ((context: Array<TokContext>) => void)\n    | undefined\n    | null;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport type InternalTokenTypes = {\n  [name: string]: TokenType;\n};\n\nexport const tt: InternalTokenTypes = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\"),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token.\n  // When the proposal settles on a token, the others can be merged with\n  // tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n\n  // More possible topic tokens.\n  // When the proposal settles on a token, at least one of these may be removed.\n  doubleCaret: createToken(\"^^\", { startsExpr }),\n  doubleAt: createToken(\"@@\", { startsExpr }),\n\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  bitShiftL: createBinop(\"<</>>/>>>\", 8),\n  bitShiftR: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsBinaryOperator(token: TokenType): boolean {\n  return tokenBinops[token] !== -1;\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0cf3\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ece\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,20,1,64,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,16,0,2,12,2,33,125,0,80,921,103,110,18,195,2637,96,16,1071,18,5,4026,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,16,0,30,2,3,0,15,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,7,5,262,61,147,44,11,6,17,0,322,29,19,43,485,27,757,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4153,7,221,3,5761,15,7472,3104,541,1507,4938,6,4191];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,81,2,71,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,3,0,158,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,10,1,2,0,49,6,4,4,14,9,5351,0,7,14,13835,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,101,0,161,6,10,9,357,0,62,13,499,13,983,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart } from \"@babel/helper-validator-identifier\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(\n  current: number,\n  next: number,\n  next2: number,\n): boolean {\n  return (\n    current === charCodes.atSign &&\n    next === charCodes.atSign &&\n    isIdentifierStart(next2)\n  );\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b0000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b0000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b0000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b0001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b0010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b0100000_0000_00,\n             BIND_FLAGS_TS_IMPORT       = 0b1000000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM    | BIND_FLAGS_TS_CONST_ENUM                                 ,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0                   | BIND_FLAGS_TS_EXPORT_ONLY,\n             BIND_TS_TYPE_IMPORT= 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_TS_IMPORT,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","import {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport type * as N from \"../types\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope extends Scope = Scope> {\n  parser: Tokenizer;\n  scopeStack: Array<IScope> = [];\n  inModule: boolean;\n  undefinedExports: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer, inModule: boolean) {\n    this.parser = parser;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n\n  enter(flags: ScopeFlags) {\n    /*:: +createScope: (flags: ScopeFlags) => IScope; */\n    // @ts-expect-error This method will be overwritten by subclasses\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit(): ScopeFlags {\n    const scope = this.scopeStack.pop();\n    return scope.flags;\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & (SCOPE_FUNCTION | SCOPE_STATIC_BLOCK) ||\n      (!this.parser.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.parser.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    loc: Position,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.parser.raise(Errors.VarRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.loc.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, loc);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(scope, name, bindingType)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","import type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"../typings\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<any>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: string | undefined | null;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(\n        pluginOptions,\n      ) as (keyof typeof pluginOptions)[]) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption<\n    PluginName extends ParserPluginWithOptions[0],\n    OptionName extends keyof PluginOptions<PluginName>,\n  >(plugin: PluginName, name: OptionName) {\n    return (this.plugins.get(plugin) as null | PluginOptions<PluginName>)?.[\n      name\n    ];\n  }\n}\n","/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport type { Undone } from \"./node\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number;\n  end: number;\n  comments: Array<Comment>;\n  leadingNode: Node | null;\n  trailingNode: Node | null;\n  containingNode: Node | null;\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Undone<Node>, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Undone<Node>} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(\n  node: Undone<Node>,\n  comments?: Array<Comment>,\n) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Undone<Node>} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Undone<Node>,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaining commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterpret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","import * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { Errors } from \"../parse-error\";\nimport { type ParseError } from \"../parse-error\";\n\nexport type DeferredStrictError =\n  | typeof Errors.StrictNumericEscape\n  | typeof Errors.StrictOctalLiteral;\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number;\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0;\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn, 0);\n  }\n\n  errors: ParseError<any>[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n  inDisallowConditionalTypesContext: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: \"loop\" | \"switch\" | undefined | null;\n    name?: string | null;\n    statementStart?: number;\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // Used to track invalid escape sequences in template literals,\n  // that must be reported if the template is not tagged.\n  firstInvalidTemplateEscapePos: null | Position = null;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, [DeferredStrictError, Position]> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart, this.pos);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this) as (keyof State)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // @ts-expect-error val must conform to S[key]\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number;\n  value: any;\n  type: TokenType;\n  start: number;\n  end: number;\n  context: TokContext[];\n  startLoc: Position;\n  lastTokEndLoc: Position;\n  curLine: number;\n  lineStart: number;\n  curPosition: () => Position;\n  /* Used only in readToken_mult_modulo */\n  inType: boolean;\n};\n","import * as charCodes from \"charcodes\";\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ]),\n  hex: new Set<number>([\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ]),\n};\n\nconst isAllowedNumericSeparatorSibling = {\n  // 0 - 1\n  bin: (ch: number) => ch === charCodes.digit0 || ch === charCodes.digit1,\n\n  // 0 - 7\n  oct: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit7,\n\n  // 0 - 9\n  dec: (ch: number) => ch >= charCodes.digit0 && ch <= charCodes.digit9,\n\n  // 0 - 9, A - F, a - f,\n  hex: (ch: number) =>\n    (ch >= charCodes.digit0 && ch <= charCodes.digit9) ||\n    (ch >= charCodes.uppercaseA && ch <= charCodes.uppercaseF) ||\n    (ch >= charCodes.lowercaseA && ch <= charCodes.lowercaseF),\n};\n\nexport type StringContentsErrorHandlers = EscapedCharErrorHandlers & {\n  unterminated(\n    initialPos: number,\n    initialLineStart: number,\n    initialCurLine: number,\n  ): void;\n};\n\nexport function readStringContents(\n  type: \"single\" | \"double\" | \"template\",\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  errors: StringContentsErrorHandlers,\n) {\n  const initialPos = pos;\n  const initialLineStart = lineStart;\n  const initialCurLine = curLine;\n\n  let out = \"\";\n  let firstInvalidLoc = null;\n  let chunkStart = pos;\n  const { length } = input;\n  for (;;) {\n    if (pos >= length) {\n      errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    const ch = input.charCodeAt(pos);\n    if (isStringEnd(type, ch, input, pos)) {\n      out += input.slice(chunkStart, pos);\n      break;\n    }\n    if (ch === charCodes.backslash) {\n      out += input.slice(chunkStart, pos);\n      const res = readEscapedChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        type === \"template\",\n        errors,\n      );\n      if (res.ch === null && !firstInvalidLoc) {\n        firstInvalidLoc = { pos, lineStart, curLine };\n      } else {\n        out += res.ch;\n      }\n      ({ pos, lineStart, curLine } = res);\n      chunkStart = pos;\n    } else if (\n      ch === charCodes.lineSeparator ||\n      ch === charCodes.paragraphSeparator\n    ) {\n      ++pos;\n      ++curLine;\n      lineStart = pos;\n    } else if (ch === charCodes.lineFeed || ch === charCodes.carriageReturn) {\n      if (type === \"template\") {\n        out += input.slice(chunkStart, pos) + \"\\n\";\n        ++pos;\n        if (\n          ch === charCodes.carriageReturn &&\n          input.charCodeAt(pos) === charCodes.lineFeed\n        ) {\n          ++pos;\n        }\n        ++curLine;\n        chunkStart = lineStart = pos;\n      } else {\n        errors.unterminated(initialPos, initialLineStart, initialCurLine);\n      }\n    } else {\n      ++pos;\n    }\n  }\n  return {\n    pos,\n    str: out,\n    firstInvalidLoc,\n    lineStart,\n    curLine,\n\n    // TODO(Babel 8): This is only needed for backwards compatibility,\n    // we can remove it.\n    containsInvalid: !!firstInvalidLoc,\n  };\n}\n\nfunction isStringEnd(\n  type: \"single\" | \"double\" | \"template\",\n  ch: number,\n  input: string,\n  pos: number,\n) {\n  if (type === \"template\") {\n    return (\n      ch === charCodes.graveAccent ||\n      (ch === charCodes.dollarSign &&\n        input.charCodeAt(pos + 1) === charCodes.leftCurlyBrace)\n    );\n  }\n  return (\n    ch === (type === \"double\" ? charCodes.quotationMark : charCodes.apostrophe)\n  );\n}\n\ntype EscapedCharErrorHandlers = HexCharErrorHandlers &\n  CodePointErrorHandlers & {\n    strictNumericEscape(pos: number, lineStart: number, curLine: number): void;\n  };\n\nfunction readEscapedChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  inTemplate: boolean,\n  errors: EscapedCharErrorHandlers,\n) {\n  const throwOnInvalid = !inTemplate;\n  pos++; // skip '\\'\n\n  const res = (ch: string | null) => ({ pos, ch, lineStart, curLine });\n\n  const ch = input.charCodeAt(pos++);\n  switch (ch) {\n    case charCodes.lowercaseN:\n      return res(\"\\n\");\n    case charCodes.lowercaseR:\n      return res(\"\\r\");\n    case charCodes.lowercaseX: {\n      let code;\n      ({ code, pos } = readHexChar(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        2,\n        false,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCharCode(code));\n    }\n    case charCodes.lowercaseU: {\n      let code;\n      ({ code, pos } = readCodePoint(\n        input,\n        pos,\n        lineStart,\n        curLine,\n        throwOnInvalid,\n        errors,\n      ));\n      return res(code === null ? null : String.fromCodePoint(code));\n    }\n    case charCodes.lowercaseT:\n      return res(\"\\t\");\n    case charCodes.lowercaseB:\n      return res(\"\\b\");\n    case charCodes.lowercaseV:\n      return res(\"\\u000b\");\n    case charCodes.lowercaseF:\n      return res(\"\\f\");\n    case charCodes.carriageReturn:\n      if (input.charCodeAt(pos) === charCodes.lineFeed) {\n        ++pos;\n      }\n    // fall through\n    case charCodes.lineFeed:\n      lineStart = pos;\n      ++curLine;\n    // fall through\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return res(\"\");\n    case charCodes.digit8:\n    case charCodes.digit9:\n      if (inTemplate) {\n        return res(null);\n      } else {\n        errors.strictNumericEscape(pos - 1, lineStart, curLine);\n      }\n    // fall through\n    default:\n      if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n        const startPos = pos - 1;\n        const match = input.slice(startPos, pos + 2).match(/^[0-7]+/)!;\n\n        let octalStr = match[0];\n\n        let octal = parseInt(octalStr, 8);\n        if (octal > 255) {\n          octalStr = octalStr.slice(0, -1);\n          octal = parseInt(octalStr, 8);\n        }\n        pos += octalStr.length - 1;\n        const next = input.charCodeAt(pos);\n        if (\n          octalStr !== \"0\" ||\n          next === charCodes.digit8 ||\n          next === charCodes.digit9\n        ) {\n          if (inTemplate) {\n            return res(null);\n          } else {\n            errors.strictNumericEscape(startPos, lineStart, curLine);\n          }\n        }\n\n        return res(String.fromCharCode(octal));\n      }\n\n      return res(String.fromCharCode(ch));\n  }\n}\n\ntype HexCharErrorHandlers = IntErrorHandlers & {\n  invalidEscapeSequence(pos: number, lineStart: number, curLine: number): void;\n};\n\n// Used to read character escape sequences ('\\x', '\\u').\nfunction readHexChar(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  len: number,\n  forceLen: boolean,\n  throwOnInvalid: boolean,\n  errors: HexCharErrorHandlers,\n) {\n  const initialPos = pos;\n  let n;\n  ({ n, pos } = readInt(\n    input,\n    pos,\n    lineStart,\n    curLine,\n    16,\n    len,\n    forceLen,\n    false,\n    errors,\n    /* bailOnError */ !throwOnInvalid,\n  ));\n  if (n === null) {\n    if (throwOnInvalid) {\n      errors.invalidEscapeSequence(initialPos, lineStart, curLine);\n    } else {\n      pos = initialPos - 1;\n    }\n  }\n  return { code: n, pos };\n}\n\nexport type IntErrorHandlers = {\n  numericSeparatorInEscapeSequence(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  unexpectedNumericSeparator(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n  ): void;\n  // It can return \"true\" to indicate that the error was handled\n  // and the int parsing should continue.\n  invalidDigit(\n    pos: number,\n    lineStart: number,\n    curLine: number,\n    radix: number,\n  ): boolean;\n};\n\nexport function readInt(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  radix: number,\n  len: number | undefined,\n  forceLen: boolean,\n  allowNumSeparator: boolean | \"bail\",\n  errors: IntErrorHandlers,\n  bailOnError: boolean,\n) {\n  const start = pos;\n  const forbiddenSiblings =\n    radix === 16\n      ? forbiddenNumericSeparatorSiblings.hex\n      : forbiddenNumericSeparatorSiblings.decBinOct;\n  const isAllowedSibling =\n    radix === 16\n      ? isAllowedNumericSeparatorSibling.hex\n      : radix === 10\n      ? isAllowedNumericSeparatorSibling.dec\n      : radix === 8\n      ? isAllowedNumericSeparatorSibling.oct\n      : isAllowedNumericSeparatorSibling.bin;\n\n  let invalid = false;\n  let total = 0;\n\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    const code = input.charCodeAt(pos);\n    let val;\n\n    if (code === charCodes.underscore && allowNumSeparator !== \"bail\") {\n      const prev = input.charCodeAt(pos - 1);\n      const next = input.charCodeAt(pos + 1);\n\n      if (!allowNumSeparator) {\n        if (bailOnError) return { n: null, pos };\n        errors.numericSeparatorInEscapeSequence(pos, lineStart, curLine);\n      } else if (\n        Number.isNaN(next) ||\n        !isAllowedSibling(next) ||\n        forbiddenSiblings.has(prev) ||\n        forbiddenSiblings.has(next)\n      ) {\n        if (bailOnError) return { n: null, pos };\n        errors.unexpectedNumericSeparator(pos, lineStart, curLine);\n      }\n\n      // Ignore this _ character\n      ++pos;\n      continue;\n    }\n\n    if (code >= charCodes.lowercaseA) {\n      val = code - charCodes.lowercaseA + charCodes.lineFeed;\n    } else if (code >= charCodes.uppercaseA) {\n      val = code - charCodes.uppercaseA + charCodes.lineFeed;\n    } else if (charCodes.isDigit(code)) {\n      val = code - charCodes.digit0; // 0-9\n    } else {\n      val = Infinity;\n    }\n    if (val >= radix) {\n      // If we found a digit which is too big, errors.invalidDigit can return true to avoid\n      // breaking the loop (this is used for error recovery).\n      if (val <= 9 && bailOnError) {\n        return { n: null, pos };\n      } else if (\n        val <= 9 &&\n        errors.invalidDigit(pos, lineStart, curLine, radix)\n      ) {\n        val = 0;\n      } else if (forceLen) {\n        val = 0;\n        invalid = true;\n      } else {\n        break;\n      }\n    }\n    ++pos;\n    total = total * radix + val;\n  }\n  if (pos === start || (len != null && pos - start !== len) || invalid) {\n    return { n: null, pos };\n  }\n\n  return { n: total, pos };\n}\n\nexport type CodePointErrorHandlers = HexCharErrorHandlers & {\n  invalidCodePoint(pos: number, lineStart: number, curLine: number): void;\n};\n\nexport function readCodePoint(\n  input: string,\n  pos: number,\n  lineStart: number,\n  curLine: number,\n  throwOnInvalid: boolean,\n  errors: CodePointErrorHandlers,\n) {\n  const ch = input.charCodeAt(pos);\n  let code;\n\n  if (ch === charCodes.leftCurlyBrace) {\n    ++pos;\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      input.indexOf(\"}\", pos) - pos,\n      true,\n      throwOnInvalid,\n      errors,\n    ));\n    ++pos;\n    if (code !== null && code > 0x10ffff) {\n      if (throwOnInvalid) {\n        errors.invalidCodePoint(pos, lineStart, curLine);\n      } else {\n        return { code: null, pos };\n      }\n    }\n  } else {\n    ({ code, pos } = readHexChar(\n      input,\n      pos,\n      lineStart,\n      curLine,\n      4,\n      false,\n      throwOnInvalid,\n      errors,\n    ));\n  }\n  return { code, pos };\n}\n","/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport {\n  Position,\n  SourceLocation,\n  createPositionWithColumnOffset,\n} from \"../util/location\";\nimport CommentsParser, { type CommentWhitespace } from \"../parser/comments\";\nimport type * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n  type RaiseProperties,\n} from \"../parse-error\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState, DeferredStrictError } from \"./state\";\n\nimport {\n  readInt,\n  readCodePoint,\n  readStringContents,\n  type IntErrorHandlers,\n  type CodePointErrorHandlers,\n  type StringContentsErrorHandlers,\n} from \"@babel/helper-string-parser\";\n\nimport type { Plugin } from \"../typings\";\n\nfunction buildPosition(pos: number, lineStart: number, curLine: number) {\n  return new Position(curLine, pos - lineStart, pos);\n}\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n  // This is only valid when using the regexpUnicodeSets plugin\n  charCodes.lowercaseV,\n]);\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default abstract class Tokenizer extends CommentsParser {\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n      startLoc: state.startLoc,\n      lastTokEndLoc: state.lastTokEndLoc,\n      curLine: state.curLine,\n      lineStart: state.lineStart,\n      curPosition: state.curPosition,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // @ts-expect-error For performance we use a simplified tokenizer state structure\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach(([toParseError, at]) =>\n        this.raise(toParseError, { at }),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | undefined {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) {\n      // We have to call this again here because startLoc may not be set...\n      // This seems to be for performance reasons:\n      // https://github.com/babel/babel/commit/acf2a10899f696a8aaf34df78bf9725b5ea7f2da\n      throw this.raise(Errors.UnterminatedComment, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment: N.CommentBlock = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | undefined {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment: N.CommentLine = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const commentWhitespace: CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(commentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val?: any): void {\n    this.state.end = this.state.pos;\n    this.state.endLoc = this.state.curPosition();\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // @ts-expect-error the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(Errors.UnexpectedDigitAfterHash, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") === \"bar\") {\n        throw this.raise(\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n          { at: this.state.curPosition() },\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.RecordExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(Errors.TupleExpressionBarIncorrectEndSyntaxType, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^^'\n    else if (\n      next === charCodes.caret &&\n      // If the ^^ token is not enabled, we don't throw but parse two single ^s\n      // because it could be a ^ hack token followed by a ^ binary operator.\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"^^\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleCaret, 2);\n\n      // `^^^` is forbidden and must be separated by a space.\n      const lookaheadCh = this.input.codePointAt(this.state.pos);\n      if (lookaheadCh === charCodes.caret) {\n        throw this.unexpected();\n      }\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_atSign(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '@@'\n    if (\n      next === charCodes.atSign &&\n      this.hasPlugin([\n        \"pipelineOperator\",\n        { proposal: \"hack\", topicToken: \"@@\" },\n      ])\n    ) {\n      this.finishOp(tt.doubleAt, 2);\n    }\n    // '@'\n    else {\n      this.finishOp(tt.at, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShiftL, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShiftR, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n              { at: this.state.curPosition() },\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        this.readToken_atSign();\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(Errors.InvalidOrUnexpectedToken, {\n      at: this.state.curPosition(),\n      unexpected: String.fromCodePoint(code),\n    });\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const startLoc = this.state.startLoc;\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        // FIXME: explain\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(Errors.UnterminatedRegExp, {\n          at: createPositionWithColumnOffset(startLoc, 1),\n        });\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    const nextPos = () =>\n      // (pos + 1) + 1 - start\n      createPositionWithColumnOffset(startLoc, pos + 2 - start);\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      // @ts-expect-error VALID_REGEX_FLAGS.has should accept expanded type: number\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (cp === charCodes.lowercaseV) {\n          this.expectPlugin(\"regexpUnicodeSets\", nextPos());\n\n          if (mods.includes(\"u\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        } else if (cp === charCodes.lowercaseU) {\n          if (mods.includes(\"v\")) {\n            this.raise(Errors.IncompatibleRegExpUVFlags, { at: nextPos() });\n          }\n        }\n        if (mods.includes(char)) {\n          this.raise(Errors.DuplicateRegExpFlags, { at: nextPos() });\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(Errors.MalformedRegExpFlags, { at: nextPos() });\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen: boolean = false,\n    allowNumSeparator: boolean | \"bail\" = true,\n  ): number | null {\n    const { n, pos } = readInt(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      radix,\n      len,\n      forceLen,\n      allowNumSeparator,\n      this.errorHandlers_readInt,\n      /* bailOnError */ false,\n    );\n    this.state.pos = pos;\n    return n;\n  }\n\n  readRadixNumber(radix: number): void {\n    const startLoc = this.state.curPosition();\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(Errors.InvalidDigit, {\n        // Numeric literals can't have newlines, so this is safe to do.\n        at: createPositionWithColumnOffset(startLoc, 2),\n        radix,\n      });\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(Errors.InvalidDecimal, { at: startLoc });\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    if (isBigInt) {\n      const str = this.input\n        .slice(startLoc.index, this.state.pos)\n        .replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    const startLoc = this.state.curPosition();\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(Errors.InvalidNumber, { at: this.state.curPosition() });\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(Errors.StrictOctalLiteral, { at: startLoc });\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          // Numeric literals can't have newlines, so this is safe to do.\n          this.raise(Errors.ZeroDigitNumericSeparator, {\n            at: createPositionWithColumnOffset(startLoc, underscorePos),\n          });\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(Errors.InvalidOrMissingExponent, { at: startLoc });\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(Errors.InvalidBigIntLiteral, { at: startLoc });\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.curPosition());\n      if (hasExponent || hasLeadingZero) {\n        this.raise(Errors.InvalidDecimal, { at: startLoc });\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(Errors.NumberIdentifier, {\n        at: this.state.curPosition(),\n      });\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const { code, pos } = readCodePoint(\n      this.input,\n      this.state.pos,\n      this.state.lineStart,\n      this.state.curLine,\n      throwOnInvalid,\n      this.errorHandlers_readCodePoint,\n    );\n    this.state.pos = pos;\n    return code;\n  }\n\n  readString(quote: number): void {\n    const { str, pos, curLine, lineStart } = readStringContents(\n      quote === charCodes.quotationMark ? \"double\" : \"single\",\n      this.input,\n      this.state.pos + 1, // skip the quote\n      this.state.lineStart,\n      this.state.curLine,\n      this.errorHandlers_readStringContents_string,\n    );\n    this.state.pos = pos + 1; // skip the quote\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n    this.finishToken(tt.string, str);\n  }\n\n  // Reads template continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(null, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    const opening = this.input[this.state.pos];\n    const { str, firstInvalidLoc, pos, curLine, lineStart } =\n      readStringContents(\n        \"template\",\n        this.input,\n        this.state.pos + 1, // skip '`' or `}`\n        this.state.lineStart,\n        this.state.curLine,\n        this.errorHandlers_readStringContents_template,\n      );\n    this.state.pos = pos + 1; // skip '`' or `$`\n    this.state.lineStart = lineStart;\n    this.state.curLine = curLine;\n\n    if (firstInvalidLoc) {\n      this.state.firstInvalidTemplateEscapePos = new Position(\n        firstInvalidLoc.curLine,\n        firstInvalidLoc.pos - firstInvalidLoc.lineStart,\n        firstInvalidLoc.pos,\n      );\n    }\n\n    if (this.input.codePointAt(pos) === charCodes.graveAccent) {\n      this.finishToken(\n        tt.templateTail,\n        firstInvalidLoc ? null : opening + str + \"`\",\n      );\n    } else {\n      this.state.pos++; // skip '{'\n      this.finishToken(\n        tt.templateNonTail,\n        firstInvalidLoc ? null : opening + str + \"${\",\n      );\n    }\n  }\n\n  recordStrictModeErrors(\n    toParseError: DeferredStrictError,\n    { at }: { at: Position },\n  ) {\n    const index = at.index;\n\n    if (this.state.strict && !this.state.strictErrors.has(index)) {\n      this.raise(toParseError, { at });\n    } else {\n      this.state.strictErrors.set(index, [toParseError, at]);\n    }\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode?: number): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.curPosition();\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(Errors.MissingUnicodeEscape, {\n            at: this.state.curPosition(),\n          });\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(Errors.EscapedCharNotAnIdentifier, { at: escStart });\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode?: number): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(Errors.InvalidEscapedReservedWord, {\n        at: this.state.startLoc,\n        reservedWord: tokenLabelName(type),\n      });\n    }\n  }\n\n  /**\n   * Raise a `ParseError` given the appropriate properties. If passed a\n   * `Position` for the `at` property, raises the `ParseError` at that location.\n   * Otherwise, if passed a `Node`, raises the `ParseError` at the start\n   * location of that `Node`.\n   *\n   * If `errorRecovery` is `true`, the error is pushed to the errors array and\n   * returned. If `errorRecovery` is `false`, the error is instead thrown.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raise<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    // @ts-expect-error: refine details typing\n    const error = toParseError({ loc, details });\n\n    if (!this.options.errorRecovery) throw error;\n    if (!this.isLookahead) this.state.errors.push(error);\n\n    return error;\n  }\n\n  /**\n   * If `errorRecovery` is `false`, this method behaves identically to `raise`.\n   * If `errorRecovery` is `true`, this method will first see if there is\n   * already an error stored at the same `Position`, and replaces it with the\n   * one generated here.\n   *\n   * @param {Class<ParseError<ErrorDetails>>>} ParseErrorClass\n   * @param {RaiseProperties<ErrorDetails>} raiseProperties\n   * @returns {(ParseError<ErrorDetails> | empty)}\n   * @memberof Tokenizer\n   */\n  raiseOverwrite<ErrorDetails>(\n    toParseError: ParseErrorConstructor<ErrorDetails>,\n    raiseProperties: RaiseProperties<ErrorDetails>,\n  ): ParseError<ErrorDetails> | never {\n    const { at, ...details } = raiseProperties;\n    const loc = at instanceof Position ? at : at.loc.start;\n    const pos = loc.index;\n    const errors = this.state.errors;\n\n    for (let i = errors.length - 1; i >= 0; i--) {\n      const error = errors[i];\n      if (error.loc.index === pos) {\n        // @ts-expect-error: refine details typing\n        return (errors[i] = toParseError({ loc, details }));\n      }\n      if (error.loc.index < pos) break;\n    }\n\n    return this.raise(toParseError, raiseProperties);\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  updateContext(prevType: TokenType): void {}\n\n  // Raise an unexpected token error. Can take the expected token type.\n  unexpected(loc?: Position | null, type?: TokenType): void {\n    throw this.raise(Errors.UnexpectedToken, {\n      expected: type ? tokenLabelName(type) : null,\n      at: loc != null ? loc : this.state.startLoc,\n    });\n  }\n\n  expectPlugin(pluginName: Plugin, loc?: Position): true {\n    if (this.hasPlugin(pluginName)) {\n      return true;\n    }\n\n    throw this.raise(Errors.MissingPlugin, {\n      at: loc != null ? loc : this.state.startLoc,\n      missingPlugin: [pluginName],\n    });\n  }\n\n  expectOnePlugin(pluginNames: Plugin[]): void {\n    if (!pluginNames.some(name => this.hasPlugin(name))) {\n      throw this.raise(Errors.MissingOneOfPlugins, {\n        at: this.state.startLoc,\n        missingPlugin: pluginNames,\n      });\n    }\n  }\n\n  errorBuilder(error: ParseErrorConstructor<{}>) {\n    return (pos: number, lineStart: number, curLine: number) => {\n      this.raise(error, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    };\n  }\n\n  errorHandlers_readInt: IntErrorHandlers = {\n    invalidDigit: (pos, lineStart, curLine, radix) => {\n      if (!this.options.errorRecovery) return false;\n\n      this.raise(Errors.InvalidDigit, {\n        at: buildPosition(pos, lineStart, curLine),\n        radix,\n      });\n      // Continue parsing the number as if there was no invalid digit.\n      return true;\n    },\n    numericSeparatorInEscapeSequence: this.errorBuilder(\n      Errors.NumericSeparatorInEscapeSequence,\n    ),\n    unexpectedNumericSeparator: this.errorBuilder(\n      Errors.UnexpectedNumericSeparator,\n    ),\n  };\n\n  errorHandlers_readCodePoint: CodePointErrorHandlers = {\n    ...this.errorHandlers_readInt,\n    invalidEscapeSequence: this.errorBuilder(Errors.InvalidEscapeSequence),\n    invalidCodePoint: this.errorBuilder(Errors.InvalidCodePoint),\n  };\n\n  errorHandlers_readStringContents_string: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: (pos, lineStart, curLine) => {\n      this.recordStrictModeErrors(Errors.StrictNumericEscape, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedString, {\n        // Report the error at the string quote\n        at: buildPosition(pos - 1, lineStart, curLine),\n      });\n    },\n  };\n\n  errorHandlers_readStringContents_template: StringContentsErrorHandlers = {\n    ...this.errorHandlers_readCodePoint,\n    strictNumericEscape: this.errorBuilder(Errors.StrictNumericEscape),\n    unterminated: (pos, lineStart, curLine) => {\n      throw this.raise(Errors.UnterminatedTemplate, {\n        at: buildPosition(pos, lineStart, curLine),\n      });\n    },\n  };\n}\n","import {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport type { Position } from \"./location\";\nimport { Errors } from \"../parse-error\";\nimport type Tokenizer from \"../tokenizer\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, Position> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ClassScope> = [];\n  undefinedPrivateNames: Map<string, Position> = new Map();\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, loc] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, loc);\n        }\n      } else {\n        this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    loc: Position,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.parser.raise(Errors.PrivateNameRedeclaration, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, loc: Position) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, loc);\n    } else {\n      // top-level\n      this.parser.raise(Errors.InvalidPrivateFieldResolution, {\n        at: loc,\n        identifierName: name,\n      });\n    }\n  }\n}\n","import { Errors, type ParseErrorConstructor } from \"../parse-error\";\nimport type { Position } from \"./location\";\nimport type { Node } from \"../types\";\nimport type Tokenizer from \"../tokenizer\";\n\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser-errors/standard) will be recorded in\nsome expression scopes and thrown later when we know what the ambiguous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration(): this is ArrowHeadParsingScope {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\ntype ArrowHeadParsingParameterInitializerError =\n  | typeof Errors.AwaitExpressionFormalParameter\n  | typeof Errors.YieldInParameter;\ntype ArrowHeadParsingDeclarationError =\n  | ArrowHeadParsingParameterInitializerError\n  | typeof Errors.InvalidParenthesizedAssignment\n  | typeof Errors.AwaitBindingIdentifier;\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  declarationErrors: Map<number, [ParseErrorConstructor<{}>, Position]> =\n    new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(\n    ParsingErrorClass: ParseErrorConstructor<{}>,\n    {\n      at,\n    }: {\n      at: Position;\n    },\n  ) {\n    const index = at.index;\n\n    this.declarationErrors.set(index, [ParsingErrorClass, at]);\n  }\n  clearDeclarationError(index: number) {\n    this.declarationErrors.delete(index);\n  }\n  iterateErrors(\n    iterator: (a: [ArrowHeadParsingDeclarationError, Position]) => void,\n  ) {\n    this.declarationErrors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  parser: Tokenizer;\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n\n  constructor(parser: Tokenizer) {\n    this.parser = parser;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(\n    toParseError: ArrowHeadParsingParameterInitializerError,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const origin = { at: node.loc.start };\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(toParseError, origin);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    this.parser.raise(toParseError, origin);\n  }\n\n  /**\n   * Record errors that must be thrown if the current pattern ends up being an arrow\n   * function parameter. This is used to record parenthesized identifiers, and to record\n   * \"a as T\" and \"<T> a\" type assertions when parsing typescript.\n   *\n   * A parenthesized identifier (or type assertion) in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {ParseErrorConstructor<{||}>} error\n   * @param {Node} payload.at\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordArrowParemeterBindingError(\n    error: ParseErrorConstructor<{}>,\n    {\n      at: node,\n    }: {\n      at: Node;\n    },\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    const origin = { at: node.loc.start };\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.parser.raise(error, origin);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(error, origin);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError({ at }: { at: Position }): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(Errors.AwaitBindingIdentifier, { at });\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors(([toParseError, loc]) => {\n      this.parser.raise(toParseError, { at: loc });\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(loc.index);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","export const // Initial Parameter flags\n  PARAM = 0b0000,\n  // track [Yield] production parameter\n  PARAM_YIELD = 0b0001,\n  // track [Await] production parameter\n  PARAM_AWAIT = 0b0010,\n  // track [Return] production parameter\n  PARAM_RETURN = 0b0100,\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind = number;\n\n// todo(flow->ts) - check if more granular type can be used,\n//  type below is not good because things like PARAM_AWAIT|PARAM_YIELD are not included\n// export type ParamKind =\n//   | typeof PARAM\n//   | typeof PARAM_AWAIT\n//   | typeof PARAM_IN\n//   | typeof PARAM_RETURN\n//   | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<number> = [];\n  enter(flags: number) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): number {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return ((isAsync ? PARAM_AWAIT : 0) |\n    (isGenerator ? PARAM_YIELD : 0)) as ParamKind;\n}\n","import { type Position } from \"../util/location\";\nimport {\n  tokenIsLiteralPropertyName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport type State from \"../tokenizer/state\";\nimport type { EstreePropertyDefinition, Node, ObjectProperty } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport {\n  Errors,\n  type ParseError,\n  type ParseErrorConstructor,\n} from \"../parse-error\";\nimport type Parser from \".\";\n\nimport type ScopeHandler from \"../util/scope\";\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node;\n  error: Error;\n  thrown: Thrown;\n  aborted: Aborted;\n  failState: FailState;\n};\n\n// ## Parser utilities\n\nexport default abstract class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  abstract getScopeHandler(): { new (...args: any): ScopeHandler };\n\n  // TODO\n\n  addExtra(\n    node: Partial<Node>,\n    key: string,\n    value: any,\n    enumerable: boolean = true,\n  ): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    if (enumerable) {\n      extra[key] = value;\n    } else {\n      Object.defineProperty(extra, key, { enumerable, value });\n    }\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(\n    token: TokenType,\n    toParseError?: ParseErrorConstructor<any>,\n  ): void {\n    if (!this.eatContextual(token)) {\n      if (toParseError != null) {\n        throw this.raise(toParseError, { at: this.state.startLoc });\n      }\n      throw this.unexpected(null, token);\n    }\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEndLoc.index, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(Errors.MissingSemicolon, { at: this.state.lastTokEndLoc });\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, loc?: Position | null): void {\n    this.eat(type) || this.unexpected(loc, type);\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T extends Node | ReadonlyArray<Node>>(\n    fn: (abort: (node?: T) => never) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParseError<any>, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: {\n      node: T | null;\n    } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length] as ParseError<any>,\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        // @ts-expect-error casting general syntax error to parse error\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ExpressionErrors | undefined | null,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssignLoc,\n      doubleProtoLoc,\n      privateKeyLoc,\n      optionalParametersLoc,\n    } = refExpressionErrors;\n\n    const hasErrors =\n      !!shorthandAssignLoc ||\n      !!doubleProtoLoc ||\n      !!optionalParametersLoc ||\n      !!privateKeyLoc;\n\n    if (!andThrow) {\n      return hasErrors;\n    }\n\n    if (shorthandAssignLoc != null) {\n      this.raise(Errors.InvalidCoverInitializedName, {\n        at: shorthandAssignLoc,\n      });\n    }\n\n    if (doubleProtoLoc != null) {\n      this.raise(Errors.DuplicateProto, { at: doubleProtoLoc });\n    }\n\n    if (privateKeyLoc != null) {\n      this.raise(Errors.UnexpectedPrivateField, { at: privateKeyLoc });\n    }\n\n    if (optionalParametersLoc != null) {\n      this.unexpected(optionalParametersLoc);\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(\n    node: Node,\n  ): node is ObjectProperty | EstreePropertyDefinition {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    this: Parser,\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this, inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this);\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this);\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n  checkDestructuringPrivate(refExpressionErrors: ExpressionErrors) {\n    const { privateKeyLoc } = refExpressionErrors;\n    if (privateKeyLoc !== null) {\n      this.expectPlugin(\"destructuringPrivate\", privateKeyLoc);\n    }\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssignLoc**: track initializer `=` position\n * - **doubleProtoLoc**: track the duplicate `__proto__` key position\n * - **privateKey**: track private key `#p` position\n * - **optionalParametersLoc**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssignLoc: Position | undefined | null = null;\n  doubleProtoLoc: Position | undefined | null = null;\n  privateKeyLoc: Position | undefined | null = null;\n  optionalParametersLoc: Position | undefined | null = null;\n}\n","import type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: {\n    [key: string]: any;\n  };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-expect-error __clone is not defined in Node prototype\n  NodePrototype.__clone = function (): Node {\n    const newNode = new Node(undefined, this.start, this.loc.start);\n    const keys = Object.keys(this) as (keyof Node)[];\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        // @ts-expect-error cloning this to newNode\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport type Undone<T extends NodeType> = Omit<T, \"type\">;\n\nexport abstract class NodeUtils extends UtilParser {\n  startNode<T extends NodeType>(): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T extends NodeType>(pos: number, loc: Position): Undone<T> {\n    // @ts-expect-error cast Node as Undone<T>\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T extends NodeType>(type: Undone<NodeType>): Undone<T> {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T extends NodeType>(node: Undone<T>, type: T[\"type\"]): T {\n    return this.finishNodeAt(node, type, this.state.lastTokEndLoc);\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T extends NodeType>(\n    node: Omit<T, \"type\">,\n    type: T[\"type\"],\n    endLoc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    // @ts-expect-error migrate to Babel types AST typings\n    node.type = type;\n    // @ts-expect-error migrate to Babel types AST typings\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n    if (this.options.attachComment) this.processComment(node as T);\n    return node as T;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    endLoc: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = endLoc.index;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = endLoc.index;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = ParseErrorEnum`flow`({\n  AmbiguousConditionalArrow:\n    \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind:\n    \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  // TODO: When we get proper string enums in typescript make this ReservedType.\n  // Not really worth it to do the whole $Values dance with reservedTypes set.\n  AssignReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Cannot overwrite reserved type ${reservedType}.`,\n  DeclareClassElement:\n    \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer:\n    \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports:\n    \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Boolean enum members need to be initialized. Use either \\`${memberName} = true,\\` or \\`${memberName} = false,\\` in enum \\`${enumName}\\`.`,\n  EnumDuplicateMemberName: ({\n    memberName,\n    enumName,\n  }: {\n    memberName: string;\n    enumName: string;\n  }) =>\n    `Enum member names need to be unique, but the name \\`${memberName}\\` has already been used before in enum \\`${enumName}\\`.`,\n  EnumInconsistentMemberValues: ({ enumName }: { enumName: string }) =>\n    `Enum \\`${enumName}\\` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.`,\n  EnumInvalidExplicitType: ({\n    invalidEnumType,\n    enumName,\n  }: {\n    invalidEnumType: string;\n    enumName: string;\n  }) =>\n    `Enum type \\`${invalidEnumType}\\` is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidExplicitTypeUnknownSupplied: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `Supplied enum type is not valid. Use one of \\`boolean\\`, \\`number\\`, \\`string\\`, or \\`symbol\\` in enum \\`${enumName}\\`.`,\n\n  // TODO: When moving to typescript, we should either have each of the\n  // following errors only accept the specific strings they want:\n  //\n  // ...PrimaryType: explicitType: \"string\" | \"number\" | \"boolean\"\n  // ...SymbolType: explicitType: \"symbol\"\n  // ...UnknownType: explicitType: null\n  //\n  // Or, alternatively, merge these three errors together into one\n  // `EnumInvalidMemberInitializer` error that can accept `EnumExplicitType`\n  // without alteration, and then just have its message change based on the\n  // explicitType.\n  EnumInvalidMemberInitializerPrimaryType: ({\n    enumName,\n    memberName,\n    explicitType,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Enum \\`${enumName}\\` has type \\`${explicitType}\\`, so the initializer of \\`${memberName}\\` needs to be a ${explicitType} literal.`,\n  EnumInvalidMemberInitializerSymbolType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `Symbol enum members cannot be initialized. Use \\`${memberName},\\` in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberInitializerUnknownType: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n    explicitType: EnumExplicitType;\n  }) =>\n    `The enum member initializer for \\`${memberName}\\` needs to be a literal (either a boolean, number, or string) in enum \\`${enumName}\\`.`,\n  EnumInvalidMemberName: ({\n    enumName,\n    memberName,\n    suggestion,\n  }: {\n    enumName: string;\n    memberName: string;\n    suggestion: string;\n  }) =>\n    `Enum member names cannot start with lowercase 'a' through 'z'. Instead of using \\`${memberName}\\`, consider using \\`${suggestion}\\`, in enum \\`${enumName}\\`.`,\n  EnumNumberMemberNotInitialized: ({\n    enumName,\n    memberName,\n  }: {\n    enumName: string;\n    memberName: string;\n  }) =>\n    `Number enum members need to be initialized, e.g. \\`${memberName} = 1\\` in enum \\`${enumName}\\`.`,\n  EnumStringMemberInconsistentlyInitailized: ({\n    enumName,\n  }: {\n    enumName: string;\n  }) =>\n    `String enum members need to consistently either all use initializers, or use no initializers, in enum \\`${enumName}\\`.`,\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport:\n    \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact:\n    \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject:\n    \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule:\n    \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault:\n    \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule:\n    \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: {\n    message:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    // For consistency in TypeScript and Flow error codes\n    ...(!process.env.BABEL_8_BREAKING\n      ? { reasonCode: \"OptionalBindingPattern\" }\n      : {}),\n  },\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired:\n    \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor:\n    \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst:\n    \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern:\n    \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject:\n    \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: ({ reservedType }: { reservedType: string }) =>\n    `Unexpected reserved type ${reservedType}.`,\n  UnexpectedReservedUnderscore:\n    \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks:\n    \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType:\n    \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand:\n    'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter:\n    \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction:\n    \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: ({\n    unsupportedExportKind,\n    suggestion,\n  }: {\n    unsupportedExportKind: string;\n    suggestion: string;\n  }) =>\n    `\\`declare export ${unsupportedExportKind}\\` is not supported. Use \\`${suggestion}\\` instead.`,\n  UnsupportedStatementInDeclareModule:\n    \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\",\n});\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (c: T, b: number, a: T[]) => boolean | undefined | null,\n): [T[], T[]] {\n  const list1: T[] = [];\n  const list2: T[] = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\n\ntype EnumContext = {\n  enumName: string;\n  explicitType: EnumExplicitType;\n  memberName: string;\n};\n\ntype EnumMemberInit =\n  | {\n      type: \"number\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"string\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"boolean\";\n      loc: Position;\n      value: N.Node;\n    }\n  | {\n      type: \"invalid\";\n      loc: Position;\n    }\n  | {\n      type: \"none\";\n      loc: Position;\n    };\n\nexport default (superClass: typeof Parser) =>\n  class FlowParserMixin extends superClass implements Parser {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): {\n      new (...args: any): FlowScopeHandler;\n    } {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowPredicate {\n      const node = this.startNode();\n      const moduloLoc = this.state.startLoc;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloLoc.index + 1) {\n        this.raise(FlowErrors.UnexpectedSpaceBetweenModuloChecks, {\n          at: moduloLoc,\n        });\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = super.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [\n      N.FlowType | undefined | null,\n      N.FlowPredicate | undefined | null,\n    ] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(\n      node: Undone<N.FlowDeclareClass>,\n    ): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: Undone<N.FlowDeclareFunction>,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode<N.TypeAnnotation>();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [typeNode.returnType, node.predicate] =\n        this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(\n        node.id.name,\n        BIND_FLOW_DECLARE_FN,\n        node.id.loc.start,\n      );\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: Undone<N.FlowDeclare>,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(FlowErrors.NestedDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: Undone<N.FlowDeclareVariable>,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.loc.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(\n      node: Undone<N.FlowDeclareModule>,\n    ): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = super.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      // @ts-expect-error refine typings\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode<N.ImportDeclaration>();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(FlowErrors.InvalidNonTypeImportInDeclareModule, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          super.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n          // @ts-expect-error refine typings\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind: \"CommonJS\" | \"ES\" | null = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(FlowErrors.DuplicateDeclareModuleExports, {\n              at: bodyElement,\n            });\n          }\n          if (kind === \"ES\") {\n            this.raise(FlowErrors.AmbiguousDeclareModuleKind, {\n              at: bodyElement,\n            });\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: Undone<N.FlowDeclareExportDeclaration>,\n      insideModule?: boolean | null,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value as\n            | \"const\"\n            | \"let\"\n            | \"type\"\n            | \"interface\";\n          throw this.raise(FlowErrors.UnsupportedDeclareExportKind, {\n            at: this.state.startLoc,\n            unsupportedExportKind: label,\n            suggestion: exportSuggestions[label],\n          });\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(\n            node as Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n          );\n          if (node.type === \"ExportNamedDeclaration\") {\n            node.type = \"ExportDeclaration\";\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          node.type = \"Declare\" + node.type;\n\n          return node as N.Node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: Undone<N.FlowDeclareModuleExports>,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: Undone<N.FlowDeclareTypeAlias>,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      const finished = this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareTypeAlias\";\n      return finished;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: Undone<N.FlowDeclareOpaqueType>,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      const finished = this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      finished.type = \"DeclareOpaqueType\";\n      return finished;\n    }\n\n    flowParseDeclareInterface(\n      node: Undone<N.FlowDeclareInterface>,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: Undone<N.FlowDeclare>,\n      isClass: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.loc.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: Undone<N.FlowInterface>): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(FlowErrors.UnexpectedReservedUnderscore, {\n          at: this.state.startLoc,\n        });\n      }\n    }\n\n    checkReservedType(word: string, startLoc: Position, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        {\n          at: startLoc,\n          reservedType: word,\n        },\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(\n        this.state.value,\n        this.state.startLoc,\n        declaration,\n      );\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: Undone<N.FlowTypeAlias>): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: Undone<N.FlowOpaqueType>,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.loc.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault: boolean = false): N.TypeParameter {\n      const nodeStartLoc = this.state.startLoc;\n\n      const node = this.startNode<N.TypeParameter>();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      // @ts-expect-error migrate to Babel types\n      node.variance = variance;\n      // @ts-expect-error migrate to Babel types\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        // @ts-expect-error migrate to Babel types\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(FlowErrors.MissingTypeParamDefault, { at: nodeStartLoc });\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode<N.TypeParameterDeclaration>();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode<N.TypeParameterInstantiation>();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode<N.FlowInterfaceType>();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? super.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: Undone<N.FlowObjectTypeIndexer>,\n      isStatic: boolean,\n      variance?: N.FlowVariance | null,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: Undone<N.FlowObjectTypeInternalSlot>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: Undone<N.FlowFunctionTypeAnnotation>,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: Undone<N.FlowObjectTypeCallProperty>,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean;\n      allowExact: boolean;\n      allowSpread: boolean;\n      allowProto: boolean;\n      allowInexact: boolean;\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStartLoc: Position | undefined | null = null;\n        let inexactStartLoc: Position | undefined | null = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStartLoc = this.state.startLoc;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.loc.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStartLoc,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStartLoc = this.state.lastTokStartLoc;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStartLoc &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(FlowErrors.UnexpectedExplicitInexactInObject, {\n            at: inexactStartLoc,\n          });\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: Undone<N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty>,\n      isStatic: boolean,\n      protoStartLoc: Position | undefined | null,\n      variance: N.FlowVariance | undefined | null,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(FlowErrors.InexactInsideNonObject, {\n              at: this.state.lastTokStartLoc,\n            });\n          } else if (!allowInexact) {\n            this.raise(FlowErrors.InexactInsideExact, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (variance) {\n            this.raise(FlowErrors.InexactVariance, { at: variance });\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(FlowErrors.UnexpectedSpreadType, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        if (protoStartLoc != null) {\n          this.unexpected(protoStartLoc);\n        }\n        if (variance) {\n          this.raise(FlowErrors.SpreadVariance, { at: variance });\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStartLoc != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStartLoc != null) {\n            this.unexpected(protoStartLoc);\n          }\n          if (variance) {\n            this.unexpected(variance.loc.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(FlowErrors.ThisParamBannedInConstructor, {\n              at: node.value.this,\n            });\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: Undone<\n        N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty\n      >,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n          { at: property.value.this },\n        );\n      }\n\n      if (length !== paramCount) {\n        this.raise(\n          property.kind === \"get\"\n            ? Errors.BadGetterArity\n            : Errors.BadSetterArity,\n          { at: property },\n        );\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(Errors.BadSetterRestParameter, { at: property });\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node: N.Identifier | N.FlowQualifiedTypeIdentifier =\n        id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt<N.FlowQualifiedTypeIdentifier>(\n          startPos,\n          startLoc,\n        );\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode<N.FlowFunctionTypeParam>();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node });\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: node });\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[];\n      rest: N.FlowFunctionTypeParam | undefined | null;\n      _this: N.FlowFunctionTypeParam | undefined | null;\n    } {\n      let rest: N.FlowFunctionTypeParam | undefined | null = null;\n      let _this: N.FlowFunctionTypeParam | undefined | null = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: Undone<N.FlowTypeAnnotation>,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode(\n            node as Undone<N.BooleanLiteralTypeAnnotation>,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(FlowErrors.UnexpectedSubtractionOperand, {\n              at: this.state.startLoc,\n            });\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node as Undone<N.Identifier>, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              // @ts-expect-error todo(flow->ts)\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode<N.FlowTypeAnnotation>();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    flowParseVariance(): N.FlowVariance | undefined | null {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode<N.FlowVariance>();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        return this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody?: boolean | null,\n      isMethod: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode<N.TypeAnnotation>();\n\n        [\n          typeNode.typeAnnotation,\n          // @ts-expect-error predicate may not exist\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context?: string | null, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode<N.FlowInterface>();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            // @ts-expect-error: refine typings\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            // @ts-expect-error: refine typings\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(FlowErrors.AmbiguousConditionalArrow, {\n            at: state.startLoc,\n          });\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression;\n      failed: boolean;\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            // @ts-expect-error: refine typings\n            this.finishArrowValidation(node);\n          } else {\n            // @ts-expect-error: refine typings\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        node.params as any as N.Expression[],\n        node.extra?.trailingCommaLoc,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(\n      node: Undone<N.Node>,\n      parse: () => T,\n    ): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(\n      node: Undone<N.ExportNamedDeclaration | N.ExportAllDeclaration>,\n    ): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          super.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          // @ts-expect-error: refine typings\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        // @ts-expect-error: refine typings\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        // @ts-expect-error: refine typings\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(node)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const { startLoc } = this.state;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(startLoc);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n    ) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const { startLoc } = this.state;\n      if (this.isContextual(tt._declare)) {\n        if (super.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(FlowErrors.DeclareClassElement, { at: startLoc });\n        } else if (member.value) {\n          this.raise(FlowErrors.DeclareClassFieldInitializer, {\n            at: member.value,\n          });\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(Errors.InvalidIdentifier, {\n          at: this.state.curPosition(),\n          identifierName: fullWord,\n        });\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (\n        isIteratorStart(code, next, this.input.charCodeAt(this.state.pos + 2))\n      ) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      if (\n        !isLHS &&\n        node.type === \"AssignmentExpression\" &&\n        node.left.type === \"TypeCastExpression\"\n      ) {\n        node.left = this.typeCastToParameter(node.left);\n      }\n      super.toAssignable(node, isLHS);\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: ReadonlyArray<N.Expression | undefined | null>,\n      isParenthesizedExpr?: boolean,\n    ): ReadonlyArray<N.Expression | undefined | null> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(FlowErrors.TypeCastInPattern, {\n            at: expr.typeAnnotation,\n          });\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"TypeCastExpression\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error refine typings\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n        // estree support\n      } else if (\n        // @ts-expect-error TS does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        // @ts-expect-error estree\n        method.value.params\n      ) {\n        // @ts-expect-error estree\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(FlowErrors.ThisParamBannedInConstructor, { at: method });\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method as any).variance) {\n        this.unexpected((method as any).variance.loc.start);\n      }\n      delete (method as any).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(FlowErrors.GetterMayNotHaveThisParam, { at: param });\n        } else if (this.isThisParam(param)) {\n          this.raise(FlowErrors.SetterMayNotHaveThisParam, { at: param });\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ObjectMethod | N.ObjectProperty {\n      if ((prop as any).variance) {\n        this.unexpected((prop as any).variance.loc.start);\n      }\n      delete (prop as any).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      const result = super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (result.value || result).typeParameters = typeParameters;\n      }\n      return result;\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(FlowErrors.PatternIsOptional, { at: param });\n        }\n        if (this.isThisParam(param)) {\n          this.raise(FlowErrors.ThisParamMayNotBeOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamAnnotationRequired, { at: param });\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(FlowErrors.ThisParamNoDefault, { at: param });\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: N.Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(FlowErrors.TypeBeforeInitializer, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal<\n      T extends\n        | N.ImportSpecifier\n        | N.ImportDefaultSpecifier\n        | N.ImportNamespaceSpecifier,\n    >(node: N.ImportDeclaration, specifier: Undone<T>, type: T[\"type\"]): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      node.specifiers.push(this.finishImportSpecifier(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\" as const;\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\" as const;\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          // FIXME: lh.start?\n          this.unexpected(null, lh.type);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(Errors.ImportBindingIsString, {\n              at: specifier,\n              importName: firstIdent.value,\n            });\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(FlowErrors.ImportTypeShorthandOnlyInPureImport, {\n          at: specifier,\n        });\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.loc.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.loc.start,\n          true,\n          true,\n        );\n      }\n\n      return this.finishImportSpecifier(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(\n      node: Undone<N.Function>,\n      allowModifiers?: boolean,\n    ): void {\n      // @ts-expect-error kind may not index node\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        // @ts-expect-error: refine typings\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        // @ts-expect-error refine typings\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters: N.TypeParameterDeclaration;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression:\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n          | undefined\n          | null = null;\n\n        if (\n          arrow.node &&\n          // @ts-expect-error: refine tryParse typings\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            // @ts-expect-error: refine tryParse typings\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n                { at: typeParameters },\n              );\n            }\n            // @ts-expect-error: refine tryParse typings\n            return arrow.node;\n          }\n\n          // @ts-expect-error: refine typings\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(FlowErrors.UnexpectedTokenAfterTypeParameter, {\n          at: typeParameters,\n        });\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // @ts-expect-error todo(flow->ts)\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode<N.TypeAnnotation>();\n\n          [\n            typeNode.typeAnnotation,\n            // @ts-expect-error (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        // @ts-expect-error todo(flow->ts)\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Pattern[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction?: boolean | null,\n      strictModeChanged: boolean = true,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(FlowErrors.ThisParamMustBeFirst, { at: node.params[i] });\n        }\n      }\n\n      return super.checkParams(\n        node,\n        allowDuplicates,\n        isArrowFunction,\n        strictModeChanged,\n      );\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: boolean | null,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        // @ts-expect-error: refine tryParse typings\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          // @ts-expect-error: refine tryParse typings\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node = this.startNodeAt<N.OptionalCallExpression>(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt<\n          N.OptionalCallExpression | N.CallExpression\n        >(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = super.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) {\n            (node as Undone<N.OptionalCallExpression>).optional = false;\n          }\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      const node = this.startNodeAt<N.ArrowFunctionExpression>(\n        startPos,\n        startLoc,\n      );\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return super.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(FlowErrors.UnterminatedFlowComment, {\n          at: this.state.curPosition(),\n        });\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | undefined {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          throw this.raise(FlowErrors.NestedFlowComment, {\n            at: this.state.startLoc,\n          });\n        }\n        this.hasFlowCommentCompletion();\n        const commentSkip = this.skipFlowComment();\n        if (commentSkip) {\n          this.state.pos += commentSkip;\n          this.state.hasFlowComment = true;\n        }\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", this.state.pos + 2);\n        if (end === -1) {\n          throw this.raise(Errors.UnterminatedComment, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.state.pos = end + 2 + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | false {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          // @ts-expect-error testing whether a number is included\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(Errors.UnterminatedComment, {\n          at: this.state.curPosition(),\n        });\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumBooleanMemberNotInitialized, {\n        at: loc,\n        memberName,\n        enumName,\n      });\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      loc: Position,\n      enumContext: EnumContext,\n    ) {\n      return this.raise(\n        !enumContext.explicitType\n          ? FlowErrors.EnumInvalidMemberInitializerUnknownType\n          : enumContext.explicitType === \"symbol\"\n          ? FlowErrors.EnumInvalidMemberInitializerSymbolType\n          : FlowErrors.EnumInvalidMemberInitializerPrimaryType,\n        {\n          at: loc,\n          ...enumContext,\n        },\n      );\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      loc: Position,\n      {\n        enumName,\n        memberName,\n      }: {\n        enumName: string;\n        memberName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumNumberMemberNotInitialized, {\n        at: loc,\n        enumName,\n        memberName,\n      });\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      node: N.Node,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): void {\n      this.raise(FlowErrors.EnumStringMemberInconsistentlyInitailized, {\n        at: node,\n        enumName,\n      });\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startLoc = this.state.startLoc;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", loc: literal.loc.start, value: literal };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              loc: literal.loc.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", loc: startLoc };\n        }\n        default:\n          return { type: \"invalid\", loc: startLoc };\n      }\n    }\n\n    flowEnumMemberRaw(): {\n      id: N.Node;\n      init: EnumMemberInit;\n    } {\n      const loc = this.state.startLoc;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\" as const, loc };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      loc: Position,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(loc, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string;\n      explicitType: EnumExplicitType;\n    }): {\n      members: {\n        booleanMembers: Array<N.Node>;\n        numberMembers: Array<N.Node>;\n        stringMembers: Array<N.Node>;\n        defaultedMembers: Array<N.Node>;\n      };\n      hasUnknownMembers: boolean;\n    } {\n      const seenNames = new Set();\n      const members = {\n        // @ts-expect-error: migrate to Babel types\n        booleanMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        numberMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        stringMembers: [],\n        // @ts-expect-error: migrate to Babel types\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.raise(FlowErrors.EnumInvalidMemberName, {\n            at: id,\n            memberName,\n            suggestion: memberName[0].toUpperCase() + memberName.slice(1),\n            enumName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.raise(FlowErrors.EnumDuplicateMemberName, {\n            at: id,\n            memberName,\n            enumName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.loc,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.loc, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.loc, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.loc,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.loc, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      {\n        enumName,\n      }: {\n        enumName: string;\n      },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(member, {\n            enumName,\n          });\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string;\n    }): EnumExplicitType {\n      if (!this.eatContextual(tt._of)) return null;\n\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.raise(FlowErrors.EnumInvalidExplicitTypeUnknownSupplied, {\n          at: this.state.startLoc,\n          enumName,\n        });\n      }\n\n      const { value } = this.state;\n      this.next();\n\n      if (\n        value !== \"boolean\" &&\n        value !== \"number\" &&\n        value !== \"string\" &&\n        value !== \"symbol\"\n      ) {\n        this.raise(FlowErrors.EnumInvalidExplicitType, {\n          at: this.state.startLoc,\n          enumName,\n          invalidEnumType: value,\n        });\n      }\n\n      return value;\n    }\n\n    flowEnumBody(node: Undone<N.Node>, id: N.Node): N.Node {\n      const enumName = id.name;\n      const nameLoc = id.loc.start;\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.loc.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.raise(FlowErrors.EnumInconsistentMemberValues, {\n              at: nameLoc,\n              enumName,\n            });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: Undone<N.Node>): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), id);\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","const entities: {\n  __proto__: null;\n  [name: string]: string;\n} = {\n  __proto__: null,\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n} as const;\nexport default entities;\n","import * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport type { TokContext } from \"../../tokenizer/context\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { type Undone } from \"../../parser/node\";\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = ParseErrorEnum`jsx`({\n  AttributeIsEmpty:\n    \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: ({ openingTagName }: { openingTagName: string }) =>\n    `Expected corresponding JSX closing tag for <${openingTagName}>.`,\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression:\n    \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  // FIXME: Unify with Errors.UnexpectedToken\n  UnexpectedToken: ({\n    unexpected,\n    HTMLEntity,\n  }: {\n    unexpected: string;\n    HTMLEntity: string;\n  }) =>\n    `Unexpected token \\`${unexpected}\\`. Did you mean \\`${HTMLEntity}\\` or \\`{'${unexpected}'}\\`?`,\n  UnsupportedJsxValue:\n    \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements:\n    \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n});\n\n/* eslint-disable sort-keys */\n\nfunction isFragment(object?: N.JSXElement | null): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport interface IJSXParserMixin {\n  jsxParseOpeningElementAfterName(\n    node: N.JSXOpeningElement,\n  ): N.JSXOpeningElement;\n}\n\nexport default (superClass: typeof Parser) =>\n  class JSXParserMixin extends superClass implements Parser, IJSXParserMixin {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(JsxErrors.UnterminatedJsxContent, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              this.raise(JsxErrors.UnexpectedToken, {\n                at: this.state.curPosition(),\n                unexpected: this.input[this.state.pos],\n                HTMLEntity:\n                  ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\",\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(Errors.UnterminatedString, {\n            at: this.state.startLoc,\n          });\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      const startPos = ++this.state.pos;\n      if (this.codePointAtPos(this.state.pos) === charCodes.numberSign) {\n        ++this.state.pos;\n\n        let radix = 10;\n        if (this.codePointAtPos(this.state.pos) === charCodes.lowercaseX) {\n          radix = 16;\n          ++this.state.pos;\n        }\n\n        const codePoint = this.readInt(\n          radix,\n          /* len */ undefined,\n          /* forceLen */ false,\n          /* allowNumSeparator */ \"bail\",\n        );\n        if (\n          codePoint !== null &&\n          this.codePointAtPos(this.state.pos) === charCodes.semicolon\n        ) {\n          ++this.state.pos;\n          return String.fromCodePoint(codePoint);\n        }\n      } else {\n        let count = 0;\n        let semi = false;\n        while (\n          count++ < 10 &&\n          this.state.pos < this.length &&\n          !(semi = this.codePointAtPos(this.state.pos) == charCodes.semicolon)\n        ) {\n          ++this.state.pos;\n        }\n\n        if (semi) {\n          const desc = this.input.slice(startPos, this.state.pos);\n          const entity = XHTMLEntities[desc];\n          ++this.state.pos;\n\n          if (entity) {\n            return entity;\n          }\n        }\n      }\n\n      // Not a valid entity\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(JsxErrors.AttributeIsEmpty, { at: node });\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(JsxErrors.UnsupportedJsxValue, {\n            at: this.state.startLoc,\n          });\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEndLoc.index,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.startLoc);\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: Undone<N.JSXSpreadChild>): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_expr);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: Undone<N.JSXExpressionContainer>,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(JsxErrors.UnexpectedSequenceExpression, {\n              at: expression.expressions[1],\n            });\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.state.canStartJSXElement = true;\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.state.canStartJSXElement = true;\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt<N.JSXOpeningElement | N.JSXOpeningFragment>(\n        startPos,\n        startLoc,\n      );\n      if (this.eat(tt.jsxTagEnd)) {\n        // @ts-expect-error migrate to Babel types\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(\n        node as Undone<N.JSXOpeningElement>,\n      );\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: Undone<N.JSXOpeningElement>,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.eat(tt.jsxTagEnd)) {\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode<\n                N.JSXSpreadChild | N.JSXExpressionContainer\n              >();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(\n                  this.jsxParseSpreadChild(node as Undone<N.JSXSpreadChild>),\n                );\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(\n                    node as Undone<N.JSXExpressionContainer>,\n                    tc.j_expr,\n                  ),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (\n          isFragment(openingElement) &&\n          !isFragment(closingElement) &&\n          closingElement !== null\n        ) {\n          this.raise(JsxErrors.MissingClosingTagFragment, {\n            at: closingElement,\n          });\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(JsxErrors.MissingClosingTagElement, {\n            at: closingElement,\n            openingTagName: getQualifiedJSXName(openingElement.name),\n          });\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(JsxErrors.MissingClosingTagElement, {\n              at: closingElement,\n              openingTagName: getQualifiedJSXName(openingElement.name),\n            });\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(JsxErrors.UnwrappedAdjacentJSXElements, {\n          at: this.state.startLoc,\n        });\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","import type { Position } from \"../../util/location\";\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n  BIND_FLAGS_TS_IMPORT,\n  SCOPE_TS_MODULE,\n} from \"../../util/scopeflags\";\nimport type * as N from \"../../types\";\nimport { Errors } from \"../../parse-error\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  importsStack: Set<string>[] = [];\n\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    this.importsStack.push(new Set()); // Always keep the top-level scope for export checks.\n\n    return new TypeScriptScope(flags);\n  }\n\n  enter(flags: number): void {\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.push(new Set());\n    }\n\n    super.enter(flags);\n  }\n\n  exit() {\n    const flags = super.exit();\n\n    if (flags == SCOPE_TS_MODULE) {\n      this.importsStack.pop();\n    }\n\n    return flags;\n  }\n\n  hasImport(name: string, allowShadow?: boolean) {\n    const len = this.importsStack.length;\n    if (this.importsStack[len - 1].has(name)) {\n      return true;\n    }\n    if (!allowShadow && len > 1) {\n      for (let i = 0; i < len - 1; i++) {\n        if (this.importsStack[i].has(name)) return true;\n      }\n    }\n    return false;\n  }\n\n  declareName(name: string, bindingType: BindingTypes, loc: Position) {\n    if (bindingType & BIND_FLAGS_TS_IMPORT) {\n      if (this.hasImport(name, true)) {\n        this.parser.raise(Errors.VarRedeclaration, {\n          at: loc,\n          identifierName: name,\n        });\n      }\n      this.importsStack[this.importsStack.length - 1].add(name);\n      return;\n    }\n\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(name, bindingType, loc);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, loc);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(scope, name, bindingType);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n\n    if (this.hasImport(name)) return;\n\n    const len = this.scopeStack.length;\n    for (let i = len - 1; i >= 0; i--) {\n      const scope = this.scopeStack[i];\n      if (scope.types.has(name) || scope.exportOnlyBindings.has(name)) return;\n    }\n\n    super.checkLocalExport(id);\n  }\n}\n","/*:: declare var invariant; */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n  tokenCanStartExpression,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport type * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { createPositionWithColumnOffset } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_TS_TYPE_IMPORT,\n  BIND_CLASS,\n  BIND_NONE,\n  BIND_FLAGS_TS_IMPORT,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport { Errors, ParseErrorEnum } from \"../../parse-error\";\nimport { cloneIdentifier, type Undone } from \"../../parser/node\";\nimport type { Pattern } from \"../../types\";\nimport type { Expression } from \"../../types\";\nimport type { IJSXParserMixin } from \"../jsx\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility\n  | N.VarianceAnnotations;\n\nfunction nonNull<T>(x?: T | null): T {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\ntype ModifierBase = {\n  accessibility?: N.Accessibility;\n} & {\n  [key in TsModifier]?: boolean | undefined | null;\n};\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = ParseErrorEnum`typescript`({\n  AbstractMethodHasImplementation: ({ methodName }: { methodName: string }) =>\n    `Method '${methodName}' cannot have an implementation because it is marked abstract.`,\n  AbstractPropertyHasInitializer: ({\n    propertyName,\n  }: {\n    propertyName: string;\n  }) =>\n    `Property '${propertyName}' cannot have an initializer because it is marked abstract.`,\n  AccesorCannotDeclareThisParameter:\n    \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  CannotFindName: ({ name }: { name: string }) => `Cannot find name '${name}'.`,\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference:\n    \"A 'const' initializer in an ambient context must be a string or numeric literal or literal enum reference.\",\n  ConstructorHasTypeParameters:\n    \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: ({ kind }: { kind: \"get\" | \"set\" }) =>\n    `'declare' is not allowed in ${kind}ters.`,\n  DeclareClassFieldHasInitializer:\n    \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation:\n    \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier:\n    // `Accessibility modifier already seen: ${modifier}` would be more helpful.\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    ({ modifier }: { modifier: N.Accessibility }) =>\n      `Accessibility modifier already seen.`,\n  DuplicateModifier: ({ modifier }: { modifier: TsModifier }) =>\n    `Duplicate modifier: '${modifier}'.`,\n  // `token` matches the terminology used by typescript:\n  // https://github.com/microsoft/TypeScript/blob/main/src/compiler/types.ts#L2915\n  EmptyHeritageClauseType: ({ token }: { token: \"extends\" | \"implements\" }) =>\n    `'${token}' list cannot be empty.`,\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare:\n    \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: ({\n    modifiers,\n  }: {\n    modifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${modifiers[0]}' modifier cannot be used with '${modifiers[1]}' modifier.`,\n  IndexSignatureHasAbstract:\n    \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Index signatures cannot have an accessibility modifier ('${modifier}').`,\n  IndexSignatureHasDeclare:\n    \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride:\n    \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic:\n    \"Index signatures cannot have the 'static' modifier.\",\n  InitializerNotAllowedInAmbientContext:\n    \"Initializers are not allowed in ambient contexts.\",\n  InvalidModifierOnTypeMember: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type member.`,\n  InvalidModifierOnTypeParameter: ({ modifier }: { modifier: TsModifier }) =>\n    `'${modifier}' modifier cannot appear on a type parameter.`,\n  InvalidModifierOnTypeParameterPositions: ({\n    modifier,\n  }: {\n    modifier: TsModifier;\n  }) =>\n    `'${modifier}' modifier can only appear on a type parameter of a class, interface or type alias.`,\n  InvalidModifiersOrder: ({\n    orderedModifiers,\n  }: {\n    orderedModifiers: [TsModifier, TsModifier];\n  }) =>\n    `'${orderedModifiers[0]}' modifier must precede '${orderedModifiers[1]}' modifier.`,\n  InvalidPropertyAccessAfterInstantiationExpression:\n    \"Invalid property access after an instantiation expression. \" +\n    \"You can either wrap the instantiation expression in parentheses, or delete the type arguments.\",\n  InvalidTupleMemberLabel:\n    \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName:\n    \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements:\n    \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod:\n    \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer:\n    \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired:\n    \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass:\n    \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional:\n    \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract:\n    \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: ({\n    modifier,\n  }: {\n    modifier: N.Accessibility;\n  }) =>\n    `Private elements cannot have an accessibility modifier ('${modifier}').`,\n  ReadonlyForMethodSignature:\n    \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam:\n    \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion:\n    \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter:\n    \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter:\n    \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType:\n    \"A 'set' accessor cannot have a return type annotation.\",\n  SingleTypeParameterWithoutTrailingComma: ({\n    typeParameterName,\n  }: {\n    typeParameterName: string;\n  }) =>\n    `Single type parameter ${typeParameterName} should have a trailing comma. Example usage: <${typeParameterName},>.`,\n  StaticBlockCannotHaveModifier:\n    \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign:\n    \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed:\n    \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports:\n    \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports:\n    \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier:\n    \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly:\n    \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument:\n    \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind:\n    \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: ({ type }: { type: string }) =>\n    `Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got ${type}.`,\n});\n\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): modifier is N.Accessibility {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nfunction tsIsVarianceAnnotations(\n  modifier: string,\n): modifier is N.VarianceAnnotations {\n  return modifier === \"in\" || modifier === \"out\";\n}\n\ntype ClassWithMixin<\n  T extends new (...args: any) => any,\n  M extends object,\n> = T extends new (...args: infer P) => infer I\n  ? new (...args: P) => I & M\n  : never;\n\nexport default (superClass: ClassWithMixin<typeof Parser, IJSXParserMixin>) =>\n  class TypeScriptParserMixin extends superClass implements Parser {\n    getScopeHandler(): {\n      new (...args: any): TypeScriptScopeHandler;\n    } {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T extends TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): T | undefined | null {\n      if (!tokenIsIdentifier(this.state.type) && this.state.type !== tt._in) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"public\"] });\n     *    this.tsParseModifiers({ modified: node, allowedModifiers: [\"abstract\", \"readonly\"] });\n     */\n    tsParseModifiers({\n      modified,\n      allowedModifiers,\n      disallowedModifiers,\n      stopOnStartOfClassStaticBlock,\n      errorTemplate = TSErrors.InvalidModifierOnTypeMember,\n    }: {\n      modified: ModifierBase;\n      allowedModifiers: readonly TsModifier[];\n      disallowedModifiers?: TsModifier[];\n      stopOnStartOfClassStaticBlock?: boolean;\n      // FIXME: make sure errorTemplate can receive `modifier`\n      errorTemplate?: any;\n    }): void {\n      const enforceOrder = (\n        loc: Position,\n        modifier: TsModifier,\n        before: TsModifier,\n        after: TsModifier,\n      ) => {\n        if (modifier === before && modified[after]) {\n          this.raise(TSErrors.InvalidModifiersOrder, {\n            at: loc,\n            orderedModifiers: [before, after],\n          });\n        }\n      };\n      const incompatible = (\n        loc: Position,\n        modifier: TsModifier,\n        mod1: TsModifier,\n        mod2: TsModifier,\n      ) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(TSErrors.IncompatibleModifiers, {\n            at: loc,\n            modifiers: [mod1, mod2],\n          });\n        }\n      };\n\n      for (;;) {\n        const { startLoc } = this.state;\n        const modifier: TsModifier | undefined | null = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(TSErrors.DuplicateAccessibilityModifier, {\n              at: startLoc,\n              modifier,\n            });\n          } else {\n            enforceOrder(startLoc, modifier, modifier, \"override\");\n            enforceOrder(startLoc, modifier, modifier, \"static\");\n            enforceOrder(startLoc, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else if (tsIsVarianceAnnotations(modifier)) {\n          if (modified[modifier]) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          }\n          modified[modifier] = true;\n\n          enforceOrder(startLoc, modifier, \"in\", \"out\");\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(TSErrors.DuplicateModifier, { at: startLoc, modifier });\n          } else {\n            enforceOrder(startLoc, modifier, \"static\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"static\", \"override\");\n            enforceOrder(startLoc, modifier, \"override\", \"readonly\");\n            enforceOrder(startLoc, modifier, \"abstract\", \"override\");\n\n            incompatible(startLoc, modifier, \"declare\", \"override\");\n            incompatible(startLoc, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(errorTemplate, {\n            at: startLoc,\n            modifier,\n          });\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n    ): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T | undefined | null,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] | undefined | null {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T extends N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: {\n        value: number;\n      },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node = this.startNode<N.TsImportType>();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(TSErrors.UnsupportedImportTypeArgument, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        // In this instance, the entity name will actually itself be a\n        // qualifier, so allow it to be a reserved word as well.\n        node.qualifier = this.tsParseEntityName();\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean = true): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier(allowReservedWords);\n      while (this.eat(tt.dot)) {\n        const node: Undone<N.TsQualifiedName> =\n          this.startNodeAtNode<N.TsQualifiedName>(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node = this.startNode<N.TsTypeReference>();\n      node.typeName = this.tsParseEntityName();\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node = this.startNodeAtNode<N.TsTypePredicate>(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node = this.startNode<N.TsThisType>();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node = this.startNode<N.TsTypeQuery>();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName();\n      }\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseInOutModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"in\", \"out\"],\n        disallowedModifiers: [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"readonly\",\n          \"declare\",\n          \"abstract\",\n          \"override\",\n        ],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameter,\n      });\n    }\n\n    // for better error recover\n    tsParseNoneModifiers(node: N.TsTypeParameter) {\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [],\n        disallowedModifiers: [\"in\", \"out\"],\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n    }\n\n    tsParseTypeParameter(\n      parseModifiers: (\n        node: Undone<N.TsTypeParameter>,\n      ) => void = this.tsParseNoneModifiers.bind(this),\n    ): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n\n      parseModifiers(node);\n\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ): N.TsTypeParameterDeclaration | undefined | null {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters(parseModifiers);\n      }\n    }\n\n    tsParseTypeParameters(\n      parseModifiers?: ((node: N.TsTypeParameter) => void) | null,\n    ) {\n      const node = this.startNode<N.TsTypeParameterDeclaration>();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        // @ts-expect-error refine typings\n        this.tsParseTypeParameter.bind(this, parseModifiers),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeParameters, { at: node });\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): N.TsTypeReference | undefined | null {\n      if (this.lookahead().type !== tt._const) return null;\n\n      this.next();\n      const typeReference = this.tsParseTypeReference();\n\n      // If the type reference has type parameters, then you are using it as a\n      // type and not as a const signifier. We'll *never* be able to find this\n      // name, since const isn't allowed as a type name. So in this instance we\n      // get to pretend we're the type checker.\n      if (typeReference.typeParameters) {\n        this.raise(TSErrors.CannotFindName, {\n          at: typeReference.typeName,\n          name: \"const\",\n        });\n      }\n\n      return typeReference;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: Undone<N.TsSignatureDeclaration>,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n\n      // https://github.com/babel/babel/issues/9231\n      const paramsKey = process.env.BABEL_8_BREAKING ? \"params\" : \"parameters\";\n      const returnTypeKey = process.env.BABEL_8_BREAKING\n        ? \"returnType\"\n        : \"typeAnnotation\";\n\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature[paramsKey] = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature[returnTypeKey] =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): Array<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern\n    > {\n      return super\n        .parseBindingList(tt.parenR, charCodes.rightParenthesis)\n        .map(pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(TSErrors.UnsupportedSignatureParameterKind, {\n              at: pattern,\n              type: pattern.type,\n            });\n          }\n          return pattern as any;\n        });\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: Undone<\n        N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration\n      >,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(\n      node: Undone<N.TsIndexSignature>,\n    ): N.TsIndexSignature | undefined | null {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(TSErrors.ReadonlyForMethodSignature, { at: node });\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(TSErrors.AccesorCannotHaveTypeParameters, {\n            at: this.state.curPosition(),\n          });\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        const paramsKey = process.env.BABEL_8_BREAKING\n          ? \"params\"\n          : \"parameters\";\n        const returnTypeKey = process.env.BABEL_8_BREAKING\n          ? \"returnType\"\n          : \"typeAnnotation\";\n        if (method.kind === \"get\") {\n          if (method[paramsKey].length > 0) {\n            this.raise(Errors.BadGetterArity, { at: this.state.curPosition() });\n            if (this.isThisParam(method[paramsKey][0])) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method[paramsKey].length !== 1) {\n            this.raise(Errors.BadSetterArity, { at: this.state.curPosition() });\n          } else {\n            const firstParameter = method[paramsKey][0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(TSErrors.AccesorCannotDeclareThisParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(TSErrors.SetAccesorCannotHaveOptionalParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(TSErrors.SetAccesorCannotHaveRestParameter, {\n                at: this.state.curPosition(),\n              });\n            }\n          }\n          if (method[returnTypeKey]) {\n            this.raise(TSErrors.SetAccesorCannotHaveReturnType, {\n              at: method[returnTypeKey],\n            });\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id = this.startNode<N.Identifier>();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers({\n        modified: node,\n        allowedModifiers: [\"readonly\"],\n        disallowedModifiers: [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n      });\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      super.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        super.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node = this.startNode<N.TsTypeLiteral>();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): Array<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node = this.startNode<N.TsTypeParameter>();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node = this.startNode<N.TsMappedType>();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node = this.startNode<N.TsTupleType>();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements: boolean | null = null;\n      node.elementTypes.forEach(elementNode => {\n        const { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(TSErrors.OptionalTypeBeforeRequired, {\n            at: elementNode,\n          });\n        }\n\n        seenOptionalElement ||=\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        let checkType = type;\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          checkType = elementNode.type;\n        }\n\n        const isLabeled = checkType === \"TSNamedTupleMember\";\n        labeledElements ??= isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(TSErrors.MixedLabeledAndUnlabeledElements, {\n            at: elementNode,\n          });\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type: N.TsType | N.TsNamedTupleMember = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode = this.startNodeAtNode<N.TsNamedTupleMember>(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = type.typeName as N.Identifier;\n        } else {\n          this.raise(TSErrors.InvalidTupleMemberLabel, { at: type });\n          // @ts-expect-error This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode = this.startNodeAtNode<N.TsOptionalType>(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode = this.startNodeAt<N.TsRestType>(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode<N.TsParenthesizedType>();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node = this.startNode<\n        N.TsFunctionOrConstructorType | N.TsConstructorType\n      >();\n      if (type === \"TSConstructorType\") {\n        (node as Undone<N.TsConstructorType>).abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsInAllowConditionalTypesContext(() =>\n        this.tsFillSignature(tt.arrow, node),\n      );\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node = this.startNode<N.TsLiteralType>();\n      // @ts-expect-error refine typings\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return super.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node = this.startNode<N.TsLiteralType>();\n      node.literal = super.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType | N.Node {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node = this.startNode<N.TsLiteralType>();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            // @ts-expect-error: parseMaybeUnary must returns unary expression\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node = this.startNode<N.TsKeywordType>();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node = this.startNodeAtNode<N.TsArrayType>(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node = this.startNodeAtNode<N.TsIndexedAccessType>(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node = this.startNode<N.TsTypeOperator>();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(\n          // @ts-expect-error todo(flow->ts)\n          node,\n        );\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(TSErrors.UnexpectedReadonly, { at: node });\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode<N.TsInferType>();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode<N.TsTypeParameter>();\n      typeParameter.name = this.tsParseTypeParameterName();\n      typeParameter.constraint = this.tsTryParse(() =>\n        this.tsParseConstraintForInferType(),\n      );\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseConstraintForInferType() {\n      if (this.eat(tt._extends)) {\n        const constraint = this.tsInDisallowConditionalTypesContext(() =>\n          this.tsParseType(),\n        );\n        if (\n          this.state.inDisallowConditionalTypesContext ||\n          !this.match(tt.question)\n        ) {\n          return constraint;\n        }\n      }\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsInAllowConditionalTypesContext(() =>\n            this.tsParseArrayTypeOrHigher(),\n          );\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node = this.startNode<N.TsUnionType | N.TsIntersectionType>();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        // Return true if we can parse an object pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          this.parseObjectLike(tt.braceR, true);\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      if (this.match(tt.bracketL)) {\n        this.next();\n        // Return true if we can parse an array pattern without errors\n        const { errors } = this.state;\n        const previousErrorCount = errors.length;\n        try {\n          super.parseBindingList(\n            tt.bracketR,\n            charCodes.rightSquareBracket,\n            true,\n          );\n          return errors.length === previousErrorCount;\n        } catch {\n          return false;\n        }\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t = this.startNode<N.TsTypeAnnotation>();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = thisTypePredicate as N.TsThisType;\n            node.asserts = true;\n            (node as N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate as N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node as N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation():\n      | N.TsTypeAnnotation\n      | undefined\n      | null {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): N.TsTypeAnnotation | undefined | null {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): N.TsType | undefined | null {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): N.Identifier | undefined | null {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(Errors.InvalidEscapedReservedWord, {\n          at: this.state.lastTokStartLoc,\n          reservedWord: \"asserts\",\n        });\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: Undone<N.TsTypeAnnotation> = this.startNode<N.TsTypeAnnotation>(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n\n      if (\n        this.state.inDisallowConditionalTypesContext ||\n        this.hasPrecedingLineBreak() ||\n        !this.eat(tt._extends)\n      ) {\n        return type;\n      }\n      const node = this.startNodeAtNode<N.TsConditionalType>(type);\n      node.checkType = type;\n\n      node.extendsType = this.tsInDisallowConditionalTypesContext(() =>\n        this.tsParseNonConditionalType(),\n      );\n\n      this.expect(tt.question);\n      node.trueType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      this.expect(tt.colon);\n      node.falseType = this.tsInAllowConditionalTypesContext(() =>\n        this.tsParseType(),\n      );\n\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(TSErrors.ReservedTypeAssertion, { at: this.state.startLoc });\n      }\n\n      const node = this.startNode<N.TsTypeAssertion>();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      token: \"extends\" | \"implements\",\n    ): Array<N.TsExpressionWithTypeArguments> {\n      const originalStartLoc = this.state.startLoc;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        () => {\n          const node = this.startNode<N.TsExpressionWithTypeArguments>();\n          node.expression = this.tsParseEntityName();\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.tsParseTypeArguments();\n          }\n\n          return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n        },\n      );\n\n      if (!delimitedList.length) {\n        this.raise(TSErrors.EmptyHeritageClauseType, {\n          at: originalStartLoc,\n          token,\n        });\n      }\n\n      return delimitedList;\n    }\n\n    tsParseInterfaceDeclaration(\n      node: Undone<N.TsInterfaceDeclaration>,\n      properties: {\n        declare?: true;\n      } = {},\n    ): N.TsInterfaceDeclaration | undefined | null {\n      if (this.hasFollowingLineBreak()) return null;\n      this.expectContextual(tt._interface);\n      if (properties.declare) node.declare = true;\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkIdentifier(node.id, BIND_TS_INTERFACE);\n      } else {\n        node.id = null;\n        this.raise(TSErrors.MissingInterfaceName, { at: this.state.startLoc });\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body = this.startNode<N.TSInterfaceBody>();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_TS_TYPE);\n\n      node.typeAnnotation = this.tsInType(() => {\n        node.typeParameters = this.tsTryParseTypeParameters(\n          this.tsParseInOutModifiers.bind(this),\n        );\n\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node = this.startNode<N.TsKeywordType>();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsInDisallowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsInAllowConditionalTypesContext<T>(cb: () => T): T {\n      const oldInDisallowConditionalTypesContext =\n        this.state.inDisallowConditionalTypesContext;\n      this.state.inDisallowConditionalTypesContext = false;\n      try {\n        return cb();\n      } finally {\n        this.state.inDisallowConditionalTypesContext =\n          oldInDisallowConditionalTypesContext;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node = this.startNode<N.TsEnumMember>();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? super.parseStringLiteral(this.state.value)\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = super.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: Undone<N.TsEnumDeclaration>,\n      properties: {\n        const?: true;\n        declare?: true;\n      } = {},\n    ): N.TsEnumDeclaration {\n      if (properties.const) node.const = true;\n      if (properties.declare) node.declare = true;\n      this.expectContextual(tt._enum);\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(\n        node.id,\n        node.const ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node = this.startNode<N.TsModuleBlock>();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      super.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.next(); // eat tt.braceR\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: Undone<N.TsModuleDeclaration>,\n      nested: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkIdentifier(node.id, BIND_TS_NAMESPACE);\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode<N.TsModuleDeclaration>();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        // @ts-expect-error Fixme: refine typings\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = super.parseStringLiteral(this.state.value);\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: Undone<N.TsImportEqualsDeclaration>,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkIdentifier(node.id, BIND_FLAGS_TS_IMPORT);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(TSErrors.ImportAliasHasImportType, {\n          at: moduleReference,\n        });\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node = this.startNode<N.TsExternalModuleReference>();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = super.parseExprAtom() as N.StringLiteral;\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T extends N.NodeBase | undefined | null>(\n      f: () => T,\n    ): T | undefined | null {\n      const result = this.tryParse(\n        abort =>\n          // @ts-expect-error todo(flow->ts)\n          f() || abort(),\n      );\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      // @ts-expect-error refine typings\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => T | undefined | false): T | undefined {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): N.Declaration | undefined | null {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind: \"let\" | null;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\" as const;\n      }\n\n      // @ts-expect-error refine typings\n      return this.tsInAmbientContext(() => {\n        if (starttype === tt._function) {\n          nany.declare = true;\n          return super.parseFunctionStatement(\n            nany,\n            /* async */ false,\n            /* declarationPosition */ true,\n          );\n        }\n\n        if (starttype === tt._class) {\n          // While this is also set by tsParseExpressionStatement, we need to set it\n          // before parsing the class declaration to know how to register it in the scope.\n          nany.declare = true;\n          return this.parseClass(\n            nany,\n            /* isStatement */ true,\n            /* optionalId */ false,\n          );\n        }\n\n        if (starttype === tt._enum) {\n          return this.tsParseEnumDeclaration(nany, { declare: true });\n        }\n\n        if (starttype === tt._global) {\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n        }\n\n        if (starttype === tt._const || starttype === tt._var) {\n          if (!this.match(tt._const) || !this.isLookaheadContextual(\"enum\")) {\n            nany.declare = true;\n            return this.parseVarStatement(nany, kind || this.state.value, true);\n          }\n\n          // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n          this.expect(tt._const);\n          return this.tsParseEnumDeclaration(nany, {\n            const: true,\n            declare: true,\n          });\n        }\n\n        if (starttype === tt._interface) {\n          const result = this.tsParseInterfaceDeclaration(nany, {\n            declare: true,\n          });\n          if (result) return result;\n        }\n\n        if (tokenIsIdentifier(starttype)) {\n          return this.tsParseDeclaration(\n            nany,\n            this.state.value,\n            /* next */ true,\n          );\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): N.Declaration | undefined | null {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(\n      node: Undone<N.TsModuleDeclaration>,\n      expr: N.Identifier,\n    ): N.Declaration | undefined | null {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod = node as Undone<N.TsModuleDeclaration>;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): N.Declaration | undefined | null {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): N.ArrowFunctionExpression | undefined | null {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: Undone<N.ArrowFunctionExpression> | undefined | null =\n        this.tsTryParseAndCatch(() => {\n          const node = this.startNodeAt<N.ArrowFunctionExpression>(\n            startPos,\n            startLoc,\n          );\n          node.typeParameters = this.tsParseTypeParameters();\n          // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n          super.parseFunctionParams(node);\n          node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n          this.expect(tt.arrow);\n          return node;\n        });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return super.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    // Used when parsing type arguments from ES productions, where the first token\n    // has been created without state.inType. Thus we need to rescan the lt token.\n    tsParseTypeArgumentsInExpression(): N.TsTypeParameterInstantiation | void {\n      if (this.reScan_lt() !== tt.lt) {\n        return undefined;\n      }\n      return this.tsParseTypeArguments();\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode<N.TsTypeParameterInstantiation>();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(TSErrors.EmptyTypeArguments, { at: node });\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: boolean | undefined | null,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: N.Accessibility | undefined | null;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified: ModifierBase = {};\n        this.tsParseModifiers({\n          modified,\n          allowedModifiers: [\n            \"public\",\n            \"private\",\n            \"protected\",\n            \"override\",\n            \"readonly\",\n          ],\n        });\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(TSErrors.UnexpectedParameterModifier, { at: startLoc });\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp = this.startNodeAt<N.TSParameterProperty>(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(TSErrors.UnsupportedParameterPropertyKind, { at: pp });\n        }\n        pp.parameter = elt as any as N.Identifier | N.AssignmentPattern;\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n      return (\n        (node.type === \"TSParameterProperty\" &&\n          super.isSimpleParameter(node.parameter)) ||\n        super.isSimpleParameter(node)\n      );\n    }\n\n    parseFunctionBodyAndFinish<\n      T extends\n        | N.Function\n        | N.TSDeclareMethod\n        | N.TSDeclareFunction\n        | N.ClassPrivateMethod,\n    >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        return this.finishNode(node, bodilessType);\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(TSErrors.DeclareFunctionHasImplementation, { at: node });\n        if ((node as Undone<N.FunctionDeclaration>).declare) {\n          return super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        }\n      }\n\n      return super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkIdentifier(node.id, BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(node);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: Array<N.Expression | undefined | null>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(TSErrors.UnexpectedTypeAnnotation, {\n            at: node.typeAnnotation,\n          });\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: Array<N.Expression | undefined | null>,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      isInParens?: boolean,\n    ): Array<N.Expression | undefined | null> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: boolean | undefined | null,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression = this.startNodeAt<N.TsNonNullExpression>(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      // handles 'f<<T>'\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        let missingParenErrorLoc;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const typeArguments = this.tsParseTypeArgumentsInExpression();\n          if (!typeArguments) return;\n\n          if (isOptionalCall && !this.match(tt.parenL)) {\n            missingParenErrorLoc = this.state.curPosition();\n            return;\n          }\n\n          if (tokenIsTemplate(this.state.type)) {\n            const result = super.parseTaggedTemplateExpression(\n              base,\n              startPos,\n              startLoc,\n              state,\n            );\n            result.typeParameters = typeArguments;\n            return result;\n          }\n\n          if (!noCalls && this.eat(tt.parenL)) {\n            const node = this.startNodeAt<\n              N.CallExpression | N.OptionalCallExpression\n            >(startPos, startLoc);\n            node.callee = base;\n            // possibleAsync always false here, because we would have handled it above.\n            // @ts-expect-error (won't be any undefined arguments)\n            node.arguments = this.parseCallExpressionArguments(\n              tt.parenR,\n              /* possibleAsync */ false,\n            );\n\n            // Handles invalid case: `f<T>(a:b)`\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n\n            node.typeParameters = typeArguments;\n            if (state.optionalChainMember) {\n              (node as Undone<N.OptionalCallExpression>).optional =\n                isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          }\n\n          const tokenType = this.state.type;\n          if (\n            // a<b>>c is not (a<b>)>c, but a<(b>>c)\n            tokenType === tt.gt ||\n            // a<b>>>c is not (a<b>)>>c, but a<(b>>>c)\n            tokenType === tt.bitShiftR ||\n            // a<b>c is (a<b)>c\n            (tokenType !== tt.parenL &&\n              tokenCanStartExpression(tokenType) &&\n              !this.hasPrecedingLineBreak())\n          ) {\n            // Bail out.\n            return;\n          }\n\n          const node = this.startNodeAt<N.TsInstantiationExpression>(\n            startPos,\n            startLoc,\n          );\n          node.expression = base;\n          node.typeParameters = typeArguments;\n          return this.finishNode(node, \"TSInstantiationExpression\");\n        });\n\n        if (missingParenErrorLoc) {\n          this.unexpected(missingParenErrorLoc, tt.parenL);\n        }\n\n        if (result) {\n          if (\n            result.type === \"TSInstantiationExpression\" &&\n            (this.match(tt.dot) ||\n              (this.match(tt.questionDot) &&\n                this.lookaheadCharCode() !== charCodes.leftParenthesis))\n          ) {\n            this.raise(\n              TSErrors.InvalidPropertyAccessAfterInstantiationExpression,\n              { at: this.state.startLoc },\n            );\n          }\n          return result;\n        }\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewCallee(node: N.NewExpression): void {\n      super.parseNewCallee(node);\n\n      const { callee } = node;\n      if (\n        callee.type === \"TSInstantiationExpression\" &&\n        !callee.extra?.parenthesized\n      ) {\n        node.typeParameters = callee.typeParameters;\n        node.callee = callee.expression;\n      }\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ): N.Expression {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node = this.startNodeAt<N.TsAsExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(\n          // @ts-expect-error todo(flow->ts)\n          node,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ): void {\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n      if (!this.state.isAmbientContext) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(\n      node: Undone<N.ImportDeclaration | N.TsImportEqualsDeclaration>,\n    ): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(\n            node as Undone<N.TsImportEqualsDeclaration>,\n          );\n        }\n      }\n\n      const importNode = super.parseImport(node as Undone<N.ImportDeclaration>);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        // @ts-expect-error refine typings\n        importNode.specifiers.length > 1 &&\n        // @ts-expect-error refine typings\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(TSErrors.TypeImportCannotSpecifyDefaultAndNamed, {\n          at: importNode,\n        });\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: Undone<N.Node>): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(\n          node as Undone<N.TsImportEqualsDeclaration>,\n          /* isExport */ true,\n        );\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign = node as Undone<N.TsExportAssignment>;\n        assign.expression = super.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl = node as Undone<N.TsNamespaceExportDeclaration>;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(\n          node as Undone<N.ExportAllDeclaration | N.ExportDefaultDeclaration>,\n        );\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode<N.Class>();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        return this.parseClass(cls, true, true);\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(\n          this.startNode<N.TsInterfaceDeclaration>(),\n        );\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseVarStatement(\n      node: N.VariableDeclaration,\n      kind: \"var\" | \"let\" | \"const\",\n      allowMissingInitializer: boolean = false,\n    ) {\n      const { isAmbientContext } = this.state;\n      const declaration = super.parseVarStatement(\n        node,\n        kind,\n        allowMissingInitializer || isAmbientContext,\n      );\n\n      if (!isAmbientContext) return declaration;\n\n      for (const { id, init } of declaration.declarations) {\n        // Empty initializer is the easy case that we want.\n        if (!init) continue;\n\n        // var and let aren't ever allowed initializers.\n        //\n        // If a const declaration has no type annotation and is initiailized to\n        // a string literal, numeric literal, or enum reference, then it is\n        // allowed. In an ideal world, we'd check whether init was *actually* an\n        // enum reference, but we allow anything that \"could be\" a literal enum\n        // in `isPossiblyLiteralEnum` since we don't have all the information\n        // that the typescript compiler has.\n        if (kind !== \"const\" || !!id.typeAnnotation) {\n          this.raise(TSErrors.InitializerNotAllowedInAmbientContext, {\n            at: init,\n          });\n        } else if (\n          init.type !== \"StringLiteral\" &&\n          init.type !== \"BooleanLiteral\" &&\n          init.type !== \"NumericLiteral\" &&\n          init.type !== \"BigIntLiteral\" &&\n          (init.type !== \"TemplateLiteral\" || init.expressions.length > 0) &&\n          !isPossiblyLiteralEnum(init)\n        ) {\n          this.raise(\n            TSErrors.ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference,\n            { at: init },\n          );\n        }\n      }\n\n      return declaration;\n    }\n\n    parseStatementContent(\n      context?: string | null,\n      topLevel?: boolean | null,\n    ): N.Statement {\n      if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n        const node = this.startNode<N.TsEnumDeclaration>();\n        this.expect(tt._const); // eat 'const'\n        return this.tsParseEnumDeclaration(node, { const: true });\n      }\n\n      if (this.isContextual(tt._enum)) {\n        return this.tsParseEnumDeclaration(\n          this.startNode<N.TsEnumDeclaration>(),\n        );\n      }\n\n      if (this.isContextual(tt._interface)) {\n        const result = this.tsParseInterfaceDeclaration(this.startNode());\n        if (result) return result;\n      }\n\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): N.Accessibility | undefined | null {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: readonly TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ] as const;\n      this.tsParseModifiers({\n        modified: member,\n        allowedModifiers: modifiers,\n        disallowedModifiers: [\"in\", \"out\"],\n        stopOnStartOfClassStaticBlock: true,\n        errorTemplate: TSErrors.InvalidModifierOnTypeParameterPositions,\n      });\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(TSErrors.StaticBlockCannotHaveModifier, {\n              at: this.state.curPosition(),\n            });\n          }\n          super.parseClassStaticBlock(\n            classBody,\n            member as any as N.StaticBlock,\n          );\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: Undone<N.ClassMember | N.TsIndexSignature>,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(\n        member as Undone<N.TsIndexSignature>,\n      );\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member as any).abstract) {\n          this.raise(TSErrors.IndexSignatureHasAbstract, { at: member });\n        }\n        if ((member as any).accessibility) {\n          this.raise(TSErrors.IndexSignatureHasAccessibility, {\n            at: member,\n            modifier: (member as any).accessibility,\n          });\n        }\n        if ((member as any).declare) {\n          this.raise(TSErrors.IndexSignatureHasDeclare, { at: member });\n        }\n        if ((member as any).override) {\n          this.raise(TSErrors.IndexSignatureHasOverride, { at: member });\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member as any).abstract) {\n        this.raise(TSErrors.NonAbstractClassHasAbstractMethod, {\n          at: member,\n        });\n      }\n\n      if ((member as any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(TSErrors.OverrideNotInSubClass, { at: member });\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(\n        classBody,\n        member as Undone<N.ClassMember>,\n        state,\n        isStatic,\n      );\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp as any).readonly && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasReadonly, { at: methodOrProp });\n      }\n\n      if ((methodOrProp as any).declare && this.match(tt.parenL)) {\n        this.raise(TSErrors.ClassMethodHasDeclare, { at: methodOrProp });\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    // @ts-expect-error plugin overrides interfaces\n    parseExpressionStatement(\n      node: Undone<N.ExpressionStatement>,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? // @ts-expect-error refine typings\n            this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ExpressionErrors | null,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt<N.TsTypeCastExpression>(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(\n      node: N.ExportNamedDeclaration,\n    ): N.Declaration | undefined | null {\n      if (!this.state.isAmbientContext && this.isContextual(tt._declare)) {\n        return this.tsInAmbientContext(() => this.parseExportDeclaration(node));\n      }\n\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(TSErrors.ExpectedAmbientAfterExportDeclare, {\n          at: this.state.startLoc,\n        });\n      }\n\n      const isIdentifier = tokenIsIdentifier(this.state.type);\n      const declaration: N.Declaration | undefined | null =\n        (isIdentifier && this.tsTryParseExportDeclaration()) ||\n        super.parseExportDeclaration(node);\n\n      if (!declaration) return null;\n\n      if (\n        declaration.type === \"TSInterfaceDeclaration\" ||\n        declaration.type === \"TSTypeAliasDeclaration\" ||\n        isDeclare\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId?: boolean | null,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType?: BindingTypes,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node as any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters(\n        this.tsParseInOutModifiers.bind(this),\n      );\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (\n        this.state.isAmbientContext &&\n        !(node.readonly && !node.typeAnnotation) &&\n        this.match(tt.eq)\n      ) {\n        this.raise(TSErrors.DeclareClassFieldHasInitializer, {\n          at: this.state.startLoc,\n        });\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(TSErrors.AbstractPropertyHasInitializer, {\n          at: this.state.startLoc,\n          propertyName:\n            key.type === \"Identifier\" && !node.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n        });\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // @ts-expect-error abstract may not index node\n      if (node.abstract) {\n        this.raise(TSErrors.PrivateElementHasAbstract, { at: node });\n      }\n\n      // @ts-expect-error accessibility may not index node\n      if (node.accessibility) {\n        this.raise(TSErrors.PrivateElementHasAccessibility, {\n          at: node,\n          // @ts-expect-error refine typings\n          modifier: node.accessibility,\n        });\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(TSErrors.ConstructorHasTypeParameters, {\n          at: typeParameters,\n        });\n      }\n\n      // @ts-expect-error declare does not exist in ClassMethod\n      const { declare = false, kind } = method;\n\n      if (declare && (kind === \"get\" || kind === \"set\")) {\n        this.raise(TSErrors.DeclareAccessor, { at: method, kind });\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      // handle `extends f<<T>\n      if (node.superClass && (this.match(tt.lt) || this.match(tt.bitShiftL))) {\n        // @ts-expect-error refine typings\n        node.superTypeParameters = this.tsParseTypeArgumentsInExpression();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(\n      prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n      startPos: number | undefined | null,\n      startLoc: Position | undefined | null,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors?: ExpressionErrors | null,\n    ) {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      return super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (\n        decl.id.type === \"Identifier\" &&\n        !this.hasPrecedingLineBreak() &&\n        this.eat(tt.bang)\n      ) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(\n      refExpressionErrors?: ExpressionErrors | null,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: State | undefined | null;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      // If the state was cloned in the JSX parsing branch above but there\n      // have been any error in the tryParse call, this.state is set to state\n      // so we still need to clone it.\n      if (!state || state === this.state) state = this.state.clone();\n\n      let typeParameters: N.TsTypeParameterDeclaration | undefined | null;\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(\n          refExpressionErrors,\n          afterLeftParse,\n        );\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            this.hasPlugin(\"jsx\") &&\n            expr.typeParameters.params.length === 1 &&\n            !expr.typeParameters.extra?.trailingComma\n          ) {\n            // report error if single type parameter used without trailing comma.\n            const parameter = expr.typeParameters.params[0];\n            if (!parameter.constraint) {\n              // A single type parameter must either have constraints\n              // or a trailing comma, otherwise it's ambiguous with JSX.\n              this.raise(TSErrors.SingleTypeParameterWithoutTrailingComma, {\n                at: createPositionWithColumnOffset(parameter.loc.end, 1),\n                typeParameterName: parameter.name.name,\n              });\n            }\n          }\n        }\n\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        // @ts-expect-error refine typings\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(TSErrors.ReservedArrowTypeParam, { at: node });\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(\n      refExpressionErrors?: ExpressionErrors | null,\n      sawUnary?: boolean,\n    ): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors, sawUnary);\n      }\n    }\n\n    parseArrow(\n      node: Undone<N.ArrowFunctionExpression>,\n    ): Undone<N.ArrowFunctionExpression> | undefined | null {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          // @ts-expect-error refine typings\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(TSErrors.PatternIsOptional, { at: param });\n        }\n\n        (param as any as N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): void {\n      switch (node.type) {\n        case \"ParenthesizedExpression\":\n          this.toAssignableParenthesizedExpression(node, isLHS);\n          break;\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          if (isLHS) {\n            this.expressionScope.recordArrowParemeterBindingError(\n              TSErrors.UnexpectedTypeCastInParameter,\n              { at: node },\n            );\n          } else {\n            this.raise(TSErrors.UnexpectedTypeCastInParameter, { at: node });\n          }\n          this.toAssignable(node.expression, isLHS);\n          break;\n        case \"AssignmentExpression\":\n          if (!isLHS && node.left.type === \"TSTypeCastExpression\") {\n            node.left = this.typeCastToParameter(node.left);\n          }\n        /* fall through */\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean): void {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          this.toAssignable(node.expression, isLHS);\n          break;\n        default:\n          super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkToRestConversion(node: N.Node, allowPattern: boolean): void {\n      switch (node.type) {\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n        case \"TSNonNullExpression\":\n          this.checkToRestConversion(node.expression, false);\n          break;\n        default:\n          super.checkToRestConversion(node, allowPattern);\n      }\n    }\n\n    // @ts-expect-error plugin overrides interfaces\n    isValidLVal(\n      type:\n        | \"TSTypeCastExpression\"\n        | \"TSParameterProperty\"\n        | \"TSNonNullExpression\"\n        | \"TSAsExpression\"\n        | \"TSTypeAssertion\",\n      isUnparenthesizedInAssign: boolean,\n      binding: BindingTypes,\n    ) {\n      return (\n        getOwn(\n          {\n            // Allow \"typecasts\" to appear on the left of assignment expressions,\n            // because it may be in an arrow function.\n            // e.g. `const f = (foo: number = 0) => foo;`\n            TSTypeCastExpression: true,\n            TSParameterProperty: \"parameter\",\n            TSNonNullExpression: \"expression\",\n            TSAsExpression: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n            TSTypeAssertion: (binding !== BIND_NONE ||\n              !isUnparenthesizedInAssign) && [\"expression\", true],\n          },\n          type,\n        ) || super.isValidLVal(type, isUnparenthesizedInAssign, binding)\n      );\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      // handles `@f<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsParseTypeArgumentsInExpression();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(null, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(\n      close: typeof charCodes[keyof typeof charCodes],\n    ): boolean {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n        return false;\n      } else {\n        return super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(\n      startPos?: number | null,\n      startLoc?: Position | null,\n      left?: Pattern | null,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(TSErrors.TypeAnnotationAfterAssign, {\n          at: node.typeAnnotation,\n        });\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    reScan_lt() {\n      const { type } = this.state;\n      if (type === tt.bitShiftL) {\n        this.state.pos -= 2;\n        this.finishOp(tt.lt, 1);\n        return tt.lt;\n      }\n      return type;\n    }\n\n    toAssignableList(\n      exprList: Expression[],\n      trailingCommaLoc: Position | undefined | null,\n      isLHS: boolean,\n    ): void {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TSTypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(\n            expr as N.TsTypeCastExpression,\n          );\n        }\n      }\n      super.toAssignableList(exprList, trailingCommaLoc, isLHS);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(node.expression, node.typeAnnotation.loc.end);\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      // handles `<Component<<T>`\n      if (this.match(tt.lt) || this.match(tt.bitShiftL)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          // @ts-expect-error: refine typings\n          this.tsParseTypeArgumentsInExpression(),\n        );\n        // @ts-expect-error: refine typings\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T extends N.Class>(\n      node: Undone<T>,\n      isStatement: boolean,\n      optionalId?: boolean,\n    ): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node as any).abstract;\n      try {\n        return super.parseClass(node, isStatement, optionalId);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | undefined | null {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          node as N.ClassDeclaration,\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(TSErrors.NonClassMethodPropertyHasAbstractModifer, {\n            at: node,\n          });\n          return this.tsParseInterfaceDeclaration(\n            node as N.TsInterfaceDeclaration,\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod<\n      T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod,\n    >(\n      node: Undone<T>,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: T[\"type\"],\n      inClassScope?: boolean,\n    ) {\n      const method = super.parseMethod<T>(\n        node,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      // @ts-expect-error todo(flow->ts) property not defined for all types in union\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? // @ts-expect-error estree typings\n            !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(TSErrors.AbstractMethodHasImplementation, {\n            at: method,\n            methodName:\n              key.type === \"Identifier\" && !method.computed\n                ? key.name\n                : `[${this.input.slice(key.start, key.end)}]`,\n          });\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: Undone<N.ExportSpecifier>,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: Undone<N.ImportSpecifier>,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      bindingType: BindingTypes | undefined,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n        isInTypeOnlyImport ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const loc = leftOfAs.loc.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = isImport\n              ? this.parseIdentifier()\n              : this.parseModuleExportName();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = isImport\n            ? this.parseIdentifier()\n            : this.parseModuleExportName();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        if (isImport) {\n          leftOfAs = this.parseIdentifier(true);\n          if (!this.isContextual(tt._as)) {\n            this.checkReservedWord(\n              leftOfAs.name,\n              leftOfAs.loc.start,\n              true,\n              true,\n            );\n          }\n        } else {\n          leftOfAs = this.parseModuleExportName();\n        }\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n          { at: loc },\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkIdentifier(\n          node[rightOfAsKey],\n          hasTypeSpecifier ? BIND_TS_TYPE_IMPORT : BIND_FLAGS_TS_IMPORT,\n        );\n      }\n    }\n  };\n\nfunction isPossiblyLiteralEnum(expression: N.Expression): boolean {\n  if (expression.type !== \"MemberExpression\") return false;\n\n  const { computed, property } = expression;\n\n  if (\n    computed &&\n    property.type !== \"StringLiteral\" &&\n    (property.type !== \"TemplateLiteral\" || property.expressions.length > 0)\n  ) {\n    return false;\n  }\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n\nfunction isUncomputedMemberExpressionChain(expression: N.Expression): boolean {\n  if (expression.type === \"Identifier\") return true;\n  if (expression.type !== \"MemberExpression\") return false;\n  if (expression.computed) return false;\n\n  return isUncomputedMemberExpressionChain(expression.object);\n}\n","import * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type * as N from \"../types\";\nimport { ParseErrorEnum } from \"../parse-error\";\nimport type { Undone } from \"../parser/node\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport type { BindingTypes } from \"../util/scopeflags\";\nimport type { Position } from \"../util/location\";\n\ntype PossiblePlaceholedrs = {\n  Identifier: N.Identifier;\n  StringLiteral: N.StringLiteral;\n  Expression: N.Expression;\n  Statement: N.Statement;\n  Declaration: N.Declaration;\n  BlockStatement: N.BlockStatement;\n  ClassBody: N.ClassBody;\n  Pattern: N.Pattern;\n};\nexport type PlaceholderTypes = keyof PossiblePlaceholedrs;\n\ntype NodeOf<T extends keyof PossiblePlaceholedrs> = PossiblePlaceholedrs[T];\n// todo: when there  is proper union type for Node\n// type NodeOf<T extends PlaceholderTypes> = Extract<N.Node, { type: T }>;\n\n// todo: Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T extends PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\n/* eslint sort-keys: \"error\" */\nconst PlaceholderErrors = ParseErrorEnum`placeholders`({\n  ClassNameIsRequired: \"A class name is required.\",\n  UnexpectedSpace: \"Unexpected space in placeholder.\",\n});\n\n/* eslint-disable sort-keys */\n\nexport default (superClass: typeof Parser) =>\n  class PlaceholdersParserMixin extends superClass implements Parser {\n    parsePlaceholder<T extends PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ MaybePlaceholder<T> | undefined | null {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace();\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace();\n        this.expect(tt.placeholder);\n        // @ts-expect-error placeholder typings\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T extends PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      // @ts-expect-error todo(flow->ts)\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(\n      refExpressionErrors?: ExpressionErrors | null,\n    ): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") ||\n        super.parseExprAtom(refExpressionErrors)\n      );\n    }\n\n    parseIdentifier(liberal?: boolean): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(liberal)\n      );\n    }\n\n    checkReservedWord(\n      word: string,\n      startLoc: Position,\n      checkKeywords: boolean,\n      isBinding: boolean,\n    ) {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) {\n        super.checkReservedWord(word, startLoc, checkKeywords, isBinding);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom();\n    }\n\n    isValidLVal(type: string, isParenthesized: boolean, binding: BindingTypes) {\n      return (\n        type === \"Placeholder\" ||\n        super.isValidLVal(type, isParenthesized, binding)\n      );\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean): void {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n      } else {\n        super.toAssignable(node, isLHS);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context?: string | null): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(\n      node: N.BreakStatement | N.ContinueStatement,\n      isBreak: boolean,\n    ) {\n      // @ts-expect-error: node.label could be Placeholder\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(node, isBreak);\n    }\n\n    // @ts-expect-error Plugin will override parser interface\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        // @ts-expect-error placeholder typings\n        return super.parseExpressionStatement(node, expr);\n      }\n\n      if (this.match(tt.colon)) {\n        // @ts-expect-error placeholder typings\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = super.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(\n      allowDirectives?: boolean,\n      createNewLexicalScope?: boolean,\n      afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n    ): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(\n          allowDirectives,\n          createNewLexicalScope,\n          afterBlockParse,\n        )\n      );\n    }\n\n    parseFunctionId(\n      requireId?: boolean,\n    ): MaybePlaceholder<\"Identifier\"> | undefined | null {\n      return (\n        this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(requireId)\n      );\n    }\n    // @ts-expect-error Plugin will override parser interface\n    parseClass<T extends N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          throw this.raise(PlaceholderErrors.ClassNameIsRequired, {\n            at: this.state.startLoc,\n          });\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      super.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        super.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(node);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(node);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          // @ts-expect-error placeholder typings\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: Undone<N.ImportDeclaration>,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(node);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier =\n        this.startNodeAtNode<N.ImportDefaultSpecifier>(placeholder);\n      specifier.local = placeholder;\n      node.specifiers.push(\n        this.finishNode(specifier, \"ImportDefaultSpecifier\"),\n      );\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource()\n      );\n    }\n\n    // Throws if the current token and the prev one are separated by a space.\n    assertNoSpace(): void {\n      if (this.state.start > this.state.lastTokEndLoc.index) {\n        this.raise(PlaceholderErrors.UnexpectedSpace, {\n          at: this.state.lastTokEndLoc,\n        });\n      }\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport type { ExpressionErrors } from \"../parser/util\";\n\nexport default (superClass: typeof Parser) =>\n  class V8IntrinsicMixin extends superClass implements Parser {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStartLoc = this.state.startLoc;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode<N.Identifier>();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          // @ts-expect-error: avoid mutating AST types\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStartLoc);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(refExpressionErrors?: ExpressionErrors | null): N.Expression {\n      return (\n        this.parseV8Intrinsic() || super.parseExprAtom(refExpressionErrors)\n      );\n    }\n  };\n","import type Parser from \"./parser\";\nimport type {\n  ParserPluginWithOptions,\n  PluginConfig,\n  PluginOptions,\n} from \"./typings\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = PluginConfig[];\n\nexport type MixinPlugin = (superClass: { new (...args: any): Parser }) => {\n  new (...args: any): Parser;\n};\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        // @ts-expect-error key may not exist in plugin options\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption<\n  PluginName extends ParserPluginWithOptions[0],\n  OptionName extends keyof PluginOptions<PluginName>,\n>(plugins: PluginList, name: PluginName, option: OptionName) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin) && plugin.length > 1) {\n    return (plugin[1] as PluginOptions<PluginName>)[option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^^\", \"@@\", \"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (\n      decoratorsBeforeExport != null &&\n      typeof decoratorsBeforeExport !== \"boolean\"\n    ) {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n\n    const allowCallParenthesized = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"allowCallParenthesized\",\n    );\n    if (\n      allowCallParenthesized != null &&\n      typeof allowCallParenthesized !== \"boolean\"\n    ) {\n      throw new Error(\"'allowCallParenthesized' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVersionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVersionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\") != null &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"The 'syntaxType' option of the 'recordAndTuple' plugin must be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // @ts-expect-error so @babel/core can provide better error message\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames = Object.keys(mixinPlugins) as ReadonlyArray<\n  \"estree\" | \"jsx\" | \"flow\" | \"typescript\" | \"v8intrinsic\" | \"placeholders\"\n>;\n","import type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType;\n  sourceFilename?: string;\n  startColumn: number;\n  startLine: number;\n  allowAwaitOutsideFunction: boolean;\n  allowReturnOutsideFunction: boolean;\n  allowImportExportEverywhere: boolean;\n  allowSuperOutsideMethod: boolean;\n  allowUndeclaredExports: boolean;\n  plugins: PluginList;\n  strictMode: boolean | undefined | null;\n  ranges: boolean;\n  tokens: boolean;\n  createParenthesizedExpressions: boolean;\n  errorRecovery: boolean;\n  attachComment: boolean;\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts?: Options | null): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    // @ts-expect-error key may not exist in opts\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","import * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  AssignmentPattern,\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Identifier,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  ObjectOrClassMember,\n  ClassMember,\n  ObjectMember,\n  TsNamedTypeElementBase,\n  PrivateName,\n  ObjectExpression,\n  ObjectPattern,\n  ArrayExpression,\n  ArrayPattern,\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils, type Undone } from \"./node\";\nimport {\n  type BindingTypes,\n  BIND_NONE,\n  BIND_SCOPE_LEXICAL,\n} from \"../util/scopeflags\";\nimport type { ExpressionErrors } from \"./util\";\nimport { Errors, type LValAncestor } from \"../parse-error\";\nimport type Parser from \"./index\";\n\nconst getOwn = <T extends {}>(object: T, key: keyof T) =>\n  Object.hasOwnProperty.call(object, key) && object[key];\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default abstract class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  abstract parseIdentifier(liberal?: boolean): Identifier;\n  abstract parseMaybeAssign(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseMaybeAssignAllowIn(\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: Pos | null,\n  ): Expression;\n\n  abstract parseObjectLike<T extends ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): T;\n  abstract parseObjPropValue(\n    prop: any,\n    startPos: number | null,\n    startLoc: Position | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void;\n  abstract parsePropertyName(\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ): Expression | Identifier;\n  abstract parsePrivateName(): PrivateName;\n  // Forward-declaration: defined in statement.js\n  abstract parseDecorator(): Decorator;\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression.\n   *                                If isLHS is `true`, the following cases are allowed: `[(a)] = [0]`, `[(a.b)] = [0]`\n   *                                If isLHS is `false`, we are in an arrow function parameters list.\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): void {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordArrowParemeterBindingError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordArrowParemeterBindingError(\n            Errors.InvalidParenthesizedAssignment,\n            { at: node },\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n        }\n      } else {\n        this.raise(Errors.InvalidParenthesizedAssignment, { at: node });\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingCommaLoc\n          ) {\n            this.raise(Errors.RestTrailingComma, {\n              at: node.extra.trailingCommaLoc,\n            });\n          }\n        }\n        break;\n\n      case \"ObjectProperty\": {\n        const { key, value } = node;\n        if (this.isPrivateName(key)) {\n          this.classScope.usePrivateName(\n            this.getPrivateNameSV(key),\n            key.loc.start,\n          );\n        }\n        this.toAssignable(value, isLHS);\n        break;\n      }\n\n      case \"SpreadElement\": {\n        throw new Error(\n          \"Internal @babel/parser error (this is a bug, please report it).\" +\n            \" SpreadElement should be converted by .toAssignable's caller.\",\n        );\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(\n          node.elements,\n          node.extra?.trailingCommaLoc,\n          isLHS,\n        );\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(Errors.MissingEqInAssignment, { at: node.left.loc.end });\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      this.raise(\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod,\n        { at: prop.key },\n      );\n    } else if (prop.type === \"SpreadElement\") {\n      prop.type = \"RestElement\";\n      const arg = prop.argument;\n      this.checkToRestConversion(arg, /* allowPattern */ false);\n      this.toAssignable(arg, isLHS);\n\n      if (!isLast) {\n        this.raise(Errors.RestTrailingComma, { at: prop });\n      }\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaLoc: Position | undefined | null,\n    isLHS: boolean,\n  ): void {\n    const end = exprList.length - 1;\n\n    for (let i = 0; i <= end; i++) {\n      const elt = exprList[i];\n      if (!elt) continue;\n\n      if (elt.type === \"SpreadElement\") {\n        elt.type = \"RestElement\";\n        const arg = elt.argument;\n        this.checkToRestConversion(arg, /* allowPattern */ true);\n        this.toAssignable(arg, isLHS);\n      } else {\n        this.toAssignable(elt, isLHS);\n      }\n\n      if (elt.type === \"RestElement\") {\n        if (i < end) {\n          this.raise(Errors.RestTrailingComma, { at: elt });\n        } else if (trailingCommaLoc) {\n          this.raise(Errors.RestTrailingComma, { at: trailingCommaLoc });\n        }\n      }\n    }\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return (node.properties as ObjectExpression[\"properties\"]).every(\n          (prop, i) => {\n            return (\n              prop.type !== \"ObjectMethod\" &&\n              (i === last || prop.type !== \"SpreadElement\") &&\n              this.isAssignable(prop)\n            );\n          },\n        );\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return (node as ArrayExpression).elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isParenthesizedExpr?: boolean,\n  ): ReadonlyArray<Expression | undefined | null> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: ReadonlyArray<Expression | undefined | null>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): SpreadElement {\n    const node = this.startNode<SpreadElement>();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(this: Parser): RestElement {\n    const node = this.startNode<RestElement>();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(this: Parser): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode<ArrayPattern>();\n        this.next();\n        // @ts-expect-error: Fixme: TSParameterProperty can not be assigned to node.elements\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    this: Parser,\n    close: TokenType,\n    closeCharCode: typeof charCodes[keyof typeof charCodes],\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): Array<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        if (!this.checkCommaAfterRest(closeCharCode)) {\n          this.expect(close);\n          break;\n        }\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(Errors.UnsupportedParameterDecorator, {\n            at: this.state.startLoc,\n          });\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(\n    this: Parser,\n    prop: Undone<RestElement>,\n  ): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(this: Parser): ObjectMember | RestElement {\n    const prop = this.startNode<ObjectMember | RestElement>();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop as Undone<RestElement>);\n    } else if (type === tt.privateName) {\n      this.expectPlugin(\"destructuringPrivate\", startLoc);\n      this.classScope.usePrivateName(this.state.value, startLoc);\n      (prop as Undone<ObjectMember>).key = this.parsePrivateName();\n    } else {\n      this.parsePropertyName(prop as Undone<ObjectMember>);\n    }\n    (prop as Undone<ObjectMember>).method = false;\n    return this.parseObjPropValue(\n      prop as Undone<ObjectMember>,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n  }\n\n  parseAssignableListItem(\n    this: Parser,\n    allowModifiers: boolean | undefined | null,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    this: Parser,\n    startPos?: number | null,\n    startLoc?: Position | null,\n    left?: Pattern | null,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt<AssignmentPattern>(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n  /**\n   * Return information use in determining whether a Node of a given type is an LVal,\n   * possibly given certain additional context information.\n   *\n   * Subclasser notes: This method has kind of a lot of mixed, but related,\n   * responsibilities. If we can definitively determine with the information\n   * provided that this either *is* or *isn't* a valid `LVal`, then the return\n   * value is easy: just return `true` or `false`. However, if it is a valid\n   * LVal *ancestor*, and thus it's descendents must be subsquently visited to\n   * continue the \"investigation\", then this method should return the relevant\n   * child key as a `string`. In some special cases, you additionally want to\n   * convey that this node should be treated as if it were parenthesized. In\n   * that case, a tuple of [key: string, parenthesized: boolean] is returned.\n   * The `string`-only return option is actually just a shorthand for:\n   * `[key: string, parenthesized: false]`.\n   *\n   * @param {NodeType} type A Node `type` string\n   * @param {boolean} isUnparenthesizedInAssign\n   *        Whether the node in question is unparenthesized and its parent\n   *        is either an assignment pattern or an assignment expression.\n   * @param {BindingTypes} binding\n   *        The binding operation that is being considered for this potential\n   *        LVal.\n   * @returns { boolean | string | [string, boolean] }\n   *          `true` or `false` if we can immediately determine whether the node\n   *          type in question can be treated as an `LVal`.\n   *          A `string` key to traverse if we must check this child.\n   *          A `[string, boolean]` tuple if we need to check this child and\n   *          treat is as parenthesized.\n   */\n  isValidLVal(\n    type: string,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isUnparenthesizedInAssign: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    binding: BindingTypes,\n  ): string | boolean {\n    return getOwn(\n      {\n        AssignmentPattern: \"left\",\n        RestElement: \"argument\",\n        ObjectProperty: \"value\",\n        ParenthesizedExpression: \"expression\",\n        ArrayPattern: \"elements\",\n        ObjectPattern: \"properties\",\n      },\n      // @ts-expect-error refine string to enum\n      type,\n    );\n  }\n\n  /**\n   * Verify that a target expression is an lval (something that can be assigned to).\n   *\n   * @param {Expression} expression The expression in question to check.\n   * @param {Object} options A set of options described below.\n   * @param {LValAncestor} options.in\n   *        The relevant ancestor to provide context information for the error\n   *        if the check fails.\n   * @param {BindingTypes} [options.binding=BIND_NONE]\n   *        The desired binding type. If the given expression is an identifier\n   *        and `binding` is not `BIND_NONE`, `checkLVal` will register binding\n   *        to the parser scope See also `src/util/scopeflags.js`\n   * @param {Set<string>|false} [options.checkClashes=false]\n   *        An optional string set to check if an identifier name is included.\n   *        `checkLVal` will add checked identifier name to `checkClashes` It is\n   *        used in tracking duplicates in function parameter lists. If it is\n   *        false, `checkLVal` will skip duplicate checks\n   * @param {boolean} [options.allowingSloppyLetBinding]\n   *        Whether an identifier named \"let\" should be allowed in sloppy mode.\n   *        Defaults to `true` unless lexical scope its being used. This property\n   *        is only relevant if the parser's state is in sloppy mode.\n   * @param {boolean} [options.strictModeChanged=false]\n   *        Whether an identifier has been parsed in a sloppy context but should\n   *        be reinterpreted as strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @param {boolean} [options.hasParenthesizedAncestor=false]\n   *        This is only used internally during recursive calls, and you should\n   *        not have to set it yourself.\n   * @memberof LValParser\n   */\n\n  checkLVal(\n    expression: Expression | ObjectMember | RestElement,\n    {\n      in: ancestor,\n      binding = BIND_NONE,\n      checkClashes = false,\n      strictModeChanged = false,\n      allowingSloppyLetBinding = !(binding & BIND_SCOPE_LEXICAL),\n      hasParenthesizedAncestor = false,\n    }: {\n      in: LValAncestor;\n      binding?: BindingTypes;\n      checkClashes?: Set<string> | false;\n      strictModeChanged?: boolean;\n      allowingSloppyLetBinding?: boolean;\n      hasParenthesizedAncestor?: boolean;\n    },\n  ): void {\n    const type = expression.type;\n\n    // If we find here an ObjectMethod, it's because this was originally\n    // an ObjectExpression which has then been converted.\n    // toAssignable already reported this error with a nicer message.\n    if (this.isObjectMethod(expression)) return;\n\n    if (type === \"MemberExpression\") {\n      if (binding !== BIND_NONE) {\n        this.raise(Errors.InvalidPropertyBindingPattern, { at: expression });\n      }\n      return;\n    }\n\n    if (expression.type === \"Identifier\") {\n      this.checkIdentifier(\n        expression as Identifier,\n        binding,\n        strictModeChanged,\n        allowingSloppyLetBinding,\n      );\n\n      const { name } = expression as Identifier;\n\n      if (checkClashes) {\n        if (checkClashes.has(name)) {\n          this.raise(Errors.ParamDupe, { at: expression });\n        } else {\n          checkClashes.add(name);\n        }\n      }\n\n      return;\n    }\n\n    const validity = this.isValidLVal(\n      expression.type,\n      !(hasParenthesizedAncestor || expression.extra?.parenthesized) &&\n        ancestor.type === \"AssignmentExpression\",\n      binding,\n    );\n\n    if (validity === true) return;\n    if (validity === false) {\n      const ParseErrorClass =\n        binding === BIND_NONE ? Errors.InvalidLhs : Errors.InvalidLhsBinding;\n\n      this.raise(ParseErrorClass, {\n        at: expression,\n        ancestor:\n          ancestor.type === \"UpdateExpression\"\n            ? { type: \"UpdateExpression\", prefix: ancestor.prefix }\n            : { type: ancestor.type },\n      });\n      return;\n    }\n\n    const [key, isParenthesizedExpression] = Array.isArray(validity)\n      ? validity\n      : [validity, type === \"ParenthesizedExpression\"];\n    const nextAncestor =\n      expression.type === \"ArrayPattern\" ||\n      expression.type === \"ObjectPattern\" ||\n      expression.type === \"ParenthesizedExpression\"\n        ? expression\n        : ancestor;\n\n    // @ts-expect-error key may not index expression.\n    for (const child of [].concat(expression[key])) {\n      if (child) {\n        this.checkLVal(child, {\n          // @ts-expect-error: refine types\n          in: nextAncestor,\n          binding,\n          checkClashes,\n          allowingSloppyLetBinding,\n          strictModeChanged,\n          hasParenthesizedAncestor: isParenthesizedExpression,\n        });\n      }\n    }\n  }\n\n  checkIdentifier(\n    at: Identifier,\n    bindingType: BindingTypes,\n    strictModeChanged: boolean = false,\n    allowLetBinding: boolean = !(bindingType & BIND_SCOPE_LEXICAL),\n  ) {\n    if (\n      this.state.strict &&\n      (strictModeChanged\n        ? isStrictBindReservedWord(at.name, this.inModule)\n        : isStrictBindOnlyReservedWord(at.name))\n    ) {\n      if (bindingType === BIND_NONE) {\n        this.raise(Errors.StrictEvalArguments, { at, referenceName: at.name });\n      } else {\n        this.raise(Errors.StrictEvalArgumentsBinding, {\n          at,\n          bindingName: at.name,\n        });\n      }\n    }\n\n    if (!allowLetBinding && at.name === \"let\") {\n      this.raise(Errors.LetInLexicalBinding, { at });\n    }\n\n    if (!(bindingType & BIND_NONE)) {\n      this.declareNameFromIdentifier(at, bindingType);\n    }\n  }\n\n  declareNameFromIdentifier(identifier: Identifier, binding: BindingTypes) {\n    this.scope.declareName(identifier.name, binding, identifier.loc.start);\n  }\n\n  checkToRestConversion(node: Node, allowPattern: boolean): void {\n    switch (node.type) {\n      case \"ParenthesizedExpression\":\n        this.checkToRestConversion(node.expression, allowPattern);\n        break;\n      case \"Identifier\":\n      case \"MemberExpression\":\n        break;\n      case \"ArrayExpression\":\n      case \"ObjectExpression\":\n        if (allowPattern) break;\n      /* falls through */\n      default:\n        this.raise(Errors.InvalidRestAssignmentPattern, { at: node });\n    }\n  }\n\n  checkCommaAfterRest(\n    close: typeof charCodes[keyof typeof charCodes],\n  ): boolean {\n    if (!this.match(tt.comma)) {\n      return false;\n    }\n\n    this.raise(\n      this.lookaheadCharCode() === close\n        ? Errors.RestTrailingComma\n        : Errors.ElementAfterRest,\n      { at: this.state.startLoc },\n    );\n\n    return true;\n  }\n}\n","// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport type * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport type { ParamKind } from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, type ParseError } from \"../parse-error\";\nimport { UnparenthesizedPipeBodyDescriptions } from \"../parse-error/pipeline-operator-errors\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \".\";\n\nimport type { SourceType } from \"../options\";\n\nexport default abstract class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  abstract parseBlock(\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement;\n  abstract parseClass(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ): N.Class;\n  abstract parseDecorators(allowExport?: boolean): void;\n  abstract parseFunction<T extends N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ): T;\n  abstract parseFunctionParams(\n    node: N.Function,\n    allowModifiers?: boolean,\n  ): void;\n  abstract takeDecorators(node: N.HasDecorators): void;\n  abstract parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: N.Directive[] | null | undefined,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void;\n  abstract parseProgram(\n    program: N.Program,\n    end: TokenType,\n    sourceType?: SourceType,\n  ): N.Program;\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: boolean | undefined | null,\n    protoRef: {\n      used: boolean;\n    },\n    refExpressionErrors?: ExpressionErrors | null,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // @ts-expect-error prop must be an ObjectProperty\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(Errors.RecordNoProto, { at: key });\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProtoLoc === null) {\n            refExpressionErrors.doubleProtoLoc = key.loc.start;\n          }\n        } else {\n          this.raise(Errors.DuplicateProto, { at: key });\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(this: Parser): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    // @ts-expect-error fixme: refine types\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    this: Parser,\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParseError<any>,\n  ) {\n    refExpressionErrors.optionalParametersLoc =\n      resultError?.loc ?? this.state.startLoc;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt<N.AssignmentExpression>(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        this.toAssignable(left, /* isLHS */ true);\n        node.left = left;\n\n        if (\n          refExpressionErrors.doubleProtoLoc != null &&\n          refExpressionErrors.doubleProtoLoc.index >= startPos\n        ) {\n          refExpressionErrors.doubleProtoLoc = null; // reset because double __proto__ is valid in assignment expression\n        }\n        if (\n          refExpressionErrors.shorthandAssignLoc != null &&\n          refExpressionErrors.shorthandAssignLoc.index >= startPos\n        ) {\n          refExpressionErrors.shorthandAssignLoc = null; // reset because shorthand default was used correctly\n        }\n        if (\n          refExpressionErrors.privateKeyLoc != null &&\n          refExpressionErrors.privateKeyLoc.index >= startPos\n        ) {\n          this.checkDestructuringPrivate(refExpressionErrors);\n          refExpressionErrors.privateKeyLoc = null; // reset because `({ #x: x })` is an assignable pattern\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.next();\n      node.right = this.parseMaybeAssign();\n      this.checkLVal(left, {\n        in: this.finishNode(node, \"AssignmentExpression\"),\n      });\n      // @ts-expect-error todo(flow->ts) improve node types\n      return node;\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    this: Parser,\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(\n    this: Parser,\n    refExpressionErrors: ExpressionErrors,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    this: Parser,\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: left,\n          identifierName: value,\n        });\n      }\n\n      this.classScope.usePrivateName(value, left.loc.start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartLoc);\n        }\n        const node = this.startNodeAt<N.LogicalExpression | N.BinaryExpression>(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(Errors.UnexpectedAwaitAfterPipelineBody, {\n              at: this.state.startLoc,\n            });\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        const finishedNode = this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(Errors.MixingCoalesceWithLogical, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return this.parseExprOp(\n          finishedNode,\n          leftStartPos,\n          leftStartLoc,\n          minPrec,\n        );\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(Errors.PipeBodyIsTighter, {\n                  at: this.state.startLoc,\n                });\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(\n    this: Parser,\n    op: TokenType,\n    prec: number,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(this: Parser): N.Expression {\n    const { startLoc } = this.state;\n    const body = this.parseMaybeAssign();\n    const requiredParentheses = UnparenthesizedPipeBodyDescriptions.has(\n      // @ts-expect-error TS2345: Argument of type 'string' is not assignable to parameter of type '\"ArrowFunctionExpression\" | \"YieldExpression\" | \"AssignmentExpression\" | \"ConditionalExpression\"'.\n      body.type,\n    );\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (requiredParentheses && !body.extra?.parenthesized) {\n      this.raise(Errors.PipeUnparenthesizedBody, {\n        at: startLoc,\n        // @ts-expect-error TS2322: Type 'string' is not assignable to type '\"AssignmentExpression\" | \"ArrowFunctionExpression\" | \"ConditionalExpression\" | \"YieldExpression\"'.\n        type: body.type,\n      });\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(Errors.PipeTopicUnused, { at: startLoc });\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(\n    node: N.AwaitExpression | Undone<N.UnaryExpression>,\n  ) {\n    if (this.match(tt.exponent)) {\n      this.raise(Errors.UnexpectedTokenUnaryExponentiation, {\n        at: node.argument,\n      });\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode<N.UnaryExpression | N.UpdateExpression>();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(Errors.StrictDelete, { at: node });\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(Errors.DeletePrivateField, { at: node });\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) {\n          this.checkExponentialAfterUnary(node as Undone<N.UnaryExpression>);\n        }\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(\n      // @ts-expect-error using \"Undone\" node as \"done\"\n      node,\n      update,\n      refExpressionErrors,\n    );\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(Errors.AwaitNotInAsyncContext, { at: startLoc });\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    this: Parser,\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    if (update) {\n      // @ts-expect-error Type 'Node' is missing the following properties from type 'Undone<UpdateExpression>': prefix, operator, argument\n      const updateExpressionNode = node as Undone<N.UpdateExpression>;\n      this.checkLVal(updateExpressionNode.argument, {\n        in: this.finishNode(updateExpressionNode, \"UpdateExpression\"),\n      });\n      return node;\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt<N.UpdateExpression>(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.next();\n      this.checkLVal(expr, {\n        in: (expr = this.finishNode(node, \"UpdateExpression\")),\n      });\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: boolean | null,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt<\n      N.OptionalMemberExpression | N.MemberExpression\n    >(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(Errors.SuperPrivateField, { at: startLoc });\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.startLoc);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      (node as N.OptionalMemberExpression).optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: boolean | undefined | null,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors: ExpressionErrors | null = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    const node = this.startNodeAt<N.CallExpression | N.OptionalCallExpression>(\n      startPos,\n      startLoc,\n    );\n    node.callee = base;\n    const { maybeAsyncArrow, optionalChainMember } = state;\n\n    if (maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (optionalChainMember) {\n      // @ts-expect-error when optionalChainMember is true, node must be an optional call\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        // @ts-expect-error todo(flow->ts)\n        node,\n        refExpressionErrors,\n      );\n    }\n    let finishedNode:\n      | N.CallExpression\n      | N.OptionalCallExpression\n      | N.ArrowFunctionExpression = this.finishCallExpression(\n      node,\n      optionalChainMember,\n    );\n\n    if (maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      /*:: invariant(refExpressionErrors != null) */\n      state.stop = true;\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      finishedNode = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt<N.ArrowFunctionExpression>(startPos, startLoc),\n        finishedNode as N.CallExpression,\n      );\n    } else {\n      if (maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(finishedNode);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return finishedNode;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    this: Parser,\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node = this.startNodeAt<N.TaggedTemplateExpression>(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(Errors.OptionalChainingNoTemplate, { at: startLoc });\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEndLoc.index === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T extends N.CallExpression | N.OptionalCallExpression>(\n    node: Undone<T>,\n    optional: boolean,\n  ): T {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(Errors.ImportCallArity, {\n          at: node,\n          maxArgumentCount:\n            this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n              ? 2\n              : 1,\n        });\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(Errors.ImportCallSpreadArgument, { at: arg });\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    this: Parser,\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: N.Node | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): Array<N.Expression | undefined | null> {\n    const elts: N.Expression[] = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(Errors.ImportCallArgumentTrailingComma, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingCommaLoc,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node as N.ArrowFunctionExpression;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(this: Parser): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode<N.MetaProperty | N.Import>();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node as Undone<N.MetaProperty>);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(Errors.UnsupportedImport, {\n            at: this.state.lastTokStartLoc,\n          });\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode<N.Class>();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(Errors.UnsupportedBind, { at: callee });\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(Errors.PrivateInExpectedIn, {\n          at: this.state.startLoc,\n          identifierName: this.state.value,\n        });\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.doubleCaret:\n      case tt.doubleAt: {\n        return this.parseTopicReference(\"hack\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types), and if the\n  // Hack-pipes proposal is active with ^ or % as its topicToken, then the ^ or\n  // % could be the topic token (e.g., in x |> ^==y or x |> ^===y), and so we\n  // reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”, so that the\n      // following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      // This is safe to do since the preceding character was either ^ or %, and\n      // thus not a newline.\n      this.state.endLoc = createPositionWithColumnOffset(this.state.endLoc, -1);\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode<N.TopicReference>();\n    const startLoc = this.state.startLoc;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, startLoc, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: Undone<N.Node>,\n    startLoc: Position,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (\n      this.testTopicReferenceConfiguration(pipeProposal, startLoc, tokenType)\n    ) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      const nodeType =\n        pipeProposal === \"smart\"\n          ? \"PipelinePrimaryTopicReference\"\n          : // The proposal must otherwise be \"hack\",\n            // as enforced by testTopicReferenceConfiguration.\n            \"TopicReference\";\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        this.raise(\n          // The topic reference is not allowed in the current context:\n          // it is outside of a pipe body.\n          // Raise recoverable errors.\n          pipeProposal === \"smart\"\n            ? Errors.PrimaryTopicNotAllowed\n            : // In this case, `pipeProposal === \"hack\"` is true.\n              Errors.PipeTopicUnbound,\n          { at: startLoc },\n        );\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(Errors.PipeTopicUnconfiguredToken, {\n        at: startLoc,\n        token: tokenLabelName(tokenType),\n      });\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    startLoc: Position,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            // @ts-expect-error token must have a label\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(Errors.PipeTopicRequiresHackPipes, { at: startLoc });\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n  ): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.LineTerminatorBeforeArrow, {\n        at: this.state.curPosition(),\n      });\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    return this.parseArrowExpression(node, params, true);\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(\n    this: Parser,\n    node: Undone<N.DoExpression>,\n    isAsync: boolean,\n  ): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode<N.Super>();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.SuperNotAllowed, { at: node });\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(Errors.UnexpectedSuper, { at: node });\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(Errors.UnsupportedSuper, { at: node });\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode<N.PrivateName>();\n    const id = this.startNodeAt<N.Identifier>(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n        this.state.start + 1,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(\n    this: Parser,\n  ): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode<N.FunctionExpression | N.MetaProperty>();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"sent\",\n      );\n    }\n    return this.parseFunction(node as Undone<N.FunctionExpression>);\n  }\n\n  parseMetaProperty(\n    node: Undone<N.MetaProperty>,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(Errors.UnsupportedMetaProperty, {\n        at: node.property,\n        target: meta.name,\n        onlyValidPropertyName: propertyName,\n      });\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: Undone<N.MetaProperty>): N.MetaProperty {\n    const id = this.createIdentifier(\n      this.startNodeAtNode<N.Identifier>(node),\n      \"import\",\n    );\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(Errors.ImportMetaOutsideModule, { at: id });\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T extends N.Node>(\n    value: any,\n    type: T[\"type\"],\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T extends N.Node>(value: any, type: T[\"type\"]): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: {\n    value: any;\n    pattern: string;\n    flags: N.RegExpLiteral[\"flags\"];\n  }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode<N.BooleanLiteral>();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode<N.NullLiteral>();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(\n    this: Parser,\n    canBeArrow: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList: N.Expression[] = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStartLoc;\n    let optionalCommaStartLoc;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParametersLoc === null\n            ? null\n            : refExpressionErrors.optionalParametersLoc,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStartLoc = this.state.startLoc;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStartLoc = this.state.startLoc;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        if (!this.checkCommaAfterRest(charCodes.rightParenthesis)) {\n          break;\n        }\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt<N.ArrowFunctionExpression>(\n      startPos,\n      startLoc,\n    );\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      // @ts-expect-error todo(flow->ts) improve node types\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStartLoc);\n    }\n    if (optionalCommaStartLoc) this.unexpected(optionalCommaStartLoc);\n    if (spreadStartLoc) this.unexpected(spreadStartLoc);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt<N.SequenceExpression>(\n        innerStartPos,\n        innerStartLoc,\n      );\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    return this.wrapParenthesis(\n      startPos,\n      startLoc,\n      // @ts-expect-error todo(flow->ts)\n      val,\n    );\n  }\n\n  wrapParenthesis(\n    startPos: number,\n    startLoc: Position,\n    expression: N.Expression,\n  ): N.Expression {\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(expression, \"parenthesized\", true);\n      this.addExtra(expression, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(\n        expression,\n        startPos,\n        this.state.lastTokEndLoc.index,\n      );\n\n      return expression;\n    }\n\n    const parenExpression = this.startNodeAt<N.ParenthesizedExpression>(\n      startPos,\n      startLoc,\n    );\n    parenExpression.expression = expression;\n    return this.finishNode(parenExpression, \"ParenthesizedExpression\");\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(\n    node: Undone<N.ArrowFunctionExpression>,\n  ): Undone<N.ArrowFunctionExpression> | undefined {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startPos: number,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    startLoc: Position,\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(this: Parser): N.NewExpression | N.MetaProperty {\n    const node = this.startNode<N.NewExpression | N.MetaProperty>();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(\n        this.startNodeAtNode<N.Identifier>(node),\n        \"new\",\n      );\n      this.next();\n      const metaProp = this.parseMetaProperty(\n        node as Undone<N.MetaProperty>,\n        meta,\n        \"target\",\n      );\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(Errors.UnexpectedNewTarget, { at: metaProp });\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node as Undone<N.NewExpression>);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(this: Parser, node: Undone<N.NewExpression>): N.NewExpression {\n    this.parseNewCallee(node);\n\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewCallee(this: Parser, node: Undone<N.NewExpression>): void {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(Errors.ImportCallNotNewExpression, { at: node.callee });\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.lastTokEndLoc,\n      });\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(Errors.OptionalChainingNoNew, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, startLoc, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt<N.TemplateElement>(\n      elemStart,\n      createPositionWithColumnOffset(startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(Errors.InvalidEscapeSequenceTemplate, {\n          // FIXME: Adding 1 is probably wrong.\n          at: createPositionWithColumnOffset(\n            this.state.firstInvalidTemplateEscapePos,\n            1,\n          ),\n        });\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    const finishedNode = this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      finishedNode,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return finishedNode;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(this: Parser, isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode<N.TemplateLiteral>();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(this: Parser): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike(\n    close: TokenType,\n    isPattern: true,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectPattern;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: false | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectExpression;\n  parseObjectLike(\n    close: TokenType,\n    isPattern: false,\n    isRecord?: true,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.RecordExpression;\n  parseObjectLike<T extends N.ObjectPattern | N.ObjectExpression>(\n    this: Parser,\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode<\n      N.ObjectExpression | N.ObjectPattern | N.RecordExpression\n    >();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addTrailingCommaExtraToNode(\n            // @ts-expect-error todo(flow->ts) improve node types\n            node,\n          );\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(Errors.InvalidRecordProperty, { at: prop });\n      }\n\n      // @ts-expect-error shorthand may not index prop\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      // @ts-expect-error Fixme: refine typings\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    // @ts-expect-error type is well defined\n    return this.finishNode(node, type);\n  }\n\n  addTrailingCommaExtraToNode(node: N.Node): void {\n    this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n    this.addExtra(node, \"trailingCommaLoc\", this.state.lastTokStartLoc, false);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: Undone<N.ObjectProperty>): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    this: Parser,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(Errors.UnsupportedPropertyDecorator, {\n          at: this.state.startLoc,\n        });\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode<N.ObjectProperty>();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop, refExpressionErrors);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(Errors.AccessorIsGenerator, {\n            at: this.state.curPosition(),\n            kind: keyName,\n          });\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    return this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length !== paramCount) {\n      this.raise(\n        method.kind === \"get\" ? Errors.BadGetterArity : Errors.BadSetterArity,\n        { at: method },\n      );\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(Errors.BadSetterRestParameter, { at: method });\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    this: Parser,\n    prop: Undone<N.ObjectMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): N.ObjectMethod | undefined | null {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      const finishedProp = this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(finishedProp);\n      return finishedProp;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    this: Parser,\n    prop: Undone<N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isPattern: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectProperty | undefined | null {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.loc.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssignLoc = this.state.startLoc;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssignLoc === null) {\n            refExpressionErrors.shorthandAssignLoc = shorthandAssignLoc;\n          }\n        } else {\n          this.raise(Errors.InvalidCoverInitializedName, {\n            at: shorthandAssignLoc,\n          });\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    this: Parser,\n    prop: Undone<N.ObjectMethod | N.ObjectProperty>,\n    startPos: number | undefined | null,\n    startLoc: Position | undefined | null,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ObjectMethod | N.ObjectProperty {\n    const node =\n      this.parseObjectMethod(\n        prop as Undone<N.ObjectMethod>,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop as Undone<N.ObjectProperty>,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    return node;\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyName\n  // when refExpressionErrors presents, it will parse private name\n  // and record the position of the first private name\n  parsePropertyName(\n    this: Parser,\n    prop:\n      | Undone<N.ObjectOrClassMember | N.ClassMember>\n      | N.TsNamedTypeElementBase,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop as Undone<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyLoc = this.state.startLoc;\n            if (refExpressionErrors != null) {\n              if (refExpressionErrors.privateKeyLoc === null) {\n                refExpressionErrors.privateKeyLoc = privateKeyLoc;\n              }\n            } else {\n              this.raise(Errors.UnexpectedPrivateField, {\n                at: privateKeyLoc,\n              });\n            }\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop as any).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(\n    node: N.BodilessFunctionOrMethodBase,\n    isAsync?: boolean | null,\n  ): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T extends N.ObjectMethod | N.ClassMethod | N.ClassPrivateMethod>(\n    this: Parser,\n    node: Undone<T>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: T[\"type\"],\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    const finishedNode = this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return finishedNode;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    this: Parser,\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode<N.ArrayExpression | N.TupleExpression>();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    this: Parser,\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[] | undefined | null,\n    isAsync: boolean,\n    trailingCommaLoc?: Position | null,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody[In] :\n    //   [lookahead ≠ {] ExpressionBody[?In, ~Await]\n    //   { FunctionBody[~Yield, ~Await] }\n    if (!this.match(tt.braceL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaLoc);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: Undone<N.ArrowFunctionExpression>,\n    params: N.Expression[],\n    trailingCommaLoc?: Position | null,\n  ): void {\n    this.toAssignableList(params, trailingCommaLoc, false);\n    node.params = params as (N.Pattern | N.TSParameterProperty)[];\n  }\n\n  parseFunctionBodyAndFinish<\n    T extends\n      | N.Function\n      | N.TSDeclareMethod\n      | N.TSDeclareFunction\n      | N.ClassPrivateMethod,\n  >(node: Undone<T>, type: T[\"type\"], isMethod: boolean = false): T {\n    // @ts-expect-error (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    return this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowExpression?: boolean | null,\n    isMethod: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      (node as Undone<N.ArrowFunctionExpression>).body =\n        this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(\n        (this.prodParam.currentFlags() | PARAM_RETURN) as ParamKind,\n      );\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            this.raise(Errors.IllegalLanguageModeDirective, {\n              at:\n                // @ts-expect-error kind may not index node\n                (node.kind === \"method\" || node.kind === \"constructor\") &&\n                // @ts-expect-error key may not index node\n                !!node.key\n                  ? // @ts-expect-error node.key has been gaurded\n                    node.key.loc.end\n                  : node,\n            });\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkIdentifier(node.id, BIND_OUTSIDE, strictModeChanged);\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParameter(node: N.Pattern | N.TSParameterProperty) {\n    return node.type === \"Identifier\";\n  }\n\n  isSimpleParamList(\n    params: ReadonlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (!this.isSimpleParameter(params[i])) return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: Undone<N.Function>,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    isArrowFunction?: boolean | null,\n    strictModeChanged: boolean = true,\n  ): void {\n    const checkClashes = !allowDuplicates && new Set<string>();\n    // We create a fake node with the \"ephemeral\" type `FormalParameters`[1]\n    // since we just store an array of parameters. Perhaps someday we can have\n    // something like class FormalParameters extends Array { ... }, which would\n    // also be helpful when traversing this node.\n    //\n    // 1. https://tc39.es/ecma262/#prod-FormalParameters\n    const formalParameters = { type: \"FormalParameters\" } as const;\n    for (const param of node.params) {\n      this.checkLVal(param, {\n        in: formalParameters,\n        binding: BIND_VAR,\n        checkClashes,\n        strictModeChanged,\n      });\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    this: Parser,\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    nodeForExtra?: N.Node | null,\n  ): (N.Expression | null)[] {\n    const elts: (N.Expression | null)[] = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addTrailingCommaExtraToNode(nodeForExtra);\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: false,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression;\n  parseExprListItem(\n    this: Parser,\n    allowEmpty?: boolean | null,\n    refExpressionErrors?: ExpressionErrors | null,\n    allowPlaceholder?: boolean | null,\n  ): N.Expression | null {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(Errors.UnexpectedToken, {\n          at: this.state.curPosition(),\n          unexpected: \",\",\n        });\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(Errors.UnexpectedArgumentPlaceholder, {\n          at: this.state.startLoc,\n        });\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode<N.Identifier>();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(\n    node: Omit<N.Identifier, \"type\">,\n    name: string,\n  ): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { startLoc, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, startLoc, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: Position,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(Errors.YieldBindingIdentifier, { at: startLoc });\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(Errors.AwaitBindingIdentifier, { at: startLoc });\n        return;\n      }\n\n      if (this.scope.inStaticBlock) {\n        this.raise(Errors.AwaitBindingIdentifierInStaticBlock, {\n          at: startLoc,\n        });\n        return;\n      }\n\n      this.expressionScope.recordAsyncArrowParametersError({ at: startLoc });\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(Errors.ArgumentsInClass, { at: startLoc });\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(Errors.UnexpectedKeyword, {\n        at: startLoc,\n        keyword: word,\n      });\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(Errors.UnexpectedReservedWord, {\n        at: startLoc,\n        reservedWord: word,\n      });\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(\n    this: Parser,\n    startPos: number,\n    startLoc: Position,\n  ): N.AwaitExpression {\n    const node = this.startNodeAt<N.AwaitExpression>(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.AwaitExpressionFormalParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(Errors.ObsoleteAwaitStar, { at: node });\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(this: Parser): N.YieldExpression {\n    const node = this.startNode<N.YieldExpression>();\n\n    this.expressionScope.recordParameterInitializerError(\n      Errors.YieldInParameter,\n      {\n        // @ts-expect-error todo(flow->ts)\n        at: node,\n      },\n    );\n\n    this.next();\n    let delegating = false;\n    let argument: N.Expression | null = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartLoc: Position) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(Errors.PipelineHeadSequenceExpression, {\n          at: leftStartLoc,\n        });\n      }\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ) {\n    if (this.isSimpleReference(childExpr)) {\n      const bodyNode = this.startNodeAt<N.PipelineBareFunction>(\n        startPos,\n        startLoc,\n      );\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      const bodyNode = this.startNodeAt<N.PipelineTopicExpression>(\n        startPos,\n        startLoc,\n      );\n      this.checkSmartPipeTopicBodyEarlyErrors(startLoc);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startLoc` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startLoc: Position): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(Errors.PipelineBodyNoArrow, { at: this.state.startLoc });\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(Errors.PipelineTopicUnused, { at: startLoc });\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(this: Parser, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(this: Parser): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.expect(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    prop: Undone<N.ObjectOrClassMember | N.ClassMember>,\n  ): void {}\n}\n","import type * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors } from \"../parse-error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport type { Position } from \"../util/location\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier, type Undone } from \"./node\";\nimport type Parser from \"./index\";\n\nconst loopLabel = { kind: \"loop\" } as const,\n  switchLabel = { kind: \"switch\" } as const;\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens: (Token | N.Comment)[], input: string) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            startToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            new Token({\n              // @ts-expect-error: hacky way to create token\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // @ts-expect-error: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default abstract class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(this: Parser, file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    this: Parser,\n    program: Undone<N.Program>,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [localName, at] of Array.from(this.scope.undefinedExports)) {\n        this.raise(Errors.ModuleExportUndefined, { at, localName });\n      }\n    }\n    if (end === tt.eof) {\n      this.next(); // consume eof for the top level program\n    }\n    return this.finishNode(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = stmt as any;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode<N.InterpreterDirective>();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context?: string | null): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context?: string | null): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean,\n  ): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(\n    this: Parser,\n    context?: string | null,\n    topLevel?: boolean | null,\n  ): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node as Undone<N.DebuggerStatement>);\n      case tt._do:\n        return this.parseDoStatement(node as Undone<N.DoWhileStatement>);\n      case tt._for:\n        return this.parseForStatement(node as Undone<N.ForStatement>);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(Errors.StrictFunction, { at: this.state.startLoc });\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(Errors.SloppyFunction, { at: this.state.startLoc });\n          }\n        }\n        return this.parseFunctionStatement(\n          node as Undone<N.FunctionDeclaration>,\n          false,\n          !context,\n        );\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node as Undone<N.ClassDeclaration>, true);\n\n      case tt._if:\n        return this.parseIfStatement(node as Undone<N.IfStatement>);\n      case tt._return:\n        return this.parseReturnStatement(node as Undone<N.ReturnStatement>);\n      case tt._switch:\n        return this.parseSwitchStatement(node as Undone<N.SwitchStatement>);\n      case tt._throw:\n        return this.parseThrowStatement(node as Undone<N.ThrowStatement>);\n      case tt._try:\n        return this.parseTryStatement(node as Undone<N.TryStatement>);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(Errors.UnexpectedLexicalDeclaration, {\n            at: this.state.startLoc,\n          });\n        }\n        return this.parseVarStatement(\n          node as Undone<N.VariableDeclaration>,\n          kind,\n        );\n\n      case tt._while:\n        return this.parseWhileStatement(node as Undone<N.WhileStatement>);\n      case tt._with:\n        return this.parseWithStatement(node as Undone<N.WithStatement>);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node as Undone<N.EmptyStatement>);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(Errors.UnexpectedImportExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node as Undone<N.ImportDeclaration>);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(\n            node as Undone<\n              | N.ExportAllDeclaration\n              | N.ExportDefaultDeclaration\n              | N.ExportDefaultDeclaration\n            >,\n          );\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(result);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(Errors.AsyncFunctionInSingleStatementContext, {\n              at: this.state.startLoc,\n            });\n          }\n          this.next();\n          return this.parseFunctionStatement(\n            node as Undone<N.FunctionDeclaration>,\n            true,\n            !context,\n          );\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(\n        node as Undone<N.LabeledStatement>,\n        maybeName,\n        // @ts-expect-error migrate to Babel types\n        expr,\n        context,\n      );\n    } else {\n      return this.parseExpressionStatement(\n        node as Undone<N.ExpressionStatement>,\n        expr,\n      );\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(Errors.ImportOutsideModule, { at: node });\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(this: Parser, allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorExportClass, { at: this.state.startLoc });\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(Errors.UnexpectedLeadingDecorator, {\n        at: this.state.startLoc,\n      });\n    }\n  }\n\n  parseDecorator(this: Parser): N.Decorator {\n    this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n    const node = this.startNode<N.Decorator>();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.match(tt.parenL)) {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        this.next(); // eat '('\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n        expr = this.wrapParenthesis(startPos, startLoc, expr);\n\n        const paramsStartLoc = this.state.startLoc;\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n        if (\n          this.getPluginOption(\"decorators\", \"allowCallParenthesized\") ===\n            false &&\n          node.expression !== expr\n        ) {\n          this.raise(Errors.DecoratorArgumentsOutsideParentheses, {\n            at: paramsStartLoc,\n          });\n        }\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          if (this.match(tt.privateName)) {\n            this.classScope.usePrivateName(\n              this.state.value,\n              this.state.startLoc,\n            );\n            node.property = this.parsePrivateName();\n          } else {\n            node.property = this.parseIdentifier(true);\n          }\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n\n        node.expression = this.parseMaybeDecoratorArguments(expr);\n      }\n\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(this: Parser, expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: true,\n  ): N.BreakStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.Node>,\n    isBreak: false,\n  ): N.ContinueStatement;\n  parseBreakContinueStatement(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: Undone<N.BreakStatement | N.ContinueStatement>,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      const type = isBreak ? \"BreakStatement\" : \"ContinueStatement\";\n      this.raise(Errors.IllegalBreakContinue, { at: node, type });\n    }\n  }\n\n  parseDebuggerStatement(\n    node: Undone<N.DebuggerStatement>,\n  ): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(this: Parser): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(\n    this: Parser,\n    node: Undone<N.DoWhileStatement>,\n  ): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(\n    this: Parser,\n    node: Undone<N.ForStatement | N.ForInOf>,\n  ): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = null;\n\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStartLoc;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const initNode = this.startNode<N.VariableDeclaration>();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(initNode, true, kind);\n      const init = this.finishNode(initNode, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node as Undone<N.ForInOf>, init, awaitAt);\n      }\n      if (awaitAt !== null) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node as Undone<N.ForStatement>, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(Errors.ForOfLet, { at: init });\n      }\n\n      if (\n        // `for await (async of []);` is allowed.\n        awaitAt === null &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(Errors.ForOfAsync, { at: init });\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.checkDestructuringPrivate(refExpressionErrors);\n      this.toAssignable(init, /* isLHS */ true);\n      const type = isForOf ? \"ForOfStatement\" : \"ForInStatement\";\n      this.checkLVal(init, { in: { type } });\n      return this.parseForIn(\n        node as Undone<N.ForInStatement | N.ForOfStatement>,\n        // @ts-expect-error init has been transformed to an assignable\n        init,\n        awaitAt,\n      );\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt !== null) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node as Undone<N.ForStatement>, init);\n  }\n\n  parseFunctionStatement(\n    this: Parser,\n    node: Undone<N.FunctionDeclaration>,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(this: Parser, node: Undone<N.IfStatement>) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(this: Parser, node: Undone<N.ReturnStatement>) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(Errors.IllegalReturn, { at: this.state.startLoc });\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(this: Parser, node: Undone<N.SwitchStatement>) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases: N.SwitchStatement[\"cases\"] = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        // @ts-expect-error Fixme\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(Errors.MultipleDefaultsInSwitch, {\n              at: this.state.lastTokStartLoc,\n            });\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(this: Parser, node: Undone<N.ThrowStatement>) {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(Errors.NewlineAfterThrow, { at: this.state.lastTokEndLoc });\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(this: Parser): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, {\n      in: { type: \"CatchClause\" },\n      binding: BIND_LEXICAL,\n      allowingSloppyLetBinding: true,\n    });\n\n    return param;\n  }\n\n  parseTryStatement(\n    this: Parser,\n    node: Undone<N.TryStatement>,\n  ): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode<N.CatchClause>();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(Errors.NoCatchOrFinally, { at: node });\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind, allowMissingInitializer);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(\n    this: Parser,\n    node: Undone<N.WhileStatement>,\n  ): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(\n    this: Parser,\n    node: Undone<N.WithStatement>,\n  ): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(Errors.StrictWith, { at: this.state.startLoc });\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: Undone<N.EmptyStatement>): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    this: Parser,\n    node: Undone<N.LabeledStatement>,\n    maybeName: string,\n    expr: N.Identifier,\n    context?: string | null,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(Errors.LabelRedeclaration, {\n          at: expr,\n          labelName: maybeName,\n        });\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: Undone<N.ExpressionStatement>,\n    expr: N.Expression,\n  ) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    this: Parser,\n    allowDirectives: boolean = false,\n    createNewLexicalScope: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode<N.BlockStatement>();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    this.next(); // eat tt.braceR\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    this: Parser,\n    node: Undone<N.BlockStatementLike>,\n    allowDirectives: boolean | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body: N.BlockStatementLike[\"body\"] = (node.body = []);\n    const directives: N.BlockStatementLike[\"directives\"] = (node.directives =\n      []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    this: Parser,\n    body: N.Statement[],\n    directives: N.Directive[] | undefined | null,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    this: Parser,\n    node: Undone<N.ForStatement>,\n    init?: N.VariableDeclaration | N.Expression | null,\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    this: Parser,\n    node: Undone<N.ForInOf>,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt?: Position | null,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt !== null) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt !== null;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(Errors.ForInOfLoopInitializer, {\n        at: init,\n        type: isForIn ? \"ForInStatement\" : \"ForOfStatement\",\n      });\n    }\n\n    if (init.type === \"AssignmentPattern\") {\n      this.raise(Errors.InvalidLhs, {\n        at: init,\n        ancestor: { type: \"ForStatement\" },\n      });\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    this: Parser,\n    node: Undone<N.VariableDeclaration>,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n    allowMissingInitializer: boolean = false,\n  ): Undone<N.VariableDeclaration> {\n    const declarations: N.VariableDeclarator[] = (node.declarations = []);\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode<N.VariableDeclarator>();\n      this.parseVarId(decl, kind);\n      decl.init = !this.eat(tt.eq)\n        ? null\n        : isFor\n        ? this.parseMaybeAssignDisallowIn()\n        : this.parseMaybeAssignAllowIn();\n\n      if (decl.init === null && !allowMissingInitializer) {\n        if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"destructuring\",\n          });\n        } else if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          this.raise(Errors.DeclarationMissingInitializer, {\n            at: this.state.lastTokEndLoc,\n            kind: \"const\",\n          });\n        }\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(\n    this: Parser,\n    decl: Undone<N.VariableDeclarator>,\n    kind: \"var\" | \"let\" | \"const\",\n  ): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, {\n      in: { type: \"VariableDeclarator\" },\n      binding: kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n    });\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T extends N.NormalFunction>(\n    this: Parser,\n    node: Undone<T>,\n    statement: number = FUNC_NO_FLAGS,\n    isAsync: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(Errors.GeneratorInSingleStatementContext, {\n        at: this.state.startLoc,\n      });\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node as T);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node as T;\n  }\n\n  parseFunctionId(requireId?: boolean): N.Identifier | undefined | null {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(\n    this: Parser,\n    node: Undone<N.Function>,\n    allowModifiers?: boolean,\n  ): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.loc.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T extends N.Class>(\n    this: Parser,\n    node: Undone<T>,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(\n    this: Parser,\n    hadSuperClass: boolean,\n    oldStrict: boolean,\n  ): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody = this.startNode<N.ClassBody>();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(Errors.DecoratorSemicolon, {\n              at: this.state.lastTokEndLoc,\n            });\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode<N.ClassMember>();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          // @ts-expect-error Fixme\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          // @ts-expect-error Fixme\n          member.kind === \"constructor\" &&\n          // @ts-expect-error Fixme\n          member.decorators &&\n          // @ts-expect-error Fixme\n          member.decorators.length > 0\n        ) {\n          this.raise(Errors.DecoratorConstructor, { at: member });\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(Errors.TrailingDecorator, { at: this.state.startLoc });\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = member as any;\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = member as any;\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, member as any as N.StaticBlock);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<N.ClassMember>,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod = member as N.ClassMethod;\n    const privateMethod = member as N.ClassPrivateMethod;\n    const publicProp = member as N.ClassProperty;\n    const privateProp = member as N.ClassPrivateProperty;\n    const accessorProp = member as N.ClassAccessorProperty;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(Errors.ConstructorIsGenerator, {\n          at: publicMethod.key,\n        });\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStartLoc = this.state.startLoc;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(Errors.DuplicateConstructor, { at: key });\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(Errors.OverrideOnConstructor, { at: key });\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStartLoc);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAsync, { at: publicMethod.key });\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(Errors.ConstructorIsAccessor, { at: publicMethod.key });\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (\n      isContextual &&\n      key.name === \"accessor\" &&\n      !this.isLineTerminator()\n    ) {\n      this.expectPlugin(\"decoratorAutoAccessors\");\n      this.resetPreviousNodeTrailingComments(key);\n\n      // The so-called parsed name would have been \"accessor\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicProp);\n      this.pushClassAccessorProperty(classBody, accessorProp, isPrivate);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(\n    this: Parser,\n    member: Undone<N.ClassMember>,\n  ): N.Expression | N.Identifier {\n    const { type, value } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(Errors.StaticPrototype, { at: this.state.startLoc });\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(Errors.ConstructorClassPrivateField, {\n          at: this.state.startLoc,\n        });\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    member: Undone<\n      N.StaticBlock & {\n        decorators?: Array<N.Decorator>;\n      }\n    >,\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body: N.Node[] = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.next(); // eat tt.braceR\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(Errors.DecoratorStaticBlock, { at: member });\n    }\n  }\n\n  pushClassProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassProperty,\n  ) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(Errors.ConstructorClassField, { at: prop.key });\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: Undone<N.ClassPrivateProperty>,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.loc.start,\n    );\n  }\n\n  pushClassAccessorProperty(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    prop: N.ClassAccessorProperty,\n    isPrivate: boolean,\n  ) {\n    if (!isPrivate && !prop.computed) {\n      // Not private, so not node is not a PrivateName and we can safely cast\n      const key = prop.key as N.Expression;\n\n      if (key.name === \"constructor\" || key.value === \"constructor\") {\n        // Non-computed field, which is either an identifier named \"constructor\"\n        // or a string literal named \"constructor\"\n        this.raise(Errors.ConstructorClassField, { at: key });\n      }\n    }\n\n    const node = this.parseClassAccessorProperty(prop);\n    classBody.body.push(node);\n\n    if (isPrivate) {\n      this.classScope.declarePrivateName(\n        this.getPrivateNameSV(node.key),\n        CLASS_ELEMENT_OTHER,\n        node.key.loc.start,\n      );\n    }\n  }\n\n  pushClassMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    this: Parser,\n    classBody: Undone<N.ClassBody>,\n    method: Undone<N.ClassPrivateMethod>,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: Undone<\n      N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod\n    >,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.loc.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    methodOrProp: Undone<N.ClassMethod | N.ClassProperty>,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    this: Parser,\n    node: Undone<N.ClassPrivateProperty>,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(this: Parser, node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseClassAccessorProperty(\n    this: Parser,\n    node: N.ClassAccessorProperty,\n  ): N.ClassAccessorProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassAccessorProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(\n    this: Parser,\n    node: Undone<\n      N.ClassProperty | N.ClassPrivateProperty | N.ClassAccessorProperty\n    >,\n  ): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: Undone<N.Class>,\n    isStatement: boolean,\n    optionalId?: boolean | null,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.declareNameFromIdentifier(node.id, bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        throw this.raise(Errors.MissingClassName, { at: this.state.startLoc });\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(this: Parser, node: Undone<N.Class>): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(\n    this: Parser,\n    node: Undone<\n      | N.ExportDefaultDeclaration\n      | N.ExportAllDeclaration\n      | N.ExportNamedDeclaration\n    >,\n  ): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar =\n      parseAfterDefault &&\n      this.eatExportStar(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const hasNamespace =\n      hasStar &&\n      this.maybeParseExportNamespaceSpecifier(\n        // @ts-expect-error todo(flow->ts)\n        node,\n      );\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node as Undone<N.ExportNamedDeclaration>, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(\n      // @ts-expect-error todo(flow->ts)\n      node,\n    );\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(\n        node as Undone<N.ExportNamedDeclaration>,\n        isFromRequired,\n      );\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(\n        node as Undone<N.ExportNamedDeclaration>,\n      );\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(\n        node as Undone<N.ExportNamedDeclaration>,\n        true,\n        false,\n        !!(node as Undone<N.ExportNamedDeclaration>).source,\n      );\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      (node as Undone<N.ExportDefaultDeclaration>).declaration =\n        this.parseExportDefaultExpression();\n      this.checkExport(node as Undone<N.ExportDefaultDeclaration>, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n  ): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(this: Parser): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr as Undone<N.FunctionExpression>,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    }\n\n    if (this.match(tt._class)) {\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(Errors.DecoratorBeforeExport, { at: this.state.startLoc });\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr as Undone<N.ClassExpression>, true, true);\n    }\n\n    if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(Errors.UnsupportedDefaultExport, {\n        at: this.state.startLoc,\n      });\n    }\n\n    const res = this.parseMaybeAssignAllowIn();\n    this.semicolon();\n    return res;\n  }\n\n  parseExportDeclaration(\n    this: Parser,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    node: Undone<N.ExportNamedDeclaration>,\n  ): N.Declaration | undefined | null {\n    return this.parseStatement(null) as N.Declaration;\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(\n    this: Parser,\n    node: Undone<N.ExportNamedDeclaration>,\n    expect?: boolean,\n  ): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n        this.checkJSONModuleImport(node);\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          throw this.raise(Errors.DecoratorBeforeExport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        return true;\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: Undone<N.ExportNamedDeclaration | N.ExportDefaultDeclaration>,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = (node as any as N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(Errors.ExportDefaultFromAsIdentifier, {\n              at: declaration,\n            });\n          }\n        }\n        // @ts-expect-error node.specifiers may not exist\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        // @ts-expect-error node.specifiers may not exist\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportName);\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(Errors.ExportBindingIsString, {\n                at: specifier,\n                localName: local.value,\n                exportName,\n              });\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.loc.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(Errors.UnsupportedDecoratorExport, { at: node });\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      // @ts-expect-error migrate to Babel types\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node: Undone<\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier\n    >,\n    exportName: string,\n  ): void {\n    if (this.exportedIdentifiers.has(exportName)) {\n      if (exportName === \"default\") {\n        this.raise(Errors.DuplicateDefaultExport, { at: node });\n      } else {\n        this.raise(Errors.DuplicateExport, { at: node, exportName });\n      }\n    }\n    this.exportedIdentifiers.add(exportName);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(Errors.ModuleExportNameHasLoneSurrogate, {\n          at: result,\n          surrogateCharCode: surrogate[0].charCodeAt(0),\n        });\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  isJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ): boolean {\n    if (node.assertions != null) {\n      return node.assertions.some(({ key, value }) => {\n        return (\n          value.value === \"json\" &&\n          (key.type === \"Identifier\"\n            ? key.name === \"type\"\n            : key.value === \"type\")\n        );\n      });\n    }\n    return false;\n  }\n\n  checkJSONModuleImport(\n    node: Undone<\n      N.ExportAllDeclaration | N.ExportNamedDeclaration | N.ImportDeclaration\n    >,\n  ) {\n    // @ts-expect-error Fixme: node.type must be undefined because they are undone\n    if (this.isJSONModuleImport(node) && node.type !== \"ExportAllDeclaration\") {\n      // @ts-expect-error specifiers may not index node\n      const { specifiers } = node;\n      if (specifiers != null) {\n        // @ts-expect-error refine specifier types\n        const nonDefaultNamedSpecifier = specifiers.find(specifier => {\n          let imported;\n          if (specifier.type === \"ExportSpecifier\") {\n            imported = specifier.local;\n          } else if (specifier.type === \"ImportSpecifier\") {\n            imported = specifier.imported;\n          }\n          if (imported !== undefined) {\n            return imported.type === \"Identifier\"\n              ? imported.name !== \"default\"\n              : imported.value !== \"default\";\n          }\n        });\n        if (nonDefaultNamedSpecifier !== undefined) {\n          this.raise(Errors.ImportJSONBindingNotDefault, {\n            at: nonDefaultNamedSpecifier.loc.start,\n          });\n        }\n      }\n    }\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(this: Parser, node: Undone<N.ImportDeclaration>): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        // @ts-expect-error attributes have been deprecated\n        node.attributes = attributes;\n      }\n    }\n    this.checkJSONModuleImport(node);\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(this: Parser): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom() as N.StringLiteral;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  shouldParseDefaultImport(node: Undone<N.ImportDeclaration>): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(\n    node: Undone<N.ImportDeclaration>,\n    specifier: Undone<T>,\n    type: T[\"type\"],\n  ): void {\n    specifier.local = this.parseIdentifier();\n    node.specifiers.push(this.finishImportSpecifier(specifier, type));\n  }\n\n  finishImportSpecifier<\n    T extends\n      | N.ImportSpecifier\n      | N.ImportDefaultSpecifier\n      | N.ImportNamespaceSpecifier,\n  >(specifier: Undone<T>, type: T[\"type\"], bindingType = BIND_LEXICAL) {\n    this.checkLVal(specifier.local, {\n      // @ts-expect-error refine types\n      in: specifier,\n      binding: bindingType,\n    });\n    return this.finishNode(specifier, type);\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: this.state.startLoc,\n          key: keyName,\n        });\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      attrs.push(this.finishNode(node, \"ImportAttribute\"));\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(Errors.ModuleAttributeDifferentFromType, {\n          at: node.key,\n        });\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(Errors.ModuleAttributesWithDuplicateKeys, {\n          at: node.key,\n          key: node.key.name,\n        });\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.raise(Errors.ModuleAttributeInvalidValue, {\n          at: this.state.startLoc,\n        });\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode<N.ImportDefaultSpecifier>(),\n        \"ImportDefaultSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: Undone<N.ImportDeclaration>): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode<N.ImportNamespaceSpecifier>();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: Undone<N.ImportDeclaration>) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(Errors.DestructureNamedImport, {\n            at: this.state.startLoc,\n          });\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode<N.ImportSpecifier>();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n        undefined,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: Undone<N.ImportSpecifier>,\n    importedIsString: boolean,\n    /* eslint-disable @typescript-eslint/no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    bindingType: BindingTypes | undefined,\n    /* eslint-enable @typescript-eslint/no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(Errors.ImportBindingIsString, {\n          at: specifier,\n          importName: (imported as N.StringLiteral).value,\n        });\n      }\n      this.checkReservedWord(\n        (imported as N.Identifier).name,\n        specifier.loc.start,\n        true,\n        true,\n      );\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    return this.finishImportSpecifier(\n      specifier,\n      \"ImportSpecifier\",\n      bindingType,\n    );\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","import type { Options } from \"../options\";\nimport type * as N from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<\n  string,\n  {\n    [x: string]: any;\n  }\n>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  // todo(flow->ts) - this probably can be removed\n  // abstract jsxParseOpeningElementAfterName(\n  //   node: N.JSXOpeningElement,\n  // ): N.JSXOpeningElement;\n\n  constructor(options: Options | undefined | null, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): {\n    new (...args: any): ScopeHandler;\n  } {\n    return ScopeHandler;\n  }\n\n  parse(): N.File {\n    this.enterInitialScopes();\n    const file = this.startNode() as N.File;\n    const program = this.startNode() as N.Program;\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","import { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport type {\n  PluginConfig as ParserPlugin,\n  FlowPluginOptions,\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"./typings\";\nimport Parser from \"./parser\";\n\nimport type { ExportedTokenType } from \"./tokenizer/types\";\nimport {\n  getExportedToken,\n  tt as internalTokenTypes,\n  type InternalTokenTypes,\n} from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(\n  internalTokenTypes: InternalTokenTypes,\n): Record<string, ExportedTokenType> {\n  const tokenTypes: Record<string, ExportedTokenType> = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: Options | undefined | null, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: { new (...args: any): Parser } } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): {\n  new (...args: any): Parser;\n} {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      // @ts-expect-error todo(flow->ts)\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n\nexport type {\n  FlowPluginOptions,\n  ParserPlugin,\n  PipelineOperatorPluginOptions,\n  RecordAndTuplePluginOptions,\n};\nexport type ParserOptions = Partial<Options>;\n"],"names":["render","_vm","this","_c","_self","attrs","_m","staticClass","staticRenderFns","_v","on","outputAstMessage","addAstNode","ref","isMoving","moveNode","endMoveNode","_l","astMessage","astTree","children","child","index","key","class","moveInType","data","selected","handleMouseenterContent","handleMouseleaveContent","handleMousemoveContent","$event","stopPropagation","handleMousedownContent","apply","arguments","expand","leaf","isLeaf","expanded","isExpand","handleExpand","span","move_in","isEditing","editKeydown","editPaste","finishEdit","_s","nodeType","startMoveNode","editNode","addChildNode","deleteNode","_e","getNewNode","parent","node","code","edit","Object","defineProperty","value","enumerable","writable","dealedMessage","eleLink","document","createElement","download","style","display","blob","Blob","JSON","stringify","href","URL","createObjectURL","body","appendChild","click","removeChild","initAstMessageJson","json","selectedAstNode","stack","length","treeNode","pop","forEach","push","root","movingTreeNode","cloneNode","moveTargetTreeNode","paste","div","e","preventDefault","range","selection","getSelection","type","getRangeAt","startContainer","endContainer","Error","string","clipboardData","window","getData","replace","text","createTextNode","$refs","label","setStart","setEnd","childNodes","collapsed","insertData","startOffset","replaceData","endOffset","startEdit","createRange","Node","TEXT_NODE","removeAllRanges","addRange","console","log","keydown","callback","keyCode","getValue","nodeValue","name","props","inject","watch","methods","height","setTimeout","parentChildren","astTreeMessage","created","mounted","destroyed","component","components","x","y","offsetY","moveNodeIndex","endNode","endNodeIndex","moveNodeparentChildren","endNodeParentChildren","message","unselectAstNode","editAstNode","changeCodeDebounce","ast","getAst","babelParser","sourceType","strictMode","createParenthesizedExpressions","allowUndeclaredExports","plugins","copyKeyName","getLabel","Array","isArray","keyName","default","dataType","dataLabel","textarea","getIsLeaf","provide","makeBuiltIn","module","exports","target","descriptor","get","getter","set","setter","f","anObject","that","result","hasIndices","global","ignoreCase","multiline","dotAll","unicode","unicodeSets","sticky","DESCRIPTORS","defineBuiltInAccessor","regExpFlags","fails","RegExp","RegExpPrototype","prototype","FORCED","INDICES_SUPPORT","error","O","calls","expected","addGetter","chr","pairs","getOwnPropertyDescriptor","call","configurable","now","self","process","hrtime","time","undefined","performance","bind","Date","getTime","debounce","func","wait","immediate","timeout","args","context","timestamp","run","last","getNow","callNow","Position","constructor","line","col","column","SourceLocation","start","end","filename","identifierName","createPositionWithColumnOffset","position","columnOffset","ParseErrorCode","SyntaxError","SourceTypeModuleError","reflect","keys","reduce","object","item","i","instantiate","properties","descriptors","map","filter","split","instance","assign","ImportMetaOutsideModule","ImportOutsideModule","NodeDescriptions","ArrayPattern","AssignmentExpression","AssignmentPattern","ArrowFunctionExpression","ConditionalExpression","CatchClause","ForOfStatement","ForInStatement","ForStatement","FormalParameters","Identifier","ImportSpecifier","ImportDefaultSpecifier","ImportNamespaceSpecifier","ObjectPattern","ParenthesizedExpression","RestElement","UpdateExpression","true","false","VariableDeclarator","YieldExpression","toNodeDescription","prefix","String","AccessorIsGenerator","kind","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorArgumentsOutsideParentheses","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","exportName","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","localName","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","importName","ImportCallArgumentTrailingComma","ImportCallArity","maxArgumentCount","ImportCallNotNewExpression","ImportCallSpreadArgument","ImportJSONBindingNotDefault","IncompatibleRegExpUVFlags","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","radix","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","reservedWord","InvalidIdentifier","InvalidLhs","ancestor","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","unexpected","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","labelName","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingPlugin","missingPlugin","join","MissingOneOfPlugins","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","surrogateCharCode","toString","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","keyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","onlyValidPropertyName","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","StrictDelete","StrictEvalArguments","referenceName","StrictEvalArgumentsBinding","bindingName","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","UnparenthesizedPipeBodyDescriptions","Set","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","token","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","toParseErrorConstructor","_ref","toMessage","loc","details","clone","overrides","pos","ParseErrorEnum","argument","syntaxPlugin","parseErrorTemplates","ParseErrorConstructors","reasonCode","template","rest","Errors","ModuleErrors","StandardErrors","StrictModeErrors","PipelineOperatorErrors","toUnenumerable","toESTreeLocation","superClass","parse","file","super","options","tokens","parseRegExpLiteral","pattern","flags","regex","estreeParseLiteral","parseBigIntLiteral","bigInt","BigInt","_unused","bigint","parseDecimalLiteral","decimal","parseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directive","expression","raw","extra","expressionValue","stmt","rawValue","initFunction","isAsync","checkDeclaration","isObjectProperty","getObjectOrClassMethodParams","method","params","isValidDirective","parenthesized","parseBlockBody","allowDirectives","topLevel","afterBlockParse","directiveStatements","directives","d","concat","pushClassMethod","classBody","isGenerator","isConstructor","allowsDirectSuper","parseMethod","typeParameters","parsePrivateName","getPluginOption","convertPrivateNameToPrivateIdentifier","getPrivateNameSV","id","isPrivateName","parseFunctionBody","allowExpression","isMethod","allowDirectSuper","inClassScope","funcNode","startNode","computed","finishNode","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","prop","isPattern","isAccessor","shorthand","parseObjectProperty","startPos","startLoc","refExpressionErrors","isValidLVal","isUnparenthesizedInAssign","binding","isAssignable","isBinding","toAssignable","isLHS","classScope","usePrivateName","toAssignableObjectExpressionProp","isLast","raise","at","finishCallExpression","unfinished","optional","callee","source","hasPlugin","attributes","toReferencedArguments","parseExport","exported","specifiers","parseSubscript","base","noCalls","state","optionalChainMember","substring","stop","chain","startNodeAtNode","hasPropertyAsPrivateName","isOptionalChain","isObjectMethod","finishNodeAt","endLoc","resetStartLocation","resetEndLocation","lastTokEndLoc","TokContext","preserveSpace","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","postfix","ExportedTokenType","conf","rightAssociative","binop","updateContext","keywords","Map","createKeyword","createToken","createBinop","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","createKeywordLike","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","hash","interpreterDirective","eq","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","doubleCaret","doubleAt","pipeline","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","bitShiftL","bitShiftR","plusMin","modulo","star","slash","exponent","_in","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","num","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","tokenIsIdentifier","tokenKeywordOrIdentifierIsKeyword","tokenIsKeywordOrIdentifier","tokenIsLiteralPropertyName","tokenComesBeforeExpression","tokenCanStartExpression","tokenIsAssignment","tokenIsFlowInterfaceOrTypeOrOpaque","tokenIsLoop","tokenIsKeyword","tokenIsOperator","tokenIsPostfix","tokenIsPrefix","tokenIsTSTypeOperator","tokenIsTSDeclarationStart","tokenLabelName","tokenOperatorPrecedence","tokenIsRightAssociative","tokenIsTemplate","getExportedToken","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","isInAstralSet","isIdentifierStart","test","fromCharCode","isIdentifierChar","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","isReservedWord","word","inModule","isStrictReservedWord","has","isStrictBindOnlyReservedWord","isStrictBindReservedWord","isKeyword","isIteratorStart","current","next","next2","reservedWordLikeSet","canBeReservedWord","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_FLAGS_TS_IMPORT","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_TS_TYPE_IMPORT","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","Scope","var","lexical","functions","ScopeHandler","parser","scopeStack","undefinedExports","inFunction","currentVarScopeFlags","allowSuper","currentThisScopeFlags","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","treatFunctionsAsVarInScope","currentScope","createScope","enter","exit","scope","declareName","bindingType","checkRedeclarationInScope","add","maybeExportDefined","delete","isRedeclaredInScope","values","checkLocalExport","topLevelScope","FlowScope","declareFunctions","FlowScopeHandler","BaseParser","sawUnambiguousESM","ambiguousScriptDifferentAst","pluginConfig","pluginName","pluginOptions","actualOptions","plugin","_this$plugins$get","setTrailingComments","comments","trailingComments","unshift","setLeadingComments","leadingComments","setInnerComments","innerComments","adjustInnerComments","elements","commentWS","lastElement","CommentsParser","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","leadingNode","nodeStart","commentEnd","trailingNode","containingNode","finalizeComment","splice","commentStart","input","charCodeAt","finalizeRemainingComments","resetPreviousNodeTrailingComments","takeSurroundingComments","lineBreak","lineBreakG","isNewLine","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","isWhitespace","State","curLine","lineStart","errors","potentialArrowAt","noArrowAt","noArrowParamsConversionAt","maybeInArrowParameters","inType","noAnonFunctionType","hasFlowComment","isAmbientContext","inAbstractClass","inDisallowConditionalTypesContext","topicContext","maxNumOfResolvableTopics","maxTopicIndex","soloAwait","inFSharpPipelineDirectBody","labels","decoratorStack","lastTokStartLoc","lastTokStart","ct","canStartJSXElement","containsEsc","firstInvalidTemplateEscapePos","strictErrors","tokensLength","init","startLine","startColumn","curPosition","skipArrays","val","slice","forbiddenNumericSeparatorSiblings","decBinOct","hex","isAllowedNumericSeparatorSibling","bin","ch","oct","dec","readStringContents","initialPos","initialLineStart","initialCurLine","out","firstInvalidLoc","chunkStart","unterminated","isStringEnd","res","readEscapedChar","str","containsInvalid","inTemplate","throwOnInvalid","readHexChar","readCodePoint","fromCodePoint","strictNumericEscape","match","octalStr","octal","parseInt","len","forceLen","n","readInt","invalidEscapeSequence","allowNumSeparator","bailOnError","forbiddenSiblings","isAllowedSibling","invalid","total","Infinity","_isDigit","invalidDigit","prev","Number","isNaN","unexpectedNumericSeparator","numericSeparatorInEscapeSequence","indexOf","invalidCodePoint","buildPosition","VALID_REGEX_FLAGS","Token","Tokenizer","isLookahead","errorHandlers_readInt","errorRecovery","errorBuilder","errorHandlers_readCodePoint","errorHandlers_readStringContents_string","recordStrictModeErrors","errorHandlers_readStringContents_template","pushToken","checkKeywordEscapes","nextToken","eat","createLookaheadState","curContext","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lastIndex","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","toParseError","clear","skipSpace","finishToken","getTokenFromCode","skipBlockComment","skipLineComment","startSkip","spaceStart","loop","attachComment","commentWhitespace","prevType","replaceToken","readToken_numberSign","readToken_interpreter","nextPos","expectPlugin","readWord1","finishOp","readToken_dot","readNumber","readToken_slash","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","proposal","topicToken","lookaheadCh","codePointAt","readToken_atSign","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","readTemplateToken","readRadixNumber","readString","readWord","readRegexp","escaped","content","mods","char","includes","isBigInt","startsWithDot","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseFloat","quote","readTemplateContinuation","opening","firstCode","escStart","identifierCheck","esc","keywordTypes","raiseProperties","raiseOverwrite","expectOnePlugin","pluginNames","some","ClassScope","privateNames","loneAccessors","undefinedPrivateNames","ClassScopeHandler","oldClassScope","from","declarePrivateName","elementType","redefined","accessor","oldStatic","newStatic","oldKind","newKind","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","ExpressionScope","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","ArrowHeadParsingScope","declarationErrors","recordDeclarationError","ParsingErrorClass","clearDeclarationError","iterateErrors","iterator","ExpressionScopeHandler","recordParameterInitializerError","origin","recordArrowParemeterBindingError","recordAsyncArrowParametersError","validateAsPattern","newParameterDeclarationScope","newArrowHeadScope","newAsyncArrowScope","newExpressionScope","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","ProductionParameterHandler","stacks","currentFlags","hasAwait","hasYield","hasReturn","hasIn","functionFlags","UtilParser","addExtra","isContextual","isUnparsedContextual","nameStart","nameEnd","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","tryParse","fn","oldState","abortSignal","failState","thrown","aborted","checkExpressionErrors","andThrow","shorthandAssignLoc","doubleProtoLoc","privateKeyLoc","optionalParametersLoc","hasErrors","isLiteralPropertyName","property","initializeScopes","oldLabels","oldExportedIdentifiers","exportedIdentifiers","oldInModule","oldScope","getScopeHandler","oldProdParam","prodParam","oldExpressionScope","expressionScope","enterInitialScopes","paramFlags","checkDestructuringPrivate","ExpressionErrors","ranges","NodePrototype","clonePlaceholder","cloneIdentifier","cloned","create","expectedNode","cloneStringLiteral","__clone","newNode","NodeUtils","startNodeAt","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","reservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","memberName","enumName","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","invalidEnumType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","explicitType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","suggestion","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","unsupportedExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","isEsModuleType","bodyElement","declaration","hasTypeImportKind","importKind","isMaybeDefaultImport","exportSuggestions","const","let","interface","partition","list","list1","list2","FLOW_PRAGMA_REGEX","flowPragma","shouldParseTypes","shouldParseEnums","matches","exec","flowParseTypeInitialiser","tok","oldInType","flowParseType","flowParsePredicate","moduloLoc","parseExpression","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseInterfaceish","flowParseDeclareFunction","parseIdentifier","typeNode","typeContainer","flowParseTypeParameterDeclaration","tmp","flowParseFunctionTypeParams","returnType","typeAnnotation","flowParseDeclare","insideModule","flowParseDeclareVariable","flowParseDeclareModuleExports","flowParseDeclareModule","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseDeclareExportDeclaration","flowParseTypeAnnotatableIdentifier","parseExprAtom","bodyNode","parseImport","hasModuleExport","isLet","exportKind","flowParseTypeAnnotation","finished","flowParseTypeAlias","flowParseOpaqueType","isClass","flowParseRestrictedIdentifier","extends","implements","mixins","flowParseInterfaceExtends","flowParseObjectType","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseQualifiedTypeIdentifier","flowParseTypeParameterInstantiation","flowParseInterface","checkNotUnderscore","checkReservedType","liberal","right","declare","supertype","impltype","flowParseTypeParameter","requireDefault","nodeStartLoc","variance","flowParseVariance","ident","bound","defaultRequired","typeParameter","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseTypeOrImplicitInstantiation","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","isStatic","static","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseFunctionTypeParam","flowParseObjectTypeCallProperty","valueNode","endDelim","exact","callProperties","indexers","internalSlots","inexact","protoStartLoc","inexactStartLoc","propOrInexact","flowParseObjectTypeProperty","flowObjectTypeSemicolon","isInexactToken","proto","flowCheckGetterSetterParams","paramCount","node2","qualification","flowParseGenericType","flowParseTypeofType","flowParsePrimaryType","flowParseTupleType","first","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowIdentToTypeAnnotation","isGroupedType","parseLiteralAtNode","createIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","objectType","indexType","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","allowPrimitiveOverride","typeCastToParameter","allowExpressionBody","forwardNoArrowParamsConversionAt","parseFunctionBodyAndFinish","parseStatement","flowParseEnumDeclaration","parseExpressionStatement","expr","shouldParseExportDeclaration","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","setOptionalParametersError","originalNoArrowAt","consequent","failed","tryParseConditionalConsequent","valid","getArrowLikeExpressions","alternate","parseMaybeAssign","parseMaybeAssignAllowIn","disallowInvalid","arrows","finishArrowValidation","every","toAssignableList","_node$extra","trailingCommaLoc","checkParams","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","parseExportSpecifiers","parseExportFrom","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","isStatement","optionalId","parseClassMember","member","parseClassMemberFromModifier","isIterator","readIterator","fullWord","left","exprList","toReferencedList","isParenthesizedExpr","_expr$extra","parseArrayLike","close","canBePattern","isTuple","isParenthesized","isClassMethod","isClassProperty","isNonstaticConstructor","isThisParam","pushClassPrivateMethod","parseClassSuper","superTypeParameters","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","parseImportSpecifierLocal","specifier","local","finishImportSpecifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","importedIsString","isInTypeOnlyImport","isMaybeTypeOnly","firstIdent","imported","specifierTypeKind","as_ident","specifierIsTypeImport","checkReservedWord","parseBindingAtom","parseFunctionParams","allowModifiers","parseVarId","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","afterLeftParse","jsx","currentContext","abort","arrowExpression","_arrowExpression$extr","maybeUnwrapTypeCastExpression","async","_jsx2","_jsx3","parseArrow","shouldParseArrow","setArrowFunctionParameters","allowDuplicates","isArrowFunction","strictModeChanged","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","parseCallExpressionArguments","parseAsyncArrowWithTypeParameters","subscriptState","isLookaheadToken_lt","typeArguments","parseNewCallee","targs","parseArrowExpression","parseTopLevel","program","fileNode","skipFlowComment","hasFlowCommentCompletion","commentSkip","shiftToFirstNonWhiteSpace","ch2","ch3","flowEnumErrorBooleanMemberNotInitialized","flowEnumErrorInvalidMemberInitializer","enumContext","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","expectedType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","toUpperCase","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","afterNext","entities","__proto__","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","openingTagName","MissingClosingTagFragment","UnexpectedSequenceExpression","HTMLEntity","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","isFragment","getQualifiedJSXName","namespace","jsxReadToken","jsxReadEntity","jsxReadNewLine","normalizeCRLF","jsxReadString","codePoint","count","desc","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","setContext","jsxParseExpressionContainer","jsxParseEmptyExpression","jsxParseSpreadChild","previousContext","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","selfClosing","jsxParseClosingElementAt","jsxParseElementAt","openingElement","closingElement","contents","openingFragment","closingFragment","jsxParseElement","newContext","TypeScriptScope","enums","constEnums","classes","exportOnlyBindings","TypeScriptScopeHandler","importsStack","hasImport","allowShadow","isConst","wasConst","getOwn","hasOwnProperty","nonNull","assert","TSErrors","AbstractMethodHasImplementation","methodName","AbstractPropertyHasInitializer","propertyName","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","CannotFindName","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstInitiailizerMustBeStringOrNumericLiteralOrLiteralEnumReference","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","modifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","modifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InitializerNotAllowedInAmbientContext","InvalidModifierOnTypeMember","InvalidModifierOnTypeParameter","InvalidModifierOnTypeParameterPositions","InvalidModifiersOrder","orderedModifiers","InvalidPropertyAccessAfterInstantiationExpression","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","SingleTypeParameterWithoutTrailingComma","typeParameterName","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","keywordTypeFromName","tsIsAccessModifier","tsIsVarianceAnnotations","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsIsStartOfStaticBlocks","tsTryParse","tsParseModifiers","modified","disallowedModifiers","errorTemplate","enforceOrder","before","after","incompatible","mod1","mod2","accessibility","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","refTrailingCommaPos","tsParseDelimitedListWorker","expectSuccess","trailingCommaPos","element","tsParseBracketedList","bracket","skipFirstToken","tsParseImportType","qualifier","tsParseEntityName","tsParseTypeArguments","allowReservedWords","tsParseTypeReference","typeName","tsParseThisTypePredicate","lhs","parameterName","tsParseTypeAnnotation","asserts","tsParseThisTypeNode","tsParseTypeQuery","exprName","tsParseInOutModifiers","tsParseNoneModifiers","tsParseTypeParameter","parseModifiers","tsParseTypeParameterName","constraint","tsEatThenParseType","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","typeReference","tsFillSignature","returnToken","signature","returnTokenRequired","paramsKey","returnTypeKey","tsParseBindingListForSignature","tsParseTypeOrTypePredicateAnnotation","parseBindingList","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsLookAhead","parameters","tsTryParseTypeAnnotation","tsParsePropertyOrMethodSignature","readonly","nodeAny","firstParameter","tsParseTypeMember","idx","parsePropertyName","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsExpectThenParseType","tsParseMappedType","nameType","tsParseType","tsTryParseType","tsParseTupleType","elementTypes","tsParseTupleElementType","seenOptionalElement","labeledElements","elementNode","checkType","isLabeled","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","abstract","tsInAllowConditionalTypesContext","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplate","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","parseMaybeUnary","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsParseTypeOperatorOrHigher","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseConstraintForInferType","tsInDisallowConditionalTypesContext","isTypeOperator","tsParseUnionOrIntersectionType","parseConstituentType","hasLeadingOperator","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsIsUnambiguouslyStartOfFunctionType","tsSkipParameterStart","previousErrorCount","parseObjectLike","_unused2","tsInType","t","tsParseTypePredicateAsserts","thisTypePredicate","typePredicateVariable","tsParseTypePredicatePrefix","tsTryParseTypeOrTypePredicateAnnotation","eatColon","tsParseNonConditionalType","extendsType","trueType","falseType","isAbstractConstructorSignature","tsParseTypeAssertion","tsNextThenParseType","tsParseHeritageClause","originalStartLoc","delimitedList","tsParseInterfaceDeclaration","checkIdentifier","tsParseTypeAliasDeclaration","tsInNoContext","cb","oldContext","oldInDisallowConditionalTypesContext","tsDoThenParseType","tsParseEnumMember","initializer","tsParseEnumDeclaration","tsParseModuleBlock","parseBlockOrModuleBlockBody","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","tsParseImportEqualsDeclaration","isExport","moduleReference","tsParseModuleReference","tsIsExternalModuleReference","tsParseExternalModuleReference","tsTryParseAndCatch","tsTryParseDeclare","nany","starttype","tsInAmbientContext","parseFunctionStatement","parseClass","parseVarStatement","tsParseDeclaration","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsCheckLineTerminator","tsParseAbstractDeclaration","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArgumentsInExpression","reScan_lt","tsIsDeclarationStart","parseAssignableListItem","decorators","override","elt","pp","parameter","isSimpleParameter","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","isInParens","nonNullExpression","isOptionalCall","missingParenErrorLoc","atPossibleAsyncArrow","asyncArrowFn","parseTaggedTemplateExpression","tokenType","_callee$extra","parseExprOp","leftStartPos","leftStartLoc","minPrec","reScan_lt_gt","checkKeywords","checkDuplicateExports","ahead","importNode","isAbstractClass","cls","allowMissingInitializer","declarations","expressions","isPossiblyLiteralEnum","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","callParseClassMemberWithIsStatic","parseClassStaticBlock","parseClassMemberWithIsStatic","hadSuperClass","parsePostMemberNameModifiers","methodOrProp","isDeclare","isIdentifier","parseClassPropertyAnnotation","definite","declareClassPrivateMethodInScope","typeCast","_jsx","reportReservedArrowTypeParam","_typeCast","_typeCast2","trailingComma","sawUnary","toAssignableParenthesizedExpression","checkToRestConversion","allowPattern","TSTypeCastExpression","TSParameterProperty","TSNonNullExpression","TSAsExpression","TSTypeAssertion","parseMaybeDecoratorArguments","checkCommaAfterRest","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","oldIsAmbientContext","oldInAbstractClass","hasBody","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","isString","isInTypeExport","parseTypeOnlyImportExportSpecifier","isImport","isInTypeOnlyImportExport","leftOfAsKey","rightOfAsKey","rightOfAs","leftOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","parseModuleExportName","kindKey","isUncomputedMemberExpressionChain","PlaceholderErrors","ClassNameIsRequired","UnexpectedSpace","parsePlaceholder","assertNoSpace","finishPlaceholder","isFinished","verifyBreakContinue","isBreak","parseBlock","createNewLexicalScope","parseFunctionId","requireId","takeDecorators","oldStrict","parseClassBody","startsWith","maybeParseExportDefaultSpecifier","checkExport","hasStarImport","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","parseImportSource","parseV8Intrinsic","v8IntrinsicStartLoc","parseIdentifierName","identifier","expectedConfig","expectedName","expectedOptions","expectedKeys","expectedOptionsIsEmpty","p","option","find","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","validatePlugins","decoratorsBeforeExport","allowCallParenthesized","proposalList","tupleSyntaxIsHash","syntaxType","tokenList","moduleAttributesVersionPluginOption","missingPlugins","mixinPlugins","estree","flow","typescript","v8intrinsic","placeholders","mixinPluginNames","defaultOptions","sourceFilename","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","getOptions","opts","unwrapParenthesizedExpression","LValParser","_node$extra3","arg","toReferencedListDeep","parseSpread","parseRestBinding","closeCharCode","allowEmpty","elts","parseDecorator","parseBindingRestProperty","parseBindingProperty","ObjectProperty","checkLVal","in","checkClashes","allowingSloppyLetBinding","hasParenthesizedAncestor","validity","_expression$extra","ParseErrorClass","isParenthesizedExpression","nextAncestor","allowLetBinding","declareNameFromIdentifier","ExpressionParser","checkProto","isRecord","protoRef","used","shouldExitDescending","disallowIn","disallowInAnd","parseExpressionBase","allowInAnd","parseMaybeAssignDisallowIn","resultError","parseYield","ownExpressionErrors","parseMaybeConditional","parseExprOps","parseMaybeUnaryOrPrivate","op","prec","checkPipelineAtInfixOperator","logical","coalesce","parseExprOpRightExpr","finishedNode","nextOp","withTopicBindingContext","parseHackPipeBody","parseSmartPipelineBodyInStyle","parseExprOpBaseRightExpr","withSoloAwaitPermittingContext","parseFSharpPipelineBody","requiredParentheses","topicReferenceWasUsedInCurrentContext","checkExponentialAfterUnary","isAwait","isAwaitAllowed","parseAwait","update","isDelete","parseUpdate","isAmbiguousAwait","updateExpressionNode","parseExprSubscripts","maybeAsyncArrow","parseBind","parseCoverCallAndAsyncArrowHead","parseMember","parseNoCallExpr","tag","quasi","dynamicImport","allowPlaceholder","nodeForExtra","oldInFSharpPipelineDirectBody","addTrailingCommaExtraToNode","parseExprListItem","_call$extra","parseSuper","parseImportMetaProperty","parseDo","parseFunctionOrFunctionSent","parseDecorators","parseNewOrNewTarget","parseTopicReferenceThenEqualsSign","parseTopicReference","pipeProposal","parseModuleExpression","parseFunction","parseAsyncArrowUnaryFunction","topicTokenType","topicTokenValue","finishTopicReference","testTopicReferenceConfiguration","topicReferenceIsAllowedInCurrentContext","registerTopicReference","meta","parseMetaProperty","innerStartPos","innerStartLoc","spreadStartLoc","optionalCommaStartLoc","spreadNodeStartPos","spreadNodeStartLoc","innerEndLoc","arrowNode","wrapParenthesis","parenExpression","metaProp","parseNew","parseExprList","parseTemplateElement","isTagged","elemStart","elem","isTail","elemEnd","cooked","tail","curElt","quasis","propHash","parsePropertyDefinition","maybeAsyncOrAccessorProp","finishedProp","generator","isExpression","hasStrictModeDirective","nonSimple","isSimpleParamList","formalParameters","reservedTest","delegating","delegate","childExpr","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","outerContextTopicState","withSmartMixTopicForbiddingContext","outerContextSoloAwaitState","prodParamToSet","prodParamToClear","ret","revertScopes","parseProgram","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","babel7CompatTokens","hashEndPos","hashEndLoc","backquoteEnd","backquoteEndLoc","startToken","templateValue","templateElementEnd","templateElementEndLoc","endToken","StatementParser","interpreter","parseInterpreterDirective","stmtToDirective","directiveLiteral","isLetKeyword","endCh","parseBreakContinueStatement","parseDebuggerStatement","parseDoStatement","parseForStatement","parseIfStatement","parseReturnStatement","parseSwitchStatement","parseThrowStatement","parseTryStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","nextTokenCharCode","isAsyncFunction","maybeName","parseLabeledStatement","allowExport","currentContextDecorators","decorator","paramsStartLoc","lab","parseHeaderExpression","awaitAt","parseFor","startsWithLet","initNode","parseVar","parseForIn","startsWithAsync","isForOf","declarationPosition","discriminant","cases","cur","sawDefault","isCase","simple","block","handler","clause","finalizer","statementStart","parsedNonDirective","isForIn","await","isFor","statement","isHangingStatement","hadConstructor","publicMethod","privateMethod","publicProp","privateProp","accessorProp","publicMember","parseClassElementName","isPrivate","maybeQuestionTokenStartLoc","pushClassPrivateProperty","pushClassProperty","pushClassAccessorProperty","parseClassAccessorProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","maybeParseExportNamedSpecifiers","hasDeclaration","maybeParseExportDeclaration","isTypeExport","assertions","nextType","hasFrom","nextAfterFrom","maybeParseImportAssertions","checkJSONModuleImport","checkNames","isDefault","isFrom","_declaration$extra","nodes","surrogate","isJSONModuleImport","nonDefaultNamedSpecifier","parseNext","maybeParseModuleAttributes","parseAssertEntries","attrNames","importSpecifier","Parser","pluginsMap","pluginMap","getParser","moduleError","generateExportedTokenTypes","internalTokenTypes","tokTypes","getParserClass","parserClassCache","pluginsFromOptions","pluginList"],"sourceRoot":""}