"use strict";(self["webpackChunkvue_project"]=self["webpackChunkvue_project"]||[]).push([[49],{1049:function(u,n,e){e.r(n),e.d(n,{default:function(){return W}});var t=function(){var u=this,n=u._self._c;return n("div",{attrs:{id:"codeDocument"}},[n("div",{staticClass:"header"},[u._m(0),n("div",{staticClass:"set"},[n("div",{staticClass:"icon"},[n("div",{staticClass:"iconfont icon-set"},[n("c-dropdown",{staticClass:"set-btns_container"},[n("div",{staticClass:"set-btns"},[n("div",{staticClass:"set-btn import"},[u._v("导入解析结果 "),n("input",{staticClass:"import_project",attrs:{type:"file"}})]),n("div",{staticClass:"set-btn export",on:{mousedown:u.exportProject}},[u._v("导出解析结果")])])])],1)])])]),n("div",{staticClass:"main"},[n("div",{staticClass:"bar"},[n("div",{staticClass:"item-btn",attrs:{"data-selected":u.analyseResult.fileListVisible,title:"文件列表"},on:{mousedown:function(n){return u.setFileListVisible()}}},[u._v("列")]),n("div",{staticClass:"item-btn",attrs:{"data-selected":u.analyseResult.codeVisible,title:"代码文件"},on:{mousedown:function(n){return u.setCodeVisible()}}},[u._v(" 代 ")]),n("div",{staticClass:"item-btn",attrs:{"data-selected":u.analyseResult.mapVisible,title:"代码关系图"},on:{mousedown:function(n){return u.setMapVisible()}}},[u._v(" 图 ")])]),n("div",{staticClass:"items"},[n("div",{ref:"fileList",staticClass:"item files",style:{width:u.analyseResult.fileListVisible?u.analyseResult.filesTreeViewWidth+"rem":0}},[n("v-files",{attrs:{analyseResult:u.analyseResult}})],1),n("div",{staticClass:"item code"},[n("div",{ref:"code",staticClass:"code",style:{width:u.analyseResult.codeVisible?u.analyseResult.mapVisible?"50%":"100%":"0"}},[n("v-code",{attrs:{analyseResult:u.analyseResult}})],1),n("div",{ref:"codeMap",staticClass:"map",style:{width:u.analyseResult.mapVisible?u.analyseResult.codeVisible?"50%":"100%":"0"}},[n("v-map",{attrs:{analyseResult:u.analyseResult}})],1)])])])])},r=[function(){var u=this,n=u._self._c;return n("div",{staticClass:"title"},[n("div",{staticClass:"iconfont icon-yuandaimaxiayoudaima"}),n("div",{staticClass:"text"},[u._v("代码文档")])])}],a=function(){var u=this,n=u._self._c;return n("div",{staticClass:"component-dropdown",attrs:{tabindex:"0"},on:{mousedown:function(n){n.stopPropagation(),u.downSelfHide&&u.hideDropdown}}},[u._t("default")],2)},i=[],s={data(){return{parentNode:null,blurNeedHide:!1,visible:!1,height:null}},props:{downSelfHide:{type:Boolean,default:!0},trigger:{type:Boolean,default:!0}},watcher:{trigger(){this.hideDropdown()}},mounted(){this.parentNode=this.$el.parentNode,this.height=this.$el.clientHeight,this.$el.style.height=0,setTimeout((()=>{this.$el.style.transition="height .3s"}),0),this.$el.onblur=this.onblur,this.$el.parentNode.addEventListener("mousedown",this.showBtnDown)},beforeDestroy(){this.$el.onblur=null,this.parentNode?this.parentNode.removeEventListener("mousedown",this.showBtnDown):console.error("移除时 parentNode 不存在")},methods:{showBtnDown(){this.visible?this.hideDropdown():this.showDropdown()},showDropdown(){this.$el.style.height=`${this.height}px`,this.blurNeedHide=!1,this.$el.focus(),this.visible=!0},hideDropdown(){this.$el.style.height=0,this.visible=!1},onblur(){this.blurNeedHide?this.hideDropdown():(this.$el.focus(),this.blurNeedHide=!0)}}},o=s,d=e(1001),l=(0,d.Z)(o,a,i,!1,null,null,null),g=l.exports,c=function(){var u=this,n=u._self._c;return n("div",{attrs:{id:"codeDocument-filesView"}},[n("div",{staticClass:"header"},[n("div",{staticClass:"title"},[u._v(" 原始项目代码文件 ")]),n("div",{staticClass:"btns"},[n("div",{staticClass:"icon"},[n("div",{staticClass:"iconfont icon-import import",attrs:{title:"导入项目代码文件"}},[n("input",{staticClass:"import_code_files",attrs:{type:"file",webkitdirectory:"true"},on:{change:u.importCodeFiles}})])]),n("div",{staticClass:"icon"},[n("div",{staticClass:"iconfont icon-yanjiu",attrs:{"data-selected":u.analyseResult.isOnlyShowAnalyseFile,title:"只展示解析文件"},on:{mousedown:u.setShowAnalyse}})])])]),n("div",{staticClass:"file_tree"},[u.analyseResult.filesTree?n("v-file_node",{attrs:{analyseResult:u.analyseResult,fileNode:u.analyseResult.filesTree}}):u._e()],1)])},h=[],p=function(){var u=this,n=u._self._c;return n("div",{staticClass:"component-file-node"},[n("div",{staticClass:"node-content",attrs:{"data-selected":u.analyseResult.selectedFile===u.fileNode,"data-hide":!!u.analyseResult.isOnlyShowAnalyseFile&&!(u.fileNode.hasAnalyse||u.fileNode.isAnalyse)}},[n("div",{class:{expand:!0,leaf:u.isLeaf,expanded:u.isExpand&&!u.isLeaf},on:{mousedown:u.handleExpand}},[u._v(" › ")]),n("div",{staticClass:"label",on:{mousedown:function(n){return u.selectNode(u.fileNode,n)}}},[u._v(u._s(u.fileNode.name))]),n("div",{staticClass:"btns"},[n("div",{staticClass:"btn"},[n("div",{class:{"analyse iconfont":!0,"icon-yulan":u.fileNode.isAnalyse,"icon-chakan":!u.fileNode.isAnalyse},attrs:{title:u.fileNode.isAnalyse?"解析文件":"添加为解析文件","data-selected":u.fileNode.isAnalyse},on:{mousedown:function(n){return n.stopPropagation(),u.setAnalyseFile(u.fileNode,n)}}})])])]),u.isLeaf?u._e():n("div",{ref:"children",staticClass:"children"},u._l(u.fileNode.files,(function(e){return n("component-file-node",{key:e.name,attrs:{analyseResult:u.analyseResult,fileNode:e}})})),1)])},f=[],y=(e(7658),{name:"component-file-node",props:{fileNode:{type:Object},analyseResult:{type:Object}},data(){return{isLeaf:!this.fileNode.files||0===this.fileNode.files.length,isExpand:!0}},methods:{handleExpand(){if(this.isLeaf)return;let u;this.isExpand=!this.isExpand,this.isExpand?(this.$refs.children.style.height=null,u=this.$refs.children.clientHeight,this.$refs.children.style.height=0,setTimeout((()=>{this.$refs.children.style.height=`${u}px`}),0),setTimeout((()=>{this.$refs.children.style.height=null}),300)):(u=this.$refs.children.clientHeight,this.$refs.children.style.height=`${u}px`,setTimeout((()=>{this.$refs.children.style.height=0}),0))},selectNode(u){u.folder&&(console.log(u.folder),console.log("folderName:",u.folder.name)),this.isLeaf?this.analyseResult.selectedFile===u?this.analyseResult.selectedFileOrderPath=this.analyseResult.selectedFile=null:(this.analyseResult.selectedFile=u,this.analyseResult.selectedFileOrderPath=u.orderPath):this.handleExpand()},setAnalyseFile(u){if(u.isAnalyse=!u.isAnalyse,this.isLeaf)this.analyseResult.selectedFile&&(this.analyseResult.selectedFile=u);else{let n=[u];while(n.length>0){let u=n.pop();u.hasAnalyse!==u.isAnalyse&&(u.hasAnalyse=u.isAnalyse),u.files.forEach((e=>{e.isAnalyse!==u.isAnalyse&&(e.isAnalyse=u.isAnalyse),"folder"===e.type&&n.push(e)}))}}while(u.folder){let n=u.folder;if(u.isAnalyse){n.hasAnalyse=!0;let e=!0;for(let u=0,t=n.files.length;u<t;u++)if(!n.files[u].isAnalyse){e=!1;break}e&&(u.folder.isAnalyse=!0)}else{n.isAnalyse=!1;let u=!0;for(let e=0,t=n.files.length;e<t;e++)if(n.files[e].isAnalyse||n.files[e].hasAnalyse){u=!1;break}u&&(n.hasAnalyse=!1)}u=u.folder}}},mounted(){}}),v=y,m=(0,d.Z)(v,p,f,!1,null,null,null),b=m.exports;function E(u){let n=null,e={};for(let t=0;t<u.length;t++){let r,a=u[t],i=a.webkitRelativePath.split("/"),s=new FileReader,o="",d="";i.forEach(((u,t,i)=>{if(console.log("name:",u),o+=`/${u}`,t===i.length-1){let n={name:u,orderPath:t>1?`${d}-${r.files.length}`:`${r.files.length}`,type:"file",folder:r,isAnalyse:!1};Object.defineProperty(n,"folder",{value:r,enumerable:!1}),s.readAsText(a),r.files.push(n),s.onload=function(u){n.file=s.result}}else if(0===t)n||(n={name:u,type:"folder",files:[],hasAnalyse:!1,isAnalyse:!1}),r=n;else{let n;if(void 0===e[o]){let t={name:u,type:"folder",files:[],hasAnalyse:!1,isAnalyse:!1};Object.defineProperty(t,"folder",{value:r,enumerable:!1}),n=e[o]=r.files.length,r.files.push(t),r=t}else n=e[o],r=r.files[n];d+=t>1?`-${n}`:`${n}`}}))}return n}function w(u){return u.files&&u.files.forEach((n=>{Object.defineProperty(n,"folder",{value:u,enumerable:!1}),"folder"===n.type&&w(n)})),u}var x={components:{"v-file_node":b},props:{analyseResult:{type:Object}},methods:{importCodeFiles(u){let n=u.target.files;this.analyseResult.filesTree=E(n),this.analyseResult.selectedFile=null},setShowAnalyse(){this.analyseResult.isOnlyShowAnalyseFile=!this.analyseResult.isOnlyShowAnalyseFile}}},S=x,A=(0,d.Z)(S,c,h,!1,null,null,null),k=A.exports,I=function(){var u=this,n=u._self._c;return n("div",{attrs:{id:"codeDocument-codeView"}},[u.codeString?n("div",{staticClass:"code"},u._l(u.codeString,(function(e,t){return n("div",{staticClass:"code_line"},[n("div",{staticClass:"line line_index",style:{width:10*u.codeStringLineDigit+22+"px","min-width":10*u.codeStringLineDigit+22+"px"}},[u._v(u._s(t))]),n("div",{staticClass:"line line_string"},[u._v(u._s(e))])])})),0):u._e()])},N=[],C={props:{analyseResult:{type:Object}},data(){return{codeString:null,codeStringLineDigit:null}},methods:{setCodeString(u){this.codeString=u.file.split("\n");let n=this.codeString.length;this.codeStringLineDigit=0;do{n=(n-n%10)/10,this.codeStringLineDigit++}while(n>0)}},watch:{"analyseResult.selectedFile":function(u){u&&u.file?this.setCodeString(u):this.codeString=this.codeStringLineDigit=null}},mounted(){this.analyseResult.selectedFile&&this.setCodeString(this.analyseResult.selectedFile)}},T=C,R=(0,d.Z)(T,I,N,!1,null,null,null),O=R.exports,M=function(){var u=this,n=u._self._c;return n("div",{ref:"mapView",attrs:{id:"codeDocument-mapView"}})},L=[],D={props:{analyseResult:{type:Object}},mounted(){}},j=D,_=(0,d.Z)(j,M,L,!1,null,null,null),P=_.exports,B=JSON.parse('{"version":"0","fileListVisible":true,"codeVisible":true,"mapVisible":true,"filesTree":{"name":"dagre-0.0.4","type":"folder","files":[{"name":".DS_Store","orderPath":"0","type":"file","isAnalyse":false,"file":"\\u0000\\u0000\\u0000\\u0001Bud1\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\u0004\\n\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\f\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0010\\u0000\\u0000G\\u0000E\\u0000L\\u0000O\\u0000G\\u0000.\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\f\\u0000\\u0000\\u0000\\f\\u0000C\\u0000H\\u0000A\\u0000N\\u0000G\\u0000E\\u0000L\\u0000O\\u0000G\\u0000.\\u0000m\\u0000dIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0001�\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\f\\u0000d\\u0000e\\u0000m\\u0000o\\u0000-\\u0000d\\u00003\\u0000.\\u0000h\\u0000t\\u0000m\\u0000lIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0002�\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\t\\u0000d\\u0000e\\u0000m\\u0000o\\u0000.\\u0000h\\u0000t\\u0000m\\u0000lIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000A\\u0000\\u0000\\u0000�������\\u0000\\u0000\\u0000\\u0000\\u0000\\b\\u0000i\\u0000n\\u0000d\\u0000e\\u0000x\\u0000.\\u0000j\\u0000sIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000�\\u0000\\u0000\\u0000�������\\u0000\\u0000\\u0000\\u0000\\u0000\\u0007\\u0000L\\u0000I\\u0000C\\u0000E\\u0000N\\u0000S\\u0000EIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0001�\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\b\\u0000M\\u0000a\\u0000k\\u0000e\\u0000f\\u0000i\\u0000l\\u0000eIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0001\\u001d\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\n\\u0000p\\u0000a\\u0000c\\u0000k\\u0000a\\u0000g\\u0000e\\u0000.\\u0000j\\u0000sIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0001\\u001d\\u0000\\u0000\\u0000�������\\u0000\\u0000\\u0000\\u0000\\u0000\\t\\u0000R\\u0000E\\u0000A\\u0000D\\u0000M\\u0000E\\u0000.\\u0000m\\u0000dIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0002g\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\u0003\\u0000s\\u0000r\\u0000cIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000A\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\u0004\\u0000t\\u0000e\\u0000s\\u0000tIlocblob\\u0000\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000�\\u0000\\u0000\\u0000.������\\u0000\\u0000\\u0000\\u0000\\u0000\\u0004\\u0000t\\u0000e\\u0000s\\u0000tbwspblob\\u0000\\u0000\\u0000�bplist00�\\u0001\\u0002\\u0003\\u0004\\u0005\\u0006\\u0007\\b\\u0007\\b\\u000b\\b]ShowStatusBar[ShowToolbar[ShowTabView_\\u0010\\u0014ContainerShowSidebar\\\\WindowBounds[ShowSidebar\\b\\t\\b\\t_\\u0010\\u0018{{400, 374}, {920, 436}}\\t\\b\\u0015#/;R_klmno�\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\r\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000�\\u0000\\u0000\\u0000\\u0004\\u0000t\\u0000e\\u0000s\\u0000tvSrnlong\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\b\\u000b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000 \\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000@\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000�\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0004\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0010\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000 \\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000@\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000�\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0002\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0004\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0010\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000 \\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000@\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000�\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0002\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0004\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0010\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001 \\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001@\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0003\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0010\\u000b\\u0000\\u0000\\u0000E\\u0000\\u0000\\u0004\\n\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0004DSDB\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000 \\u0000\\u0000\\u0000`\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000�\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000\\u0002\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0002\\u0000\\u0000\\b\\u0000\\u0000\\u0000\\u0018\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000 \\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000@\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0000�\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0002\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0004\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000\\u0010\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000 \\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000@\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0000�\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0001\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0002\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0004\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\b\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001\\u0010\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001 \\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0001@\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000\\u0000"},{"name":"LICENSE","orderPath":"1","type":"file","isAnalyse":false,"file":"Copyright (c) 2012 Chris Pettitt\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\"Software\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n"},{"name":"CHANGELOG.md","orderPath":"2","type":"file","isAnalyse":false,"file":"# v0.0.4\\n\\n* We have significantly reduced the amount of graph based customization. Most\\n  customization now comes through standard CSS.\\n\\n# v0.0.3\\n\\n* Support for HTML node labels. To use an HTML node label, start the label with\\n  the `<` character.\\n\\n# v0.0.2\\n\\n* Documentation for configuration options added to `src/pre-layout.js`.\\n* Demo improvement: only redraw graph if it has changed.\\n* Fix to ordering phase that could result in suboptimal ordering.\\n* Improvement to positioning phase to produce more compact graphs (#11).\\n* Number of iterations in order phase are configurable via `orderIters` option.\\n\\n# v0.0.1\\n\\nInitial revision.\\n"},{"name":"Makefile","orderPath":"3","type":"file","isAnalyse":false,"file":"NODE?=node\\nNPM?=npm\\nPEGJS?=node_modules/pegjs/bin/pegjs\\nMOCHA?=node_modules/mocha/bin/mocha\\nMOCHA_OPTS?=\\n\\nall: dagre.js package.json\\n\\n.INTERMEDIATE dagre.js: \\\\\\n\\tsrc/pre.js \\\\\\n\\tsrc/version.js \\\\\\n\\tsrc/graph.js \\\\\\n\\tsrc/layout.js \\\\\\n\\tsrc/layout-rank.js \\\\\\n\\tsrc/layout-order.js \\\\\\n\\tsrc/layout-position.js \\\\\\n\\tsrc/render.js \\\\\\n\\tsrc/util.js \\\\\\n\\tsrc/priority-queue.js \\\\\\n\\tsrc/parse-dot.js \\\\\\n\\tsrc/dot-grammar.js \\\\\\n\\tsrc/post.js\\n\\ndagre.js: Makefile node_modules\\n\\t@rm -f $@\\n\\tcat $(filter %.js, $^) > $@\\n\\t@chmod a-w $@\\n\\nsrc/dot-grammar.js: node_modules\\n\\t$(PEGJS) -e dot_parser src/dot-grammar.pegjs $@\\n\\nnode_modules: package.json\\n\\t$(NPM) install\\n\\npackage.json: src/version.js package.js\\n\\t@rm -f $@\\n\\t$(NODE) package.js > $@\\n\\n.PHONY: test\\ntest: dagre.js\\n\\t$(MOCHA) $(MOCHA_OPTS)\\n\\nclean:\\n\\trm -f dagre.js package.json\\n"},{"name":"package.js","orderPath":"4","type":"file","isAnalyse":false,"file":"dagre = {};\\n\\nrequire(\'./src/version.js\');\\n\\nvar sys = require(\'sys\');\\n\\nsys.puts(JSON.stringify({\\n  name: \\"dagre\\",\\n  version: dagre.version,\\n  description: \\"Directed graph rendering\\",\\n  main: \\"index.js\\",\\n  directories: {\\n    src: \\"src\\",\\n    test: \\"test\\"\\n  },\\n  scripts: {\\n    test: \\"make test\\"\\n  },\\n  keywords: [\\n    \\"graph\\"\\n  ],\\n  devDependencies: {\\n    pegjs: \\"0.7.x\\",\\n    mocha: \\"1.5.x\\",\\n    chai: \\"1.3.x\\"\\n  },\\n  author: \\"Chris Pettitt <chris@samsarin.com>\\",\\n  repository: {\\n    type: \\"git\\",\\n    url: \\"https://github.com/cpettitt/dagre.git\\"\\n  },\\n  license: \\"MIT\\"\\n}, null, 2));\\n"},{"name":"index.js","orderPath":"5","type":"file","isAnalyse":false,"file":"require(\'./dagre.js\');\\nmodule.exports = dagre;\\n"},{"name":"README.md","orderPath":"6","type":"file","isAnalyse":false,"file":"# dagre - Directed graph rendering\\n\\nUse dagre to layout and render directed graphs on the client side.\\n\\n## Demo\\n\\nTry our [interactive demo](http://cpettitt.github.com/project/dagre/latest/demo.html)!\\n\\n## Building\\n\\n[![Build Status](https://secure.travis-ci.org/cpettitt/dagre.png)](http://travis-ci.org/cpettitt/dagre)\\n\\nBefore building this library you need to install the [npm package manager].\\n\\nThen follow these steps in this directory:\\n\\n    $ make\\n\\n\\nIf you want to verify the integrity of the library, use:\\n\\n    $ make test\\n\\n## Using\\n\\nTo try the graph rendering open `demo.html` in your browser.\\n\\n## License\\n\\ndagre is licensed under the terms of the MIT License. See the LICENSE file\\nfor details.\\n\\n[npm package manager]: http://npmjs.org/"},{"name":"demo-d3.html","orderPath":"7","type":"file","isAnalyse":true,"file":"<!doctype html>\\n\\n<meta charset=\\"utf-8\\">\\n<title>Dagre Test Page</title>\\n\\n<h2>Graph Visualization</h2>\\n\\n<svg width=0 height=0>\\n  <defs>\\n    <marker id=\\"arrowhead\\"\\n            viewBox=\\"0 0 10 10\\"\\n            refX=\\"8\\"\\n            refY=\\"5\\"\\n            markerUnits=\\"strokeWidth\\"\\n            markerWidth=\\"8\\"\\n            markerHeight=\\"5\\"\\n            orient=\\"auto\\"\\n            style=\\"fill: #333\\">\\n      <path d=\\"M 0 0 L 10 5 L 0 10 z\\"></path>\\n    </marker>\\n  </defs>\\n</svg>\\n\\n<script src=\\"http://d3js.org/d3.v2.min.js\\"><\/script>\\n<script src=\\"dagre.js\\"><\/script>\\n\\n<style>\\n.node rect {\\n  stroke-width: 1.5px;\\n  stroke: #333;\\n  fill: #fff;\\n}\\n\\n#node-CLOSED rect {\\n  stroke-width: 3px;\\n  fill: #f88;\\n}\\n\\n.node text {\\n  font-family: Verdana;\\n}\\n\\npath.edge {\\n  fill: none;\\n  stroke: #333;\\n  stroke-width: 1.5px;\\n}\\n</style>\\n\\n<script>\\n  var nodePadding = 10;\\n<\/script>\\n\\n<script>\\n  // Source RFC 793\\n  var transitions = [\\n    { source: \\"CLOSED\\", target: \\"LISTEN\\" },\\n    { source: \\"LISTEN\\", target: \\"SYN RCVD\\" },\\n    { source: \\"LISTEN\\", target: \\"SYN SENT\\" },\\n    { source: \\"LISTEN\\", target: \\"CLOSED\\" },\\n    { source: \\"SYN RCVD\\", target: \\"FINWAIT-1\\" },\\n    { source: \\"SYN RCVD\\", target: \\"ESTAB\\" },\\n    { source: \\"SYN SENT\\", target: \\"SYN RCVD\\" },\\n    { source: \\"SYN SENT\\", target: \\"ESTAB\\" },\\n    { source: \\"SYN SENT\\", target: \\"CLOSED\\" },\\n    { source: \\"ESTAB\\", target: \\"FINWAIT-1\\" },\\n    { source: \\"ESTAB\\", target: \\"CLOSE WAIT\\" },\\n    { source: \\"FINWAIT-1\\", target: \\"FINWAIT-2\\" },\\n    { source: \\"FINWAIT-1\\", target: \\"CLOSING\\" },\\n    { source: \\"CLOSE WAIT\\", target: \\"LAST-ACK\\" },\\n    { source: \\"FINWAIT-2\\", target: \\"TIME WAIT\\" },\\n    { source: \\"CLOSING\\", target: \\"TIME WAIT\\" },\\n    { source: \\"LAST-ACK\\", target: \\"CLOSED\\" },\\n    { source: \\"TIME WAIT\\", target: \\"CLOSED\\" },\\n  ];\\n\\n  // Get the data in the right form\\n  var stateKeys = {};\\n  transitions.forEach(function(d) {\\n    stateKeys[d.source] = { label: d.source };\\n    stateKeys[d.target] = { label: d.target };\\n  });\\n  var states = d3.values(stateKeys);\\n  transitions.forEach(function(d) {\\n    d.source = stateKeys[d.source];\\n    d.target = stateKeys[d.target];\\n  });\\n\\n  // Now start laying things out\\n  var svg = d3.select(\\"svg\\");\\n  var svgGroup = svg.append(\\"g\\").attr(\\"transform\\", \\"translate(5, 5)\\");\\n\\n  // `nodes` is center positioned for easy layout later\\n  var nodes = svgGroup\\n    .selectAll(\\"g .node\\")\\n    .data(states)\\n    .enter()\\n      .append(\\"g\\")\\n      .attr(\\"class\\", \\"node\\")\\n      .attr(\\"id\\", function(d) { return \\"node-\\" + d.label });\\n\\n  var edges = svgGroup\\n    .selectAll(\\"path .edge\\")\\n    .data(transitions)\\n    .enter()\\n      .append(\\"path\\")\\n      .attr(\\"class\\", \\"edge\\")\\n      .attr(\\"marker-end\\", \\"url(#arrowhead)\\");\\n\\n  // Append rectangles to the nodes. We do this before laying out the text\\n  // because we want the text above the rectangle.\\n  var rects = nodes.append(\\"rect\\");\\n\\n  // Append text\\n  var labels = nodes\\n    .append(\\"text\\")\\n      .attr(\\"text-anchor\\", \\"middle\\")\\n      .attr(\\"x\\", 0);\\n\\n  labels\\n    .append(\\"tspan\\")\\n    .attr(\\"x\\", 0)\\n    .attr(\\"dy\\", \\"1em\\")\\n    .text(function(d) { return d.label; });\\n\\n  // We need width and height for layout.\\n  labels.each(function(d) {\\n    var bbox = this.getBBox();\\n    d.bbox = bbox;\\n    d.width = bbox.width + 2 * nodePadding;\\n    d.height = bbox.height + 2 * nodePadding;\\n  });\\n\\n  rects\\n    .attr(\\"x\\", function(d) { return -(d.bbox.width / 2 + nodePadding); })\\n    .attr(\\"y\\", function(d) { return -(d.bbox.height / 2 + nodePadding); })\\n    .attr(\\"width\\", function(d) { return d.width; })\\n    .attr(\\"height\\", function(d) { return d.height; });\\n\\n  labels\\n    .attr(\\"x\\", function(d) { return -d.bbox.width / 2; })\\n    .attr(\\"y\\", function(d) { return -d.bbox.height / 2; });\\n\\n  dagre.layout()\\n    .nodeSep(50)\\n    .edgeSep(10)\\n    .rankSep(30)\\n    .nodes(states)\\n    .edges(transitions)\\n    .run();\\n\\n  nodes.attr(\\"transform\\", function(d) { return \\"translate(\\" + d.dagre.x + \\",\\" + d.dagre.y +\\")\\"; });\\n\\n  edges.attr(\\"d\\", function(e) {\\n    var points = e.dagre.points;\\n    points.push(dagre.util.intersectRect(e.target.dagre, points.length > 0 ? points[points.length - 1] : e.source.dagre));\\n    var origin = dagre.util.intersectRect(e.source.dagre, points[0]);\\n    return \\"M\\" + dagre.util.pointStr(origin) + \\" L \\" + points.map(dagre.util.pointStr).join(\\" \\");\\n  });\\n\\n  // Resize the SVG element\\n  var svgBBox = svg.node().getBBox();\\n  svg.attr(\\"width\\", svgBBox.width + 10);\\n  svg.attr(\\"height\\", svgBBox.height + 10);\\n<\/script>\\n"},{"name":".gitignore","orderPath":"8","type":"file","isAnalyse":false,"file":"/dagre.js\\n/package.json\\n/node_modules\\n"},{"name":"demo.html","orderPath":"9","type":"file","isAnalyse":false,"file":"<!doctype html>\\n\\n<meta charset=\\"utf-8\\">\\n<title>Dagre Test Page</title>\\n\\n<style>\\n.node rect {\\n  stroke-width: 1.5px;\\n  stroke: #333;\\n  fill: #fff;\\n}\\n\\n.node text {\\n  font-family: Verdana;\\n}\\n\\npath.edge {\\n  fill: none;\\n  stroke: #333;\\n  stroke-width: 1.5px;\\n}\\n</style>\\n\\n<style>\\nh2 {\\n  color: #333;\\n}\\n\\n.error {\\n  color: red;\\n}\\n</style>\\n\\n<h2>Graph Definition</h2>\\n\\n<textarea id=\\"input\\" rows=\\"5\\" cols=\\"80\\" style=\\"display: block\\" onKeyUp=\\"tryDraw();\\">\\n/* Example */\\ndigraph {\\n    A [label=\\"<div style=\'padding: 10px;\'>A <span style=\'font-size:32px\'>Big</span> <span style=\'color:red;\'>HTML</span> Source!</div>\\"];\\n    C;\\n    E [label=\\"A sink\\"];\\n    A -&gt; B -&gt; C;\\n    B -&gt; D -&gt; E;\\n    C -&gt; E;\\n    A -&gt; D;\\n}\\n</textarea>\\n\\n<h2>Graph Visualization</h2>\\n\\n<svg width=0 height=0>\\n  <defs>\\n    <marker id=\\"arrowhead\\"\\n            viewBox=\\"0 0 10 10\\"\\n            refX=\\"8\\"\\n            refY=\\"5\\"\\n            markerUnits=\\"strokeWidth\\"\\n            markerWidth=\\"8\\"\\n            markerHeight=\\"5\\"\\n            orient=\\"auto\\"\\n            style=\\"fill: #333\\">\\n      <path d=\\"M 0 0 L 10 5 L 0 10 z\\"></path>\\n    </marker>\\n  </defs>\\n</svg>\\n\\n<script src=\\"http://d3js.org/d3.v2.min.js\\"><\/script>\\n<script src=\\"dagre.js\\"><\/script>\\n\\n<script>\\n  var input = document.querySelector(\\"#input\\");\\n\\n  var svg = d3.select(\\"svg\\");\\n  var svgGroup = svg.append(\\"g\\").attr(\\"transform\\", \\"translate(5, 5)\\");\\n\\n  var graphRE = /[?&]graph=([^&]+)/;\\n  var graphMatch = window.location.search.match(graphRE);\\n  if (graphMatch) {\\n    input.value = decodeURIComponent(graphMatch[1]);\\n  }\\n\\n  tryDraw();\\n\\n  function graphToURL() {\\n    return [window.location.protocol, \'//\',\\n            window.location.host,\\n            window.location.pathname,\\n            \'?graph=\', encodeURIComponent(input.value)].join(\'\');\\n  }\\n\\n  var oldInputValue;\\n  function tryDraw() {\\n    var result;\\n\\n    if (oldInputValue !== input.value) {\\n      input.setAttribute(\\"class\\", \\"\\");\\n      oldInputValue = input.value;\\n      try {\\n        result = dagre.parseDot(input.value);\\n      } catch (e) {\\n        input.setAttribute(\\"class\\", \\"error\\");\\n      }\\n    }\\n\\n    if (result) {\\n      svgGroup.selectAll().remove();\\n\\n      // Get the data in the right form\\n      var graphNodes = result.nodes;\\n      var graphEdges = result.edges;\\n\\n      svgGroup.selectAll(\\"g\\").remove();\\n      svgGroup.selectAll(\\"path\\").remove();\\n\\n      // `nodes` is center positioned for easy layout later\\n      var nodes = svgGroup\\n        .selectAll(\\"g .node\\")\\n        .data(graphNodes)\\n        .enter()\\n          .append(\\"g\\")\\n            .attr(\\"class\\", \\"node\\")\\n            .attr(\\"id\\", function(d) { return \\"node-\\" + d.id });\\n\\n      var edges = svgGroup\\n        .selectAll(\\"path .edge\\")\\n        .data(graphEdges)\\n        .enter()\\n          .append(\\"path\\")\\n            .attr(\\"class\\", \\"edge\\")\\n            .attr(\\"marker-end\\", \\"url(#arrowhead)\\");\\n\\n      // Append rectangles to the nodes. We do this before laying out the labels\\n      // because we want the text above the rectangle.\\n      var rects = nodes.append(\\"rect\\");\\n\\n      // Append labels\\n      var labels = nodes\\n        .append(\\"g\\")\\n        .attr(\\"class\\", \\"label\\")\\n        .classed(\\"inline-html\\", function(d) { return d.label[0] === \\"<\\"; });\\n\\n      var foLabel = nodes.selectAll(\\"g .label.inline-html\\")\\n        .append(\\"foreignObject\\")\\n        // TODO find a better way to get the dimensions for foriegnObjects\\n        .attr(\\"width\\", \\"100000\\");\\n\\n      foLabel\\n        .append(\\"xhtml:div\\")\\n        .style(\\"float\\", \\"left\\")\\n        .html(function(d) { return d.label; })\\n        .each(function(d) {\\n          d.foWidth = this.clientWidth;\\n          d.foHeight = this.clientHeight;\\n          d.nodePadding = 0;\\n        });\\n\\n      foLabel\\n        .attr(\\"width\\", function(d) { return d.foWidth; })\\n        .attr(\\"height\\", function(d) { return d.foHeight; });\\n\\n      nodes.selectAll(\\"g .label:not(.inline-html)\\")\\n        .append(\\"text\\")\\n          .attr(\\"text-anchor\\", \\"left\\")\\n            .append(\\"tspan\\")\\n            .attr(\\"dy\\", \\"1em\\")\\n            .text(function(d) { return d.label; })\\n            .each(function(d) { d.nodePadding = 10; });\\n\\n      // We need width and height for layout.\\n      labels.each(function(d) {\\n        var bbox = this.getBBox();\\n        d.bbox = bbox;\\n        d.width = bbox.width + 2 * d.nodePadding;\\n        d.height = bbox.height + 2 * d.nodePadding;\\n      });\\n\\n      rects\\n        .attr(\\"x\\", function(d) { return -(d.bbox.width / 2 + d.nodePadding); })\\n        .attr(\\"y\\", function(d) { return -(d.bbox.height / 2 + d.nodePadding); })\\n        .attr(\\"width\\", function(d) { return d.width; })\\n        .attr(\\"height\\", function(d) { return d.height; });\\n\\n      labels\\n        .attr(\\"transform\\", function(d) { return \\"translate(\\" + (-d.bbox.width / 2) + \\",\\" + (-d.bbox.height / 2) + \\")\\"; });\\n\\n      dagre.layout()\\n        .nodeSep(50)\\n        .edgeSep(10)\\n        .rankSep(30)\\n        .nodes(graphNodes)\\n        .edges(graphEdges)\\n        .run();\\n\\n      nodes.attr(\\"transform\\", function(d) { return \\"translate(\\" + d.dagre.x + \\",\\" + d.dagre.y +\\")\\"; });\\n\\n      edges.attr(\\"d\\", function(e) {\\n        var points = e.dagre.points;\\n        points.push(dagre.util.intersectRect(e.target.dagre, points.length > 0 ? points[points.length - 1] : e.source.dagre));\\n        var origin = dagre.util.intersectRect(e.source.dagre, points[0]);\\n        return \\"M\\" + dagre.util.pointStr(origin) + \\" L \\" + points.map(dagre.util.pointStr).join(\\" \\");\\n      });\\n\\n      // Resize the SVG element\\n      var svgBBox = svg.node().getBBox();\\n      svg.attr(\\"width\\", svgBBox.width + 10);\\n      svg.attr(\\"height\\", svgBBox.height + 10);\\n    }\\n  }\\n<\/script>\\n"},{"name":".travis.yml","orderPath":"10","type":"file","isAnalyse":false,"file":"language: node_js\\nnode_js:\\n  - \\"0.8\\"\\n  - \\"0.6\\"\\nscript: make test\\n"},{"name":"src","type":"folder","files":[{"name":"graph.js","orderPath":"11-0","type":"file","isAnalyse":true,"file":"/*\\n * Directed multi-graph used during layout.\\n */\\ndagre.graph = {};\\n\\n/*\\n * Creates a new directed multi-graph. This should be invoked with\\n * `var g = dagre.graph()` and _not_ `var g = new dagre.graph()`.\\n */\\ndagre.graph = function() {\\n  var nodes = {},\\n      inEdges = {},\\n      outEdges = {},\\n      edges = {},\\n      graph = {};\\n\\n  graph.addNode = function(u) {\\n    if (graph.hasNode(u)) {\\n      throw new Error(\\"Graph already has node \'\\" + u + \\"\':\\\\n\\" + graph.toString());\\n    }\\n    nodes[u] = u;\\n    inEdges[u] = {};\\n    outEdges[u] = {};\\n  }\\n\\n  graph.delNode = function(u) {\\n    strictHasNode(u);\\n\\n    graph.edges(u, null).forEach(function(e) { graph.delEdge(e); });\\n    graph.edges(null, u).forEach(function(e) { graph.delEdge(e); });\\n\\n    delete inEdges[u];\\n    delete outEdges[u];\\n    delete nodes[u];\\n  }\\n\\n  graph.hasNode = function(u) {\\n    return u in nodes;\\n  }\\n\\n  graph.addEdge = function(e, source, target) {\\n    strictHasNode(source);\\n    strictHasNode(target);\\n\\n    if (graph.hasEdge(e)) {\\n      throw new Error(\\"Graph already has edge \'\\" + e + \\"\':\\\\n\\" + graph.toString());\\n    }\\n\\n    edges[e] = { source: source, target: target, key: e };\\n    addEdgeToMap(inEdges[target], source, e);\\n    addEdgeToMap(outEdges[source], target, e);\\n  }\\n\\n  graph.delEdge = function(e) {\\n    var edge = strictGetEdge(e);\\n    delEdgeFromMap(inEdges[edge.target], edge.source, e)\\n    delEdgeFromMap(outEdges[edge.source], edge.target, e)\\n    delete edges[e];\\n  }\\n\\n  graph.edge = function(e) {\\n    var edge = strictGetEdge(e);\\n    return {\\n      source: edge.source,\\n      target: edge.target\\n    };\\n  }\\n\\n  graph.hasEdge = function(e) {\\n    return e in edges;\\n  }\\n\\n  graph.successors = function(u) {\\n    strictHasNode(u);\\n    return keys(outEdges[u]).map(function(v) { return nodes[v]; });\\n  }\\n\\n  graph.predecessors = function(u) {\\n    strictHasNode(u);\\n    return keys(inEdges[u]).map(function(v) { return nodes[v]; });\\n  }\\n\\n  graph.neighbors = function(u) {\\n    strictHasNode(u);\\n    var vs = {};\\n    keys(outEdges[u]).map(function(v) { vs[v] = true; });\\n    keys(inEdges[u]).map(function(v) { vs[v] = true; });\\n    return keys(vs).map(function(v) { return nodes[v]; });\\n  }\\n\\n  graph.nodes = function() {\\n    return values(nodes);\\n  }\\n\\n  graph.edges = function(source, target) {\\n    var sourceDefined = source !== undefined && source != null;\\n    var targetDefined = target !== undefined && target != null;\\n\\n    if (sourceDefined) { strictHasNode(source); }\\n    if (targetDefined) { strictHasNode(target); }\\n\\n    if (!sourceDefined && !targetDefined) {\\n      return values(edges).map(function(e) { return e.key; });\\n    } else {\\n      var es;\\n      if (sourceDefined) {\\n        if (targetDefined) {\\n          var sourceEdges = outEdges[source];\\n          es = (target in sourceEdges) ? keys(sourceEdges[target].edges) : [];\\n        } else {\\n          es = concat(values(outEdges[source]).map(function(es) { return keys(es.edges); }));\\n        }\\n      } else {\\n        es = concat(values(inEdges[target]).map(function(es) { return keys(es.edges); }));\\n      }\\n      return es.map(function(e) { return edges[e].key });\\n    }\\n  };\\n\\n  graph.inEdges = function(target) {\\n    return graph.edges(null, target);\\n  };\\n\\n  graph.outEdges = function(source) {\\n    return graph.edges(source);\\n  };\\n\\n  graph.subgraph = function(us) {\\n    var g = dagre.graph();\\n    us.forEach(function(u) {\\n      strictHasNode(u);\\n      g.addNode(u);\\n    });\\n    values(edges).forEach(function(e) {\\n      if (g.hasNode(e.source) && g.hasNode(e.target)) {\\n        g.addEdge(e.key, e.source, e.target);\\n      }\\n    });\\n    return g;\\n  };\\n\\n  graph.toString = function() {\\n    var str = \\"GRAPH:\\\\n\\";\\n    str += \\"    Nodes: [\\" + keys(nodes).join(\\", \\") + \\"]\\\\n\\";\\n    str += \\"    Edges:\\\\n\\";\\n    keys(edges).forEach(function(e) {\\n      var edge = edges[e];\\n      str += \\"        \\" + e + \\": \\" + edge.source + \\" -> \\" + edge.target + \\"\\\\n\\";\\n    });\\n    return str;\\n  };\\n\\n  function addEdgeToMap(map, v, e) {\\n    var vEntry = map[v];\\n    if (!vEntry) {\\n      vEntry = map[v] = { count: 0, edges: {} };\\n    }\\n    vEntry.count++;\\n    vEntry.edges[e] = true;\\n  }\\n\\n  function delEdgeFromMap(map, v, e) {\\n    var vEntry = map[v];\\n    if (--vEntry.count == 0) {\\n      delete map[v];\\n    } else {\\n      delete vEntry.edges[e];\\n    }\\n  }\\n\\n  function strictHasNode(u) {\\n    if (!(u in nodes)) {\\n      throw new Error(\\"Node \'\\" + u + \\"\' is not in graph:\\\\n\\" + graph.toString());\\n    }\\n  }\\n\\n  function strictGetEdge(e) {\\n    var edge = edges[e];\\n    if (!edge) {\\n      throw new Error(\\"Edge \'\\" + e + \\"\' is not in graph:\\\\n\\" + graph.toString());\\n    }\\n    return edge;\\n  }\\n\\n  return graph;\\n}\\n"},{"name":"layout.js","orderPath":"11-1","type":"file","isAnalyse":true,"file":"dagre.layout = function() {\\n  // External configuration\\n  var\\n      // Nodes to lay out. At minimum must have `width` and `height` attributes.\\n      nodes = [],\\n      // Edges to lay out. At mimimum must have `source` and `target` attributes.\\n      edges = [],\\n      // Min separation between adjacent nodes in the same rank.\\n      nodeSep = 50,\\n      // Min separation between adjacent edges in the same rank.\\n      edgeSep = 10,\\n      // Min separation between ranks.\\n      rankSep = 30,\\n      // Number of passes to take during the ordering phase.\\n      orderIters = 24,\\n      // Debug positioning with a particular direction (up-left, up-right, down-left, down-right).\\n      posDir = null;\\n\\n  // Internal state\\n  var\\n      // Graph used to determine relationships quickly\\n      g,\\n      // Map to original nodes using graph ids\\n      nodeMap,\\n      // Map to original edges using graph ids\\n      edgeMap;\\n\\n  // This layout object\\n  var layout = {};\\n\\n  layout.nodes = function(x) {\\n    if (!arguments.length) return nodes;\\n    nodes = x;\\n    return layout;\\n  }\\n\\n  layout.edges = function(x) {\\n    if (!arguments.length) return edges;\\n    edges = x;\\n    return layout;\\n  }\\n\\n  layout.nodeSep = function(x) {\\n    if (!arguments.length) return nodeSep;\\n    nodeSep = x;\\n    return layout;\\n  }\\n\\n  layout.edgeSep = function(x) {\\n    if (!arguments.length) return edgeSep;\\n    edgeSep = x;\\n    return layout;\\n  }\\n\\n  layout.rankSep = function(x) {\\n    if (!arguments.length) return rankSep;\\n    rankSep = x;\\n    return layout;\\n  }\\n\\n  layout.orderIters = function(x) {\\n    if (!arguments.length) return orderIters;\\n    orderIters = x;\\n    return layout;\\n  }\\n\\n  layout.posDir = function(x) {\\n    if (!arguments.length) return posDir;\\n    posDir = x;\\n    return layout;\\n  }\\n\\n  layout.run = function() {\\n    // Build internal graph\\n    init();\\n\\n    if (g.nodes().length === 0) {\\n      // Nothing to do!\\n      return;\\n    }\\n\\n    var reversed = acyclic(g);\\n\\n    dagre.layout.rank(g, nodeMap);\\n    addDummyNodes();\\n    var layering = dagre.layout.order(g, orderIters, nodeMap);\\n    dagre.layout.position(g, layering, nodeMap, rankSep, nodeSep, edgeSep, posDir);\\n    collapseDummyNodes();\\n\\n    undoAcyclic(reversed);\\n\\n    resetInternalState();\\n  };\\n\\n  function resetInternalState() {\\n    g = dagre.graph();\\n    nodeMap = {};\\n    edgeMap = {};\\n  }\\n\\n  // Build graph and save mapping of generated ids to original nodes and edges\\n  function init() {\\n    resetInternalState();\\n\\n    var nextId = 0;\\n\\n    // Tag each node so that we can properly represent relationships when\\n    // we add edges. Also copy relevant dimension information.\\n    nodes.forEach(function(u) {\\n      var id = nextId++;\\n      nodeMap[id] = u.dagre = { id: id, width: u.width, height: u.height };\\n      g.addNode(id);\\n    });\\n\\n    edges.forEach(function(e) {\\n      var source = e.source.dagre.id;\\n      if (!(source in nodeMap)) {\\n        throw new Error(\\"Source node for \'\\" + e + \\"\' not in node list\\");\\n      }\\n\\n      var target = e.target.dagre.id;\\n      if (!(target in nodeMap)) {\\n        throw new Error(\\"Target node for \'\\" + e + \\"\' not in node list\\");\\n      }\\n\\n      // Track edges that aren\'t self loops - layout does nothing for self\\n      // loops, so they can be skipped.\\n      if (source !== target) {\\n        var id = nextId++;\\n        edgeMap[id] = e.dagre = { points: [] };\\n        g.addEdge(id, source, target);\\n      }\\n    });\\n  }\\n\\n  function acyclic(g) {\\n    var onStack = {};\\n    var visited = {};\\n    var reversed = [];\\n\\n    function dfs(u) {\\n      if (u in visited)\\n        return;\\n\\n      visited[u] = true;\\n      onStack[u] = true;\\n      g.edges(u, null).forEach(function(e) {\\n        var edge = g.edge(e);\\n        var v = edge.target;\\n        if (v in onStack) {\\n          g.delEdge(e);\\n          reversed.push(e);\\n          g.addEdge(e, v, u);\\n        } else {\\n          dfs(v);\\n        }\\n      });\\n\\n      delete onStack[u];\\n    }\\n\\n    g.nodes().forEach(function(u) {\\n      dfs(u);\\n    });\\n\\n    return reversed;\\n  }\\n\\n  function undoAcyclic(reversed) {\\n    reversed.forEach(function(e) {\\n      edgeMap[e].points.reverse();\\n    });\\n  }\\n\\n  // Assumes input graph has no self-loops and is otherwise acyclic.\\n  function addDummyNodes() {\\n    g.edges().forEach(function(e) {\\n      var edge = g.edge(e);\\n      var sourceRank = nodeMap[edge.source].rank;\\n      var targetRank = nodeMap[edge.target].rank;\\n      if (sourceRank + 1 < targetRank) {\\n        var prefix = \\"D-\\" + e + \\"-\\";\\n        g.delEdge(e);\\n        for (var u = edge.source, rank = sourceRank + 1, i = 0; rank < targetRank; ++rank, ++i) {\\n          var v = prefix + rank;\\n          g.addNode(v);\\n          nodeMap[v] = { width: 0,\\n                         height: 0,\\n                         edge: e,\\n                         index: i,\\n                         rank: rank,\\n                         dummy: true };\\n          g.addEdge(u + \\" -> \\" + v, u, v);\\n          u = v;\\n        }\\n        g.addEdge(u + \\" -> \\" + edge.target, u, edge.target);\\n      }\\n    });\\n  }\\n\\n  function collapseDummyNodes() {\\n    var visited = {};\\n\\n    values(nodeMap).forEach(function(u) {\\n      if (u.dummy) {\\n        var e = u.edge;\\n        var points = edgeMap[e].points;\\n        points[u.index] = { x: u.x, y: u.y };\\n      }\\n    });\\n  }\\n\\n  return layout;\\n}\\n"},{"name":"util.js","orderPath":"11-2","type":"file","isAnalyse":true,"file":"dagre.util = {};\\n\\n/*\\n * Copies attributes from `src` to `dst`. If an attribute name is in both\\n * `src` and `dst` then the attribute value from `src` takes precedence.\\n */\\nfunction mergeAttributes(src, dst) {\\n  Object.keys(src).forEach(function(k) { dst[k] = src[k]; });\\n}\\n\\nfunction min(values) {\\n  return Math.min.apply(null, values);\\n}\\n\\nfunction max(values) {\\n  return Math.max.apply(null, values);\\n}\\n\\nfunction concat(arrays) {\\n  return Array.prototype.concat.apply([], arrays);\\n}\\n\\nkeys = Object.keys;\\n\\n/*\\n * Returns an array of all values in the given object.\\n */\\nfunction values(obj) {\\n  return Object.keys(obj).map(function(k) { return obj[k]; });\\n}\\n\\n/*\\n * Returns all components in the graph using undirected navigation.\\n */\\nvar components = dagre.util.components = function(g) {\\n  var results = [];\\n  var visited = {};\\n\\n  function dfs(u, component) {\\n    if (!(u in visited)) {\\n      visited[u] = true;\\n      component.push(u);\\n      g.neighbors(u).forEach(function(v) {\\n        dfs(v, component);\\n      });\\n    }\\n  };\\n\\n  g.nodes().forEach(function(u) {\\n    var component = [];\\n    dfs(u, component);\\n    if (component.length > 0) {\\n      results.push(component);\\n    }\\n  });\\n\\n  return results;\\n};\\n\\n/*\\n * This algorithm uses undirected traversal to find a miminum spanning tree\\n * using the supplied weight function. The algorithm is described in\\n * Cormen, et al., \\"Introduction to Algorithms\\". The returned structure\\n * is an array of node id to an array of adjacent nodes.\\n */\\nvar prim = dagre.util.prim = function(g, weight) {\\n  var result = {};\\n  var parent = {};\\n  var q = priorityQueue();\\n\\n  if (g.nodes().length === 0) {\\n    return result;\\n  }\\n\\n  g.nodes().forEach(function(u) {\\n    q.add(u, Number.POSITIVE_INFINITY);\\n    result[u] = [];\\n  });\\n\\n  // Start from arbitrary node\\n  q.decrease(g.nodes()[0], 0);\\n\\n  var u;\\n  var init = false;\\n  while (q.size() > 0) {\\n    u = q.removeMin();\\n    if (u in parent) {\\n      result[u].push(parent[u]);\\n      result[parent[u]].push(u);\\n    } else if (init) {\\n      throw new Error(\\"Input graph is not connected:\\\\n\\" + g.toString());\\n    } else {\\n      init = true;\\n    }\\n\\n    g.neighbors(u).forEach(function(v) {\\n      var pri = q.priority(v);\\n      if (pri !== undefined) {\\n        var edgeWeight = weight(u, v);\\n        if (edgeWeight < pri) {\\n          parent[v] = u;\\n          q.decrease(v, edgeWeight);\\n        }\\n      }\\n    });\\n  }\\n\\n  return result;\\n};\\n\\nvar intersectRect = dagre.util.intersectRect = function(rect, point) {\\n  var x = rect.x;\\n  var y = rect.y;\\n\\n  // For now we only support rectangles\\n\\n  // Rectangle intersection algorithm from:\\n  // http://math.stackexchange.com/questions/108113/find-edge-between-two-boxes\\n  var dx = point.x - x;\\n  var dy = point.y - y;\\n  var w = rect.width / 2;\\n  var h = rect.height / 2;\\n\\n  var sx, sy;\\n  if (Math.abs(dy) * w > Math.abs(dx) * h) {\\n    // Intersection is top or bottom of rect.\\n    if (dy < 0) {\\n      h = -h;\\n    }\\n    sx = dy === 0 ? 0 : h * dx / dy;\\n    sy = h;\\n  } else {\\n    // Intersection is left or right of rect.\\n    if (dx < 0) {\\n      w = -w;\\n    }\\n    sx = w;\\n    sy = dx === 0 ? 0 : w * dy / dx;\\n  }\\n\\n  return {x: x + sx, y: y + sy};\\n}\\n\\nvar pointStr = dagre.util.pointStr = function(point) {\\n  return point.x + \\",\\" + point.y;\\n}\\n"},{"name":"layout-order.js","orderPath":"11-3","type":"file","isAnalyse":true,"file":"dagre.layout.order = (function() {\\n  function crossCount(g, layering) {\\n    var cc = 0;\\n    var prevLayer;\\n    layering.forEach(function(layer) {\\n      if (prevLayer) {\\n        cc += bilayerCrossCount(g, prevLayer, layer);\\n      }\\n      prevLayer = layer;\\n    });\\n    return cc;\\n  }\\n\\n  /*\\n   * This function searches through a ranked and ordered graph and counts the\\n   * number of edges that cross. This algorithm is derived from:\\n   *\\n   *    W. Barth et al., Bilayer Cross Counting, JGAA, 8(2) 179–194 (2004)\\n   */\\n  function bilayerCrossCount(g, layer1, layer2) {\\n    var layer2Pos = {};\\n    layer2.forEach(function(u, i) { layer2Pos[u] = i; });\\n\\n    var edgeIndices = [];\\n    layer1.forEach(function(u) {\\n      var nodeEdges = [];\\n      g.edges(u, null).forEach(function(e) {\\n        var edge = g.edge(e);\\n        nodeEdges.push(layer2Pos[edge.target]);\\n      });\\n      // TODO consider radix sort\\n      nodeEdges.sort(function(x, y) { return x - y; });\\n      edgeIndices = edgeIndices.concat(nodeEdges);\\n    });\\n\\n    var firstIndex = 1;\\n    while (firstIndex < layer2.length) {\\n      firstIndex <<= 1;\\n    }\\n\\n    var treeSize = 2 * firstIndex - 1;\\n    firstIndex -= 1;\\n\\n    var tree = [];\\n    for (var i = 0; i < treeSize; ++i) { tree[i] = 0; }\\n\\n    var cc = 0;\\n    edgeIndices.forEach(function(i) {\\n      var treeIndex = i + firstIndex;\\n      tree[treeIndex]++;\\n      while (treeIndex > 0) {\\n        if (treeIndex % 2) {\\n          cc += tree[treeIndex + 1];\\n        }\\n        treeIndex = (treeIndex - 1) >> 1;\\n        tree[treeIndex]++;\\n      }\\n    });\\n\\n    return cc;\\n  }\\n\\n  function initOrder(g, nodeMap) {\\n    var layering = [];\\n    var visited = {};\\n\\n    function dfs(u) {\\n      if (u in visited) {\\n        return;\\n      }\\n      visited[u] = true;\\n\\n      var rank = nodeMap[u].rank;\\n      for (var i = layering.length; i <= rank; ++i) {\\n        layering[i] = [];\\n      }\\n      layering[rank].push(u);\\n\\n      g.neighbors(u).forEach(function(v) {\\n        dfs(v);\\n      });\\n    }\\n\\n    g.nodes().forEach(function(u) {\\n      if (nodeMap[u].rank === 0) {\\n        dfs(u);\\n      }\\n    });\\n\\n    return layering;\\n  }\\n\\n  function improveOrdering(g, i, layering) {\\n    if (i % 2 === 0) {\\n      for (var j = 1; j < layering.length; ++j) {\\n        improveLayer(g, i, layering[j - 1], layering[j], \\"inEdges\\");\\n      }\\n    } else {\\n      for (var j = layering.length - 2; j >= 0; --j) {\\n        improveLayer(g, i, layering[j + 1], layering[j], \\"outEdges\\");\\n      }\\n    }\\n  }\\n\\n  /*\\n   * Given a fixed layer and a movable layer in a graph this function will\\n   * attempt to find an improved ordering for the movable layer such that\\n   * edge crossings may be reduced.\\n   *\\n   * This algorithm is based on the barycenter method.\\n   */\\n  function improveLayer(g, i, fixed, movable, neighbors) {\\n    var weights = rankWeights(g, fixed, movable, neighbors);\\n\\n    var toSort = [];\\n\\n    movable.forEach(function(u) {\\n      var weight = weights[u];\\n      if (weight !== -1) {\\n        toSort.push({node: u, weight: weight});\\n      }\\n    });\\n\\n    toSort.sort(function(x, y) { return x.weight - y.weight; });\\n\\n    var toSortIndex = 0;\\n    for (var i = 0; i < movable.length; ++i) {\\n      var u = movable[i];\\n      var weight = weights[u];\\n      if (weight !== -1) {\\n        movable[i] = toSort[toSortIndex++].node;\\n      }\\n    }\\n  }\\n\\n  /*\\n   * Given a fixed layer and a movable layer in a graph, this function will\\n   * return weights for the movable layer that can be used to reorder the layer\\n   * for potentially reduced edge crossings.\\n   */\\n  function rankWeights(g, fixed, movable, neighbors) {\\n    var fixedPos = {};\\n    fixed.forEach(function(u, i) { fixedPos[u] = i; });\\n\\n    var weights = {};\\n    movable.forEach(function(u) {\\n      var weight = -1;\\n      var edges = g[neighbors](u);\\n      if (edges.length > 0) {\\n        weight = 0;\\n        edges.forEach(function(e) {\\n          var edge = g.edge(e);\\n          var neighborId = edge.source === u ? edge.target : edge.source;\\n          weight += fixedPos[neighborId];\\n        });\\n        weight = weight / edges.length;\\n      }\\n      weights[u] = weight;\\n    });\\n\\n    return weights;\\n  }\\n\\n  function copyLayering(layering) {\\n    return layering.map(function(l) { return l.slice(0); });\\n  }\\n\\n  return function(g, orderIters, nodeMap) {\\n    var layering = initOrder(g, nodeMap);\\n    var bestLayering = copyLayering(layering);\\n    var bestCC = crossCount(g, layering);\\n\\n    var cc;\\n    for (var i = 0; i < orderIters; ++i) {\\n      improveOrdering(g, i, layering);\\n      cc = crossCount(g, layering);\\n      if (cc < bestCC) {\\n        bestLayering = copyLayering(layering);\\n        bestCC = cc;\\n      }\\n    }\\n\\n    return bestLayering;\\n  }\\n})();\\n"},{"name":"layout-rank.js","orderPath":"11-4","type":"file","isAnalyse":true,"file":"dagre.layout.rank = (function() {\\n  function initRank(g, nodeMap) {\\n    var pq = priorityQueue();\\n    g.nodes().forEach(function(u) {\\n      pq.add(u, g.edges(null, u).length);\\n    });\\n\\n    var current = [];\\n    var rankNum = 0;\\n    while (pq.size() > 0) {\\n      for (var minId = pq.min(); pq.priority(minId) === 0; minId = pq.min()) {\\n        pq.removeMin();\\n        nodeMap[minId].rank = rankNum;\\n        current.push(minId);\\n      }\\n\\n      if (current.length === 0) {\\n        throw new Error(\\"Input graph is not acyclic: \\" + g.toString());\\n      }\\n\\n      current.forEach(function(u) {\\n        g.edges(u, null).forEach(function(e) {\\n          var edge = g.edge(e);\\n          var target = edge.target;\\n          pq.decrease(target, pq.priority(target) - 1);\\n        });\\n      });\\n\\n      current = [];\\n      ++rankNum;\\n    }\\n  }\\n\\n  function feasibleTree(g, nodeMap) {\\n    // TODO make minLength configurable per edge\\n    var minLength = 1;\\n    var tree = dagre.util.prim(g, function(u, v) {\\n      return Math.abs(nodeMap[u].rank - nodeMap[v].rank) - minLength;\\n    });\\n\\n    var visited = {};\\n    function dfs(u, rank) {\\n      visited[u] = true;\\n      nodeMap[u].rank = rank;\\n\\n      tree[u].forEach(function(v) {\\n        if (!(v in visited)) {\\n          dfs(v, rank + (g.edges(u, v).length ? minLength : -minLength));\\n        }\\n      });\\n    }\\n\\n    dfs(g.nodes()[0], 0);\\n\\n    return tree;\\n  }\\n\\n  function normalize(g, nodeMap) {\\n    var m = min(values(nodeMap).map(function(u) { return u.rank; }));\\n    values(nodeMap).forEach(function(u) { u.rank -= m; });\\n  }\\n\\n  return function(g, nodeMap) {\\n    initRank(g, nodeMap);\\n    components(g).forEach(function(cmpt) {\\n      var subgraph = g.subgraph(cmpt);\\n      feasibleTree(subgraph, nodeMap);\\n      normalize(subgraph, nodeMap);\\n    });\\n  };\\n})();\\n"},{"name":"parse-dot.js","orderPath":"11-5","type":"file","isAnalyse":false,"file":"dagre.parseDot = function(str) {\\n  var parseTree = dot_parser.parse(str);\\n  var nodes = {};\\n  var edges = [];\\n  var undir = parseTree.type === \\"graph\\";\\n\\n  function createNode(id, attrs) {\\n    if (!(id in nodes)) {\\n      nodes[id] = { id: id, label: id };\\n    }\\n    if (attrs) {\\n      mergeAttributes(attrs, nodes[id]);\\n    }\\n  }\\n\\n  var edgeCount = {};\\n  function createEdge(source, target, attrs) {\\n    var edgeKey = source + \\"-\\" + target;\\n    var count = edgeCount[edgeKey];\\n    if (!count) {\\n      count = edgeCount[edgeKey] = 0;\\n    }\\n    edgeCount[edgeKey]++;\\n\\n    var edge = {};\\n    mergeAttributes(attrs, edge);\\n    mergeAttributes({ id: edgeKey + \\"-\\" + count,\\n                      source: nodes[source],\\n                      target: nodes[target]}, edge);\\n    edges.push(edge);\\n  }\\n\\n  function handleStmt(stmt) {\\n    switch (stmt.type) {\\n      case \\"node\\":\\n        createNode(stmt.id, stmt.attrs);\\n        break;\\n      case \\"edge\\":\\n        var prev;\\n        stmt.elems.forEach(function(elem) {\\n          handleStmt(elem);\\n\\n          switch(elem.type) {\\n            case \\"node\\":\\n              var curr = elem.id;\\n\\n              if (prev) {\\n                createEdge(prev, curr, stmt.attrs);\\n                if (undir) {\\n                  createEdge(curr, prev, stmt.attrs);\\n                }\\n              }\\n              prev = curr;\\n              break;\\n            default:\\n              // We don\'t currently support subgraphs incident on an edge\\n              throw new Error(\\"Unsupported type incident on edge: \\" + elem.type);\\n          }\\n        });\\n        break;\\n      case \\"attr\\":\\n        // Ignore for now\\n        break;\\n      default:\\n        throw new Error(\\"Unsupported statement type: \\" + stmt.type);\\n    }\\n  }\\n\\n  if (parseTree.stmts) {\\n    parseTree.stmts.forEach(function(stmt) {\\n      handleStmt(stmt);\\n    });\\n  }\\n\\n  return { nodes: values(nodes), edges: edges };\\n}\\n"},{"name":"priority-queue.js","orderPath":"11-6","type":"file","isAnalyse":true,"file":"function priorityQueue() {\\n  var _arr = [];\\n  var _keyIndices = {};\\n\\n  function _heapify(i) {\\n    var arr = _arr;\\n    var l = 2 * i,\\n        r = l + 1,\\n        largest = i;\\n    if (l < arr.length) {\\n      largest = arr[l].pri < arr[largest].pri ? l : largest;\\n      if (r < arr.length) {\\n        largest = arr[r].pri < arr[largest].pri ? r : largest;\\n      }\\n      if (largest !== i) {\\n        _swap(i, largest);\\n        _heapify(largest);\\n      }\\n    }\\n  }\\n\\n  function _decrease(index) {\\n    var arr = _arr;\\n    var pri = arr[index].pri;\\n    var parent;\\n    while (index > 0) {\\n      parent = index >> 1;\\n      if (arr[parent].pri < pri) {\\n        break;\\n      }\\n      _swap(index, parent);\\n      index = parent;\\n    }\\n  }\\n\\n  function _swap(i, j) {\\n    var arr = _arr;\\n    var keyIndices = _keyIndices;\\n    var tmp = arr[i];\\n    arr[i] = arr[j];\\n    arr[j] = tmp;\\n    keyIndices[arr[i].key] = i;\\n    keyIndices[arr[j].key] = j;\\n  }\\n\\n  function size() { return _arr.length; }\\n\\n  function keys() { return Object.keys(_keyIndices); }\\n\\n  function has(key) { return key in _keyIndices; }\\n\\n  function priority(key) {\\n    var index = _keyIndices[key];\\n    if (index !== undefined) {\\n      return _arr[index].pri;\\n    }\\n  }\\n\\n  function add(key, pri) {\\n    if (!(key in _keyIndices)) {\\n      var entry = {key: key, pri: pri};\\n      var index = _arr.length;\\n      _keyIndices[key] = index;\\n      _arr.push(entry);\\n      _decrease(index);\\n      return true;\\n    }\\n    return false;\\n  }\\n\\n  function min() {\\n    if (size() > 0) {\\n      return _arr[0].key;\\n    }\\n  }\\n\\n  function removeMin() {\\n    _swap(0, _arr.length - 1);\\n    var min = _arr.pop();\\n    delete _keyIndices[min.key];\\n    _heapify(0);\\n    return min.key;\\n  }\\n\\n  function decrease(key, pri) {\\n    var index = _keyIndices[key];\\n    if (pri > _arr[index].pri) {\\n      throw new Error(\\"New priority is greater than current priority. \\" +\\n          \\"Key: \\" + key + \\" Old: \\" + _arr[index].pri + \\" New: \\" + pri);\\n    }\\n    _arr[index].pri = pri;\\n    _decrease(index);\\n  }\\n\\n  return {\\n    size: size,\\n    keys: keys,\\n    has: has,\\n    priority: priority,\\n    add: add,\\n    min: min,\\n    removeMin: removeMin,\\n    decrease: decrease\\n  };\\n}\\n"},{"name":"post.js","orderPath":"11-7","type":"file","isAnalyse":false,"file":"})();\\n"},{"name":"render.js","orderPath":"11-8","type":"file","isAnalyse":false,"file":"/*\\n * Renders the given graph to the given svg node.\\n */\\ndagre.render = function(nodes, edges, svg) {\\n  var arrowheads = {};\\n  var svgDefs = createSVGElement(\\"defs\\");\\n  svg.appendChild(svgDefs);\\n\\n  function createSVGElement(tag) {\\n    return document.createElementNS(\\"http://www.w3.org/2000/svg\\", tag);\\n  }\\n\\n  function createLabel(u) {\\n    if (u.label[0] === \'<\') {\\n      return createHTMLLabel(u);\\n    } else {\\n      return createTextLabel(u);\\n    }\\n  }\\n\\n  function createHTMLLabel(u) {\\n    var fo = createSVGElement(\\"foreignObject\\");\\n    var div = document.createElementNS(\\"http://www.w3.org/1999/xhtml\\", \\"div\\");\\n    div.innerHTML = u.label;\\n    var body = document.querySelector(\'body\');\\n\\n    // We use temp div to try to apply most styling before placing the HTML block\\n    var tempDiv = document.createElementNS(\\"http://www.w3.org/1999/xhtml\\", \\"div\\");\\n    tempDiv.setAttribute(\\"id\\", \\"node-\\" + u.id);\\n    tempDiv.setAttribute(\\"class\\", \\"node\\");\\n    tempDiv.appendChild(div);\\n    body.appendChild(tempDiv);\\n\\n    tempDiv.setAttribute(\\"style\\", \\"width:10;float:left;\\");\\n    fo.setAttribute(\\"width\\", tempDiv.clientWidth);\\n    fo.setAttribute(\\"height\\", tempDiv.clientHeight);\\n\\n    // Clean up temp div\\n    body.removeChild(tempDiv);\\n    tempDiv.removeChild(div);\\n\\n    fo.appendChild(div);\\n    return fo;\\n  }\\n\\n  function createTextLabel(u) {\\n    var text = createSVGElement(\\"text\\");\\n    text.setAttribute(\\"x\\", 0);\\n    text.setAttribute(\\"text-anchor\\", \\"middle\\");\\n\\n    var lines = u.label.split(\\"\\\\\\\\n\\");\\n    lines.forEach(function(line) {\\n      var tspan = createSVGElement(\\"tspan\\");\\n      tspan.textContent = line;\\n      tspan.setAttribute(\\"x\\", 0);\\n      tspan.setAttribute(\\"dy\\", \\"1em\\");\\n      text.appendChild(tspan);\\n    });\\n\\n    return text;\\n  }\\n\\n  function createArrowhead(color) {\\n    colorId = color.replace(/[#() ,]/g, \\"_\\");\\n    if (!(colorId in arrowheads)) {\\n      var name = \\"arrowhead-\\" + colorId;\\n      arrowheads[colorId] = name;\\n      var arrowMarker = createSVGElement(\\"marker\\");\\n      var arrowAttrs = {\\n        id: name,\\n        viewBox: \\"0 0 10 10\\",\\n        refX: 8,\\n        refY: 5,\\n        markerUnits: \\"strokeWidth\\",\\n        markerWidth: 8,\\n        markerHeight: 5,\\n        orient: \\"auto\\",\\n        style: \\"fill: \\" + color\\n      };\\n      Object.keys(arrowAttrs).forEach(function(k) {\\n        arrowMarker.setAttribute(k, arrowAttrs[k]);\\n      });\\n      svgDefs.appendChild(arrowMarker);\\n\\n      var path = createSVGElement(\\"path\\");\\n      path.setAttribute(\\"d\\", \\"M 0 0 L 10 5 L 0 10 z\\");\\n      arrowMarker.appendChild(path);\\n    }\\n    return arrowheads[colorId];\\n  }\\n\\n  function drawNodes() {\\n    nodes.forEach(function(u) {\\n      var group = createSVGElement(\\"g\\");\\n      group.setAttribute(\\"id\\", \\"node-\\" + u.id);\\n      group.setAttribute(\\"class\\", \\"node\\");\\n      svg.appendChild(group);\\n\\n      var rect = createSVGElement(\\"rect\\");\\n      var label = createLabel(u);\\n\\n      group.appendChild(rect);\\n      group.appendChild(label);\\n\\n      var labelBBox = label.getBBox();\\n\\n      rect.setAttribute(\\"x\\", -(labelBBox.width / 2 + 5));\\n      rect.setAttribute(\\"y\\", -(labelBBox.height / 2 + 5));\\n      rect.setAttribute(\\"width\\", labelBBox.width + 5 * 2);\\n      rect.setAttribute(\\"height\\", labelBBox.height + 5 * 2);\\n\\n      label.setAttribute(\\"x\\", -(labelBBox.width / 2));\\n      label.setAttribute(\\"y\\", -(labelBBox.height / 2));\\n\\n      var rectBBox = rect.getBBox();\\n      u.width = rectBBox.width;\\n      u.height = rectBBox.height;\\n    });\\n  }\\n\\n  function drawEdges() {\\n    edges.forEach(function(e) {\\n      var path = createSVGElement(\\"path\\");\\n      path.setAttribute(\\"id\\", \\"edge-\\" + e.id);\\n      path.setAttribute(\\"class\\", \\"edge\\");\\n      svg.appendChild(path);\\n\\n      var pathStyle = window.getComputedStyle(path);\\n      var arrowhead = createArrowhead(pathStyle.stroke);\\n\\n      path.setAttribute(\\"style\\", [\\"marker-end: url(#\\" + arrowhead + \\")\\"].join(\\"; \\"));\\n    });\\n  }\\n\\n  function positionNodes() {\\n    nodes.forEach(function(u) {\\n      var group = svg.querySelector(\\"#node-\\" + u.id);\\n      group.setAttribute(\\"transform\\", \\"translate(\\" + u.x + \\",\\" + u.y + \\")\\");\\n    });\\n  }\\n\\n  function layoutEdges() {\\n    edges.forEach(function(e) {\\n      var path = svg.querySelector(\\"#edge-\\" + e.id);\\n\\n      // TODO handle self loops\\n      if (e.source !== e.target) {\\n        var points = e.points;\\n\\n        points.push(intersectRect(e.target, points.length > 0 ? points[points.length - 1] : e.source));\\n        var origin = intersectRect(e.source, points[0]);\\n\\n        path.setAttribute(\\"d\\", \\"M \\" + pointStr(origin) + \\" L \\" + points.map(pointStr).join(\\" \\"));\\n      }\\n    });\\n  }\\n\\n  drawNodes();\\n  drawEdges();\\n\\n  dagre.layout()\\n    .nodes(nodes)\\n    .edges(edges)\\n    .run();\\n\\n  positionNodes();\\n  layoutEdges();\\n}\\n"},{"name":"layout-position.js","orderPath":"11-9","type":"file","isAnalyse":true,"file":"/*\\n * The algorithms here are based on Brandes and Köpf, \\"Fast and Simple\\n * Horizontal Coordinate Assignment\\".\\n */\\ndagre.layout.position = (function() {\\n  function findType1Conflicts(g, layering, nodeMap) {\\n    var type1Conflicts = {};\\n\\n    var pos = {};\\n    layering[0].forEach(function(u, i) {\\n      pos[u] = i;\\n    });\\n\\n    for (var i = 1; i < layering.length; ++i) {\\n      var layer = layering[i];\\n\\n      // Position of last inner segment in the previous layer\\n      var innerLeft = 0;\\n      var currIdx = 0;\\n\\n      // Scan current layer for next node with an inner segment.\\n      for (var j = 0; j < layer.length; ++j) {\\n        var u = layer[j];\\n        // Update positions map for next layer iteration\\n        pos[u] = j;\\n\\n        // Search for the next inner segment in the previous layer\\n        var innerRight = null;\\n        if (nodeMap[u].dummy) {\\n          g.predecessors(u).some(function(v) {\\n            if (nodeMap[v].dummy) {\\n              innerRight = pos[v];\\n              return true;\\n            }\\n            return false;\\n          });\\n        }\\n\\n        // If no inner segment but at the end of the list we still\\n        // need to check for type 1 conflicts with earlier segments\\n        if (innerRight === null && j === layer.length - 1) {\\n          innerRight = layering[i-1].length - 1;\\n        }\\n\\n        if (innerRight !== null) {\\n          for (;currIdx <= j; ++currIdx) {\\n            var v = layer[currIdx];\\n            g.inEdges(v).forEach(function(e) {\\n              var edge = g.edge(e);\\n              var sourcePos = pos[edge.source];\\n              if (sourcePos < innerLeft || sourcePos > innerRight) {\\n                type1Conflicts[e] = true;\\n              }\\n            });\\n          }\\n          innerLeft = innerRight;\\n        }\\n      }\\n    }\\n\\n    return type1Conflicts;\\n  }\\n\\n  function verticalAlignment(g, layering, type1Conflicts, relationship) {\\n    var pos = {};\\n    var root = {};\\n    var align = {};\\n\\n    layering.forEach(function(layer) {\\n      layer.forEach(function(u, i) {\\n        root[u] = u;\\n        align[u] = u;\\n        pos[u] = i;\\n      });\\n    });\\n\\n    layering.forEach(function(layer) {\\n      var prevIdx = -1;\\n      layer.forEach(function(v) {\\n        var related = g[relationship](v);\\n        if (related.length > 0) {\\n          // TODO could find medians with linear algorithm if performance warrants it.\\n          related.sort(function(x, y) { return pos[x] - pos[y]; });\\n          var mid = (related.length - 1) / 2;\\n          related.slice(Math.floor(mid), Math.ceil(mid) + 1).forEach(function(u) {\\n            if (align[v] === v) {\\n              // TODO should we collapse multi-edges for vertical alignment?\\n              \\n              // Only need to check first returned edge for a type 1 conflict\\n              if (!type1Conflicts[concat([g.edges(v, u), g.edges(u, v)])[0]] && prevIdx < pos[u]) {\\n                align[u] = v;\\n                align[v] = root[v] = root[u];\\n                prevIdx = pos[u];\\n              }\\n            }\\n          });\\n        }\\n      });\\n    });\\n\\n    return { pos: pos, root: root, align: align };\\n  }\\n\\n  /*\\n   * Determines how much spacing u needs from its origin (center) to satisfy\\n   * width and node separation.\\n   */\\n  function deltaX(u, nodeSep, edgeSep) {\\n    var sep = u.dummy ? edgeSep : nodeSep;\\n    return u.width / 2 + sep / 2;\\n  }\\n\\n  function horizontalCompaction(layering, nodeMap, pos, root, align, nodeSep, edgeSep) {\\n    // Mapping of node id -> sink node id for class\\n    var sink = {};\\n\\n    // Mapping of sink node id -> x delta\\n    var shift = {};\\n\\n    // Mapping of node id -> predecessor node (or null)\\n    var pred = {};\\n\\n    // Calculated X positions\\n    var xs = {};\\n\\n    layering.forEach(function(layer) {\\n      layer.forEach(function(u, i) {\\n        sink[u] = u;\\n        pred[u] = i > 0 ? layer[i - 1] : null;\\n      });\\n    });\\n\\n    function placeBlock(v) {\\n      if (!(v in xs)) {\\n        xs[v] = 0;\\n        var w = v;\\n        do {\\n          if (pos[w] > 0) {\\n            var u = root[pred[w]];\\n            placeBlock(u);\\n            if (sink[v] === v) {\\n              sink[v] = sink[u];\\n            }\\n            var delta = deltaX(nodeMap[pred[w]], nodeSep, edgeSep) +\\n                        deltaX(nodeMap[w], nodeSep, edgeSep);\\n            if (sink[v] !== sink[u]) {\\n              shift[sink[u]] = Math.min(shift[sink[u]] || Number.POSITIVE_INFINITY, xs[v] - xs[u] - delta);\\n            } else {\\n              xs[v] = Math.max(xs[v], xs[u] + delta);\\n            }\\n          }\\n          w = align[w];\\n        } while (w !== v);\\n      }\\n    }\\n\\n    // Root coordinates relative to sink\\n    values(root).forEach(function(v) {\\n      placeBlock(v);\\n    });\\n\\n    var prevShift = 0;\\n    layering.forEach(function(layer) {\\n      var s = shift[layer[0]];\\n      if (s === undefined) {\\n        s = 0;\\n      }\\n      prevShift = shift[layer[0]] = s + prevShift;\\n    });\\n\\n    // Absolute coordinates\\n    layering.forEach(function(layer) {\\n      layer.forEach(function(v) {\\n        xs[v] = xs[root[v]];\\n        if (root[v] === v) {\\n          var xDelta = shift[sink[v]];\\n          if (xDelta < Number.POSITIVE_INFINITY) {\\n            xs[v] += xDelta;\\n          }\\n        }\\n      });\\n    });\\n\\n    return xs;\\n  }\\n\\n  function findMinCoord(layering, xs, nodeMap) {\\n    return min(layering.map(function(layer) {\\n      var u = layer[0];\\n      return xs[u] - nodeMap[u].width / 2;\\n    }));\\n  }\\n\\n  function findMaxCoord(layering, xs, nodeMap) {\\n    return max(layering.map(function(layer) {\\n      var u = layer[layer.length - 1];\\n      return xs[u] - nodeMap[u].width / 2;\\n    }));\\n  }\\n\\n  function shiftX(delta, xs) {\\n    Object.keys(xs).forEach(function(x) {\\n      xs[x] += delta;\\n    });\\n  }\\n\\n  function alignToSmallest(layering, xss, nodeMap) {\\n    // First find the smallest width\\n    var smallestWidthMinCoord;\\n    var smallestWidthMaxCoord;\\n    var smallestWidth = Number.POSITIVE_INFINITY;\\n    values(xss).forEach(function(xs) {\\n      var minCoord = findMinCoord(layering, xs, nodeMap);\\n      var maxCoord = findMaxCoord(layering, xs, nodeMap);\\n      var width = maxCoord - minCoord;\\n      if (width < smallestWidth) {\\n        smallestWidthMinCoord = minCoord;\\n        smallestWidthMaxCoord = maxCoord;\\n        smallestWidth = width;\\n      }\\n    });\\n\\n    // Realign coordinates with smallest width\\n    [\\"up\\", \\"down\\"].forEach(function(vertDir) {\\n      var xs = xss[vertDir + \\"-left\\"];\\n      var delta = smallestWidthMinCoord - findMinCoord(layering, xs, nodeMap);\\n      if (delta) {\\n        shiftX(delta, xs);\\n      }\\n    });\\n\\n    [\\"up\\", \\"down\\"].forEach(function(vertDir) {\\n      var xs = xss[vertDir + \\"-right\\"];\\n      var delta = smallestWidthMaxCoord - findMaxCoord(layering, xs, nodeMap);\\n      if (delta) {\\n        shiftX(delta, xs);\\n      }\\n    });\\n  }\\n\\n  function flipHorizontally(layering, xs) {\\n    var maxCenter = max(values(xs));\\n    Object.keys(xs).forEach(function(u) {\\n      xs[u] = maxCenter - xs[u];\\n    });\\n  }\\n\\n  function reverseInnerOrder(layering) {\\n    layering.forEach(function(layer) {\\n      layer.reverse();\\n    });\\n  }\\n\\n  return function(g, layering, nodeMap, rankSep, nodeSep, edgeSep, debugPosDir) {\\n    var type1Conflicts = findType1Conflicts(g, layering, nodeMap);\\n\\n    var xss = {};\\n    [\\"up\\", \\"down\\"].forEach(function(vertDir) {\\n      if (vertDir === \\"down\\") { layering.reverse(); }\\n\\n      [\\"left\\", \\"right\\"].forEach(function(horizDir) {\\n        if (horizDir === \\"right\\") { reverseInnerOrder(layering); }\\n\\n        var dir = vertDir + \\"-\\" + horizDir;\\n        if (!debugPosDir || debugPosDir === dir) {\\n          var align = verticalAlignment(g, layering, type1Conflicts, vertDir === \\"up\\" ? \\"predecessors\\" : \\"successors\\");\\n          xss[dir]= horizontalCompaction(layering, nodeMap, align.pos, align.root, align.align, nodeSep, edgeSep);\\n          if (horizDir === \\"right\\") { flipHorizontally(layering, xss[dir]); }\\n        }\\n\\n        if (horizDir === \\"right\\") { reverseInnerOrder(layering); }\\n      });\\n\\n      if (vertDir === \\"down\\") { layering.reverse(); }\\n    });\\n\\n    if (debugPosDir) {\\n      // In debug mode we allow forcing layout to a particular alignment.\\n      g.nodes().forEach(function(u) {\\n        nodeMap[u].x = xss[debugPosDir][u];\\n      });\\n    } else {\\n      alignToSmallest(layering, xss, nodeMap);\\n\\n      // Find average of medians for xss array\\n      g.nodes().forEach(function(u) {\\n        var xs = values(xss).map(function(xs) { return xs[u]; }).sort(function(x, y) { return x - y; });\\n        nodeMap[u].x = (xs[1] + xs[2]) / 2;\\n      });\\n    }\\n\\n    // Align min center point with 0\\n    var minX = min(g.nodes().map(function(u) { return nodeMap[u].x - nodeMap[u].width / 2; }));\\n    g.nodes().forEach(function(u) {\\n      nodeMap[u].x -= minX;\\n    });\\n\\n    // Align y coordinates with ranks\\n    var posY = 0;\\n    layering.forEach(function(layer) {\\n      var height = max(layer.map(function(u) { return nodeMap[u].height; }));\\n      posY += height / 2;\\n      layer.forEach(function(u) {\\n        nodeMap[u].y = posY;\\n      });\\n      posY += height / 2 + rankSep;\\n    });\\n  };\\n})();\\n"},{"name":"version.js","orderPath":"11-10","type":"file","isAnalyse":false,"file":"dagre.version = \\"0.0.4\\";\\n"},{"name":"pre.js","orderPath":"11-11","type":"file","isAnalyse":false,"file":"/*\\nCopyright (c) 2012 Chris Pettitt\\n\\nPermission is hereby granted, free of charge, to any person obtaining a copy\\nof this software and associated documentation files (the \\"Software\\"), to deal\\nin the Software without restriction, including without limitation the rights\\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\ncopies of the Software, and to permit persons to whom the Software is\\nfurnished to do so, subject to the following conditions:\\n\\nThe above copyright notice and this permission notice shall be included in\\nall copies or substantial portions of the Software.\\n\\nTHE SOFTWARE IS PROVIDED \\"AS IS\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\\nTHE SOFTWARE.\\n*/\\n(function() {\\n  dagre = {};\\n"},{"name":"dot-grammar.pegjs","orderPath":"11-12","type":"file","isAnalyse":false,"file":"\\n\\n// Simplified DOT grammar\\n//\\n// Not supported (yet):\\n//\\n//    * HTML IDs\\n\\n{\\n    var directed;\\n\\n    function rightBiasedMerge(lhs, rhs) {\\n        var result = {};\\n        for (var k in lhs) {\\n            result[k] = lhs[k];\\n        }\\n        for (var k in rhs) {\\n            result[k] = rhs[k];\\n        }\\n        return result;     \\n    }\\n}\\n\\nstart\\n    = _* (strict _)? type:graphType _* id:(id)? _* \'{\' _* stmts:stmtList? _* \'}\' _* {\\n        return {type: type, id: id, stmts: stmts};\\n      }\\n\\nstmtList\\n    = first:stmt _* \';\'? rest:(_* inner:stmt _* \';\'?)* {\\n        var result = [first];\\n        for (var i = 0; i < rest.length; ++i) {\\n            result.push(rest[i][1]);\\n        }\\n        return result;\\n      }\\n\\nstmt\\n    = attrStmt\\n    / subgraphStmt\\n    / inlineAttrStmt\\n    / edgeStmt\\n    / nodeStmt\\n\\nattrStmt\\n    = type:(graph / node /edge) _* attrs:attrList {\\n        return { type: \\"attr\\", attrType: type, attrs: attrs || {}};\\n      }\\n\\ninlineAttrStmt\\n    = k:id _* \'=\' _* v:id {\\n        var attrs = {};\\n        attrs[k] = v;\\n        return { type: \\"inlineAttr\\", attrs: attrs };\\n      } \\n\\nnodeStmt\\n    = id:nodeId _* attrs:attrList? { return {type: \\"node\\", id: id, attrs: attrs || {}}; }\\n\\nedgeStmt\\n    = lhs:(nodeIdOrSubgraph) _* rhs:edgeRHS _* attrs:attrList? {\\n        var elems = [lhs];\\n        for (var i = 0; i < rhs.length; ++i) {\\n            elems.push(rhs[i]);\\n        }\\n        return { type: \\"edge\\", elems: elems, attrs: attrs || {} };\\n      }\\n\\nsubgraphStmt\\n    = id:(subgraph _* (id _*)?)? \'{\' _* stmts:stmtList _* \'}\' {\\n        id = id[2] || [];\\n        return { type: \\"subgraph\\", id: id[0], stmts: stmts };\\n      }\\n\\nattrList\\n    = first:attrListBlock rest:(_* attrListBlock)* {\\n        var result = first;\\n        for (var i = 0; i < rest.length; ++i) {\\n            result = rightBiasedMerge(result, rest[i][1]);\\n        }\\n        return result;\\n      }\\n\\nattrListBlock\\n    = \'[\' _* aList:aList? _* \']\' { return aList; }\\n\\naList\\n    = first:idDef rest:(_* \',\'? _* idDef)* {\\n        var result = first;\\n        for (var i = 0; i < rest.length; ++i) {\\n            result = rightBiasedMerge(result, rest[i][3]);\\n        }\\n        return result;\\n      }\\n\\nedgeRHS\\n    = (\\"--\\" !{ return directed; } / \\"->\\" &{ return directed; }) _* rhs:(nodeIdOrSubgraph) _* rest:edgeRHS? {\\n        var result = [rhs];\\n        for (var i = 0; i < rest.length; ++i) {\\n            result.push(rest[i]);\\n        }\\n        return result;\\n      }\\n\\nidDef\\n    = k:id v:(_* \'=\' _* id)? {\\n        var result = {};\\n        result[k] = v[3];\\n        return result;\\n      }\\n\\nnodeIdOrSubgraph\\n    = subgraphStmt\\n    / id:nodeId { return { type: \\"node\\", id: id, attrs: {} }; }\\n\\nnodeId\\n    = id:id _* port? { return id; }\\n\\nport\\n    = \':\' _* id _* (\':\' _* compassPt)?\\n\\ncompassPt\\n    = \\"n\\" / \\"ne\\" / \\"e\\" / \\"se\\" / \\"s\\" / \\"sw\\" / \\"w\\" / \\"nw\\" / \\"c\\" / \\"_\\"\\n\\nid \\"identifier\\"\\n    = fst:[a-zA-Z\\\\u0200-\\\\u0377_] rest:[a-zA-Z\\\\u0200-\\\\u0377_0-9]* { return fst + rest.join(\\"\\"); }\\n    / sign:\'-\'? dot:\'.\' after:[0-9]+ { return sign + dot + after.join(\\"\\"); }\\n    / sign:\'-\'? before:[0-9]+ after:(\'.\' [0-9]*)? { return sign + before.join(\\"\\") + (after[0] || \\"\\") + (after[1] || []).join(\\"\\"); }\\n    / \'\\"\' id:(\\"\\\\\\\\\\\\\\"\\" { return \'\\"\'; } / \\"\\\\\\\\\\" ch:[^\\"] { return \\"\\\\\\\\\\" + ch; }  / [^\\"])+ \'\\"\' { return id.join(\\"\\"); }\\n\\nnode = k:\\"node\\"i { return k.toLowerCase(); }\\nedge = k:\\"edge\\"i { return k.toLowerCase(); }\\ngraph = k:\\"graph\\"i { return k.toLowerCase(); }\\ndigraph = k:\\"digraph\\"i { return k.toLowerCase(); }\\nsubgraph = k:\\"subgraph\\"i { return k.toLowerCase(); }\\nstrict = k:\\"strict\\"i { return k.toLowerCase(); }\\n\\ngraphType\\n    = graph:graph / graph:digraph {\\n        directed = graph === \\"digraph\\";\\n        return graph;\\n      }\\n\\nwhitespace \\"whitespace\\"\\n    = [ \\\\t\\\\r\\\\n]+\\n\\ncomment \\"comment\\"\\n    = \\"//\\" ([^\\\\n])*\\n    / \\"/*\\" (!\\"*/\\" .)* \\"*/\\"\\n\\n_\\n    = whitespace\\n    / comment\\n\\n"}],"hasAnalyse":true,"isAnalyse":false},{"name":"test","type":"folder","files":[{"name":"util-test.js","orderPath":"12-0","type":"file","isAnalyse":false,"file":"require(\\"./common\\");\\n\\nvar assert2 = require(\\"assert\\");\\n\\ndescribe(\\"dagre.util.components\\", function() {\\n  it(\\"returns all nodes in a connected graph\\", function() {\\n    var g = dagre.graph();\\n    [1, 2, 3].forEach(function(u) { g.addNode(u); });\\n    g.addEdge(\\"A\\", 1, 2);\\n    g.addEdge(\\"B\\", 2, 3);\\n    var cmpts = dagre.util.components(g);\\n    assert.deepEqual(cmpts.map(function(cmpt) { return cmpt.sort(); }),\\n                     [[1, 2, 3]]);\\n  });\\n\\n  it(\\"returns maximal subsets of connected nodes\\", function() {\\n    var g = dagre.graph();\\n    [1, 2, 3, 4, 5, 6].forEach(function(u) { g.addNode(u); });\\n    g.addEdge(\\"A\\", 1, 2);\\n    g.addEdge(\\"B\\", 2, 3);\\n    g.addEdge(\\"C\\", 4, 5);\\n\\n    var cmpts = dagre.util.components(g).sort(function(x, y) { return y.length - x.length; });\\n    assert2.deepEqual(cmpts.map(function(cmpt) { return cmpt.sort(); }),\\n                     [[1, 2, 3], [4, 5], [6]]);\\n  });\\n});\\n\\ndescribe(\\"dagre.util.prim\\", function() {\\n  it(\\"returns a deterministic minimal spanning tree\\", function() {\\n    var g = dagre.graph();\\n    [1, 2, 3, 4].forEach(function(u) { g.addNode(u); });\\n    g.addEdge(\\"12\\", 1, 2);\\n    g.addEdge(\\"13\\", 1, 3);\\n    g.addEdge(\\"24\\", 2, 4);\\n    g.addEdge(\\"34\\", 3, 4);\\n    var weights = { 12: 1, 13: 2, 24: 3, 34: 4 };\\n\\n    var st = dagre.util.prim(g, function(u, v) { return weights[[u,v].sort().join(\\"\\")]; });\\n    Object.keys(st).forEach(function(x) { st[x].sort(); });\\n    assert.deepEqual({1: [2, 3], 2: [1, 4], 3: [1], 4: [2]}, st);\\n  });\\n\\n  it(\\"returns a single field for a single node graph\\", function() {\\n    var g = dagre.graph();\\n    g.addNode(1);\\n    assert.deepEqual({1: []}, dagre.util.prim(g));\\n  });\\n});\\n"},{"name":"graph-test.js","orderPath":"12-1","type":"file","isAnalyse":false,"file":"require(\\"./common\\");\\n\\ndescribe(\\"graph\\", function() {\\n  var g;\\n\\n  beforeEach(function() {\\n    g = dagre.graph();\\n  });\\n\\n  describe(\\"empty graph\\", function() {\\n    it(\\"has no nodes\\", function() {\\n      assert.lengthOf(g.nodes(), 0);\\n    });\\n\\n    it(\\"has no edges\\", function() {\\n      assert.lengthOf(g.edges(), 0);\\n    });\\n  });\\n\\n  describe(\\"addNode\\", function() {\\n    it(\\"adds a new node to the graph\\", function() {\\n      g.addNode(1);\\n\\n      assert.deepEqual(g.nodes(), [1]);\\n\\n      assert.lengthOf(g.successors(1), 0);\\n      assert.lengthOf(g.predecessors(1), 0);\\n      assert.lengthOf(g.neighbors(1), 0);\\n    });\\n  });\\n\\n  describe(\\"delNode\\", function() {\\n    it(\\"removes the node from the graph\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.delNode(1);\\n      assert.deepEqual(g.nodes(), [2]);\\n    });\\n\\n    it(\\"removes out edges\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"1 -> 2\\", 1, 2);\\n      g.delNode(1);\\n      assert.lengthOf(g.predecessors(2), 0);\\n    });\\n\\n    it(\\"removes in edges\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"2 -> 1\\", 2, 1);\\n      g.delNode(1);\\n      assert.lengthOf(g.successors(2), 0);\\n    });\\n  });\\n\\n  describe(\\"addEdge\\", function() {\\n    it(\\"adds a new edge to the graph\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"a\\", 1, 2);\\n\\n      assert.deepEqual(g.edges(), [\\"a\\"]);\\n\\n      assert.deepEqual(g.successors(1), [2]);\\n      assert.deepEqual(g.predecessors(2), [1]);\\n      assert.deepEqual(g.neighbors(1), [2]);\\n      assert.deepEqual(g.neighbors(2), [1]);\\n    });\\n  });\\n\\n  describe(\\"delEdge\\", function() {\\n    it(\\"removes the specified edge from the graph\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"a\\", 1, 2);\\n      g.delEdge(\\"a\\");\\n\\n      assert.lengthOf(g.edges(), 0);\\n\\n      assert.lengthOf(g.successors(1), 0);\\n      assert.lengthOf(g.predecessors(1), 0);\\n      assert.lengthOf(g.neighbors(1), 0);\\n    });\\n  });\\n\\n  describe(\\"edges\\", function() {\\n    it(\\"returns all edges with no arguments\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"A\\", 1, 2);\\n      g.addEdge(\\"B\\", 1, 2);\\n      g.addEdge(\\"C\\", 2, 1);\\n\\n      assert.deepEqual(g.edges().sort(), [\\"A\\", \\"B\\", \\"C\\"]);\\n    });\\n\\n    it(\\"returns all out edges if given a source\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"A\\", 1, 2);\\n      g.addEdge(\\"B\\", 1, 2);\\n      g.addEdge(\\"C\\", 2, 1);\\n\\n      assert.deepEqual(g.edges(1).sort(), [\\"A\\", \\"B\\"]);\\n      assert.deepEqual(g.edges(1, null).sort(), [\\"A\\", \\"B\\"]);\\n    });\\n\\n    it(\\"returns all in edges if given a target\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addEdge(\\"A\\", 1, 2);\\n      g.addEdge(\\"B\\", 1, 2);\\n      g.addEdge(\\"C\\", 2, 1);\\n\\n      assert.deepEqual(g.edges(undefined, 1).sort(), [\\"C\\"]);\\n      assert.deepEqual(g.edges(null, 1).sort(), [\\"C\\"]);\\n    });\\n\\n    it(\\"returns all edges between source and target\\", function() {\\n      g.addNode(1);\\n      g.addNode(2);\\n      g.addNode(3);\\n      g.addEdge(\\"A\\", 1, 2);\\n      g.addEdge(\\"B\\", 1, 2);\\n      g.addEdge(\\"C\\", 2, 1);\\n      g.addEdge(\\"D\\", 2, 3);\\n\\n      assert.deepEqual(g.edges(1, 2).sort(), [\\"A\\", \\"B\\"]);\\n      assert.deepEqual(g.edges(2, 1).sort(), [\\"C\\"]);\\n      assert.deepEqual(g.edges(2, 3).sort(), [\\"D\\"]);\\n      assert.deepEqual(g.edges(3, 1).sort(), []);\\n    });\\n  });\\n\\n  describe(\\"subgraph\\", function() {\\n    it(\\"returns a graph containing a subset of nodes\\", function() {\\n      var g = dagre.graph();\\n      [1,2,3].forEach(function(u) { g.addNode(u); });\\n      g.addEdge(\\"a\\", 1, 2);\\n      g.addEdge(\\"b\\", 2, 3);\\n\\n      var subgraph = g.subgraph([1, 2]);\\n      assert.deepEqual(subgraph.nodes().sort(), [1, 2]);\\n      assert.deepEqual(subgraph.edges(), [\\"a\\"]);\\n    });\\n  });\\n});\\n\\n"},{"name":"layout-test.js","orderPath":"12-2","type":"file","isAnalyse":false,"file":"require(\\"./common\\");\\n\\ndescribe(\\"dagre.layout\\", function() {\\n  it(\\"preserves edge ids for graphs with edges spanning multiple ranks\\", function() {\\n    var g = dagre.graph();\\n    g.addNode(1);\\n    g.addNode(2);\\n    g.addNode(3);\\n    g.addEdge(\\"1->2\\", 1, 2);\\n    g.addEdge(\\"2->3\\", 2, 3);\\n    g.addEdge(\\"1->3\\", 1, 3);\\n    dagre.layout.apply(g);\\n    assert.include(g.edges(), \\"1->3\\");\\n  });\\n});\\n"},{"name":"common.js","orderPath":"12-3","type":"file","isAnalyse":false,"file":"chai = require(\\"chai\\"),\\nassert = chai.assert,\\ndagre = require(\\"../index\\");\\n\\nchai.Assertion.includeStack = true;\\n"}],"hasAnalyse":false,"isAnalyse":false}],"hasAnalyse":true,"isAnalyse":false},"isOnlyShowAnalyseFile":true,"selectedFileOrderPath":"11-1"}'),H={components:{"c-dropdown":g,"v-files":k,"v-code":O,"v-map":P},data(){return{analyseResult:{filesTreeViewWidth:2.5,filesTree:null,selectedFileOrderPath:null,selectedFile:null,isOnlyShowAnalyseFile:!1,fileListVisible:!0,codeVisible:!0,mapVisible:!1}}},created(){this.initAnalyseResult(B)},methods:{importProject(){},initAnalyseResult(u){this.setFileListVisible(u.fileListVisible),this.setCodeVisible(u.codeVisible),this.setMapVisible(u.mapVisible),this.analyseResult.filesTree=w(u.filesTree),this.analyseResult.isOnlyShowAnalyseFile=u.isOnlyShowAnalyseFile,this.analyseResult.selectedFileOrderPath=u.selectedFileOrderPath;let n=this.analyseResult.selectedFileOrderPath,e=this.analyseResult.filesTree.files;if("string"===typeof u.selectedFileOrderPath){let u;n.split("-").forEach((n=>{u=e[n],e=u.files})),this.analyseResult.selectedFile=u}},exportProject(){let u={version:"0",fileListVisible:this.analyseResult.fileListVisible,codeVisible:this.analyseResult.codeVisible,mapVisible:this.analyseResult.mapVisible,filesTree:this.analyseResult.filesTree,isOnlyShowAnalyseFile:this.analyseResult.isOnlyShowAnalyseFile,selectedFileOrderPath:this.analyseResult.selectedFileOrderPath},n=document.createElement("a");n.download="analyseResult.json",n.style.display="none";var e=new Blob([JSON.stringify(u)]);n.href=URL.createObjectURL(e),document.body.appendChild(n),n.click(),document.body.removeChild(n)},setFileListVisible(u){this.analyseResult.fileListVisible=void 0!==u?u:!this.analyseResult.fileListVisible},setCodeVisible(u){this.analyseResult.codeVisible=void 0!==u?u:!this.analyseResult.codeVisible},setMapVisible(u){this.analyseResult.mapVisible=void 0!==u?u:!this.analyseResult.mapVisible}}},F=H,V=(0,d.Z)(F,t,r,!1,null,null,null),W=V.exports}}]);
//# sourceMappingURL=49.f38d9f12.js.map